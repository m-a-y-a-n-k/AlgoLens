{"version":3,"file":"static/js/9878.d79a5d5f.chunk.js","mappings":"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","sources":["webpack://AlgoLens/./src/routing/site/algo/components/HuffmanCoding/HuffmanCoding.module.css?3120","routing/site/algo/components/HuffmanCoding/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HuffmanCoding_container__U3zg5\",\"title\":\"HuffmanCoding_title__9gwuT\",\"inputSection\":\"HuffmanCoding_inputSection__Mv4da\",\"inputGroup\":\"HuffmanCoding_inputGroup__KhBMb\",\"textInput\":\"HuffmanCoding_textInput__PHbdk\",\"btnPrimary\":\"HuffmanCoding_btnPrimary__D5tOS\",\"btnSecondary\":\"HuffmanCoding_btnSecondary__Ea8If\",\"stepInfo\":\"HuffmanCoding_stepInfo__EhqkB\",\"slideDown\":\"HuffmanCoding_slideDown__avkVU\",\"section\":\"HuffmanCoding_section__P-1ao\",\"fadeIn\":\"HuffmanCoding_fadeIn__roC6N\",\"frequencyTable\":\"HuffmanCoding_frequencyTable__IJmI3\",\"freqItem\":\"HuffmanCoding_freqItem__b5tl8\",\"charBox\":\"HuffmanCoding_charBox__wh3-n\",\"freqBar\":\"HuffmanCoding_freqBar__FH80p\",\"freqBarFill\":\"HuffmanCoding_freqBarFill__vfJU4\",\"fillBar\":\"HuffmanCoding_fillBar__OpWs4\",\"freqCount\":\"HuffmanCoding_freqCount__Rgbv4\",\"treeContainer\":\"HuffmanCoding_treeContainer__MBq-t\",\"treeSvg\":\"HuffmanCoding_treeSvg__2BZME\",\"treeLine\":\"HuffmanCoding_treeLine__mYjXG\",\"leafNode\":\"HuffmanCoding_leafNode__nxzkF\",\"nodeAppear\":\"HuffmanCoding_nodeAppear__cj5-x\",\"internalNode\":\"HuffmanCoding_internalNode__3u2uH\",\"nodeText\":\"HuffmanCoding_nodeText__53QcS\",\"freqText\":\"HuffmanCoding_freqText__l+4OS\",\"edgeLabel\":\"HuffmanCoding_edgeLabel__MUo0V\",\"treeNote\":\"HuffmanCoding_treeNote__kPvj8\",\"codesTable\":\"HuffmanCoding_codesTable__ePD60\",\"codeItem\":\"HuffmanCoding_codeItem__1DegC\",\"slideUp\":\"HuffmanCoding_slideUp__qKWXC\",\"codeChar\":\"HuffmanCoding_codeChar__6TIsd\",\"codeArrow\":\"HuffmanCoding_codeArrow__E-qga\",\"codeBinary\":\"HuffmanCoding_codeBinary__NnLBD\",\"codeLength\":\"HuffmanCoding_codeLength__Itsk0\",\"resultBox\":\"HuffmanCoding_resultBox__ExMxb\",\"resultItem\":\"HuffmanCoding_resultItem__hFPBZ\",\"textDisplay\":\"HuffmanCoding_textDisplay__gJCGw\",\"statsGrid\":\"HuffmanCoding_statsGrid__WSSG2\",\"statCard\":\"HuffmanCoding_statCard__Dk0Yf\",\"scaleIn\":\"HuffmanCoding_scaleIn__5bpS1\",\"statLabel\":\"HuffmanCoding_statLabel__ivHb+\",\"statValue\":\"HuffmanCoding_statValue__Dt6KM\",\"explanation\":\"HuffmanCoding_explanation__Ioyor\",\"complexityBox\":\"HuffmanCoding_complexityBox__IQb97\"};","import React, { useState, useRef, useEffect } from \"react\"\nimport styles from \"./HuffmanCoding.module.css\"\n\nclass HuffmanNode {\n  constructor(char, freq, left = null, right = null) {\n    this.char = char\n    this.freq = freq\n    this.left = left\n    this.right = right\n  }\n}\n\nconst HuffmanCoding = () => {\n  const [inputText, setInputText] = useState(\"HUFFMAN CODING\")\n  const [frequencies, setFrequencies] = useState({})\n  const [huffmanTree, setHuffmanTree] = useState(null)\n  const [codes, setCodes] = useState({})\n  const [encodedText, setEncodedText] = useState(\"\")\n  const [decodedText, setDecodedText] = useState(\"\")\n  const [buildingSteps, setBuildingSteps] = useState([])\n  const [currentStep, setCurrentStep] = useState(0)\n  const [isAnimating, setIsAnimating] = useState(false)\n  const [compressionRatio, setCompressionRatio] = useState(0)\n  const animationRef = useRef(null)\n\n  const calculateFrequencies = (text) => {\n    const freq = {}\n    for (const char of text) {\n      freq[char] = (freq[char] || 0) + 1\n    }\n    return freq\n  }\n\n  const buildHuffmanTree = (frequencies) => {\n    const steps = []\n    const nodes = Object.entries(frequencies).map(\n      ([char, freq]) => new HuffmanNode(char, freq)\n    )\n\n    // Sort by frequency\n    nodes.sort((a, b) => a.freq - b.freq)\n    steps.push({ action: \"initial\", nodes: [...nodes] })\n\n    while (nodes.length > 1) {\n      // Take two nodes with smallest frequencies\n      const left = nodes.shift()\n      const right = nodes.shift()\n\n      // Create internal node\n      const parent = new HuffmanNode(null, left.freq + right.freq, left, right)\n\n      // Insert back maintaining sorted order\n      let inserted = false\n      for (let i = 0; i < nodes.length; i++) {\n        if (parent.freq <= nodes[i].freq) {\n          nodes.splice(i, 0, parent)\n          inserted = true\n          break\n        }\n      }\n      if (!inserted) {\n        nodes.push(parent)\n      }\n\n      steps.push({\n        action: \"merge\",\n        left,\n        right,\n        parent,\n        nodes: [...nodes],\n      })\n    }\n\n    return { tree: nodes[0], steps }\n  }\n\n  const generateCodes = (node, code = \"\", codesMap = {}) => {\n    if (!node) return codesMap\n\n    // Leaf node\n    if (node.char !== null) {\n      codesMap[node.char] = code || \"0\" // Handle single character case\n      return codesMap\n    }\n\n    // Traverse left and right\n    generateCodes(node.left, code + \"0\", codesMap)\n    generateCodes(node.right, code + \"1\", codesMap)\n\n    return codesMap\n  }\n\n  const encodeText = (text, codes) => {\n    return text\n      .split(\"\")\n      .map((char) => codes[char] || \"\")\n      .join(\"\")\n  }\n\n  const decodeText = (encoded, tree) => {\n    if (!tree || !encoded) return \"\"\n\n    let decoded = \"\"\n    let current = tree\n\n    for (const bit of encoded) {\n      current = bit === \"0\" ? current.left : current.right\n\n      if (current.char !== null) {\n        decoded += current.char\n        current = tree\n      }\n    }\n\n    return decoded\n  }\n\n  const handleBuildTree = () => {\n    if (!inputText.trim()) {\n      alert(\"Please enter some text!\")\n      return\n    }\n\n    const freq = calculateFrequencies(inputText)\n    setFrequencies(freq)\n\n    const { tree, steps } = buildHuffmanTree(freq)\n    setHuffmanTree(tree)\n    setBuildingSteps(steps)\n\n    const huffmanCodes = generateCodes(tree)\n    setCodes(huffmanCodes)\n\n    const encoded = encodeText(inputText, huffmanCodes)\n    setEncodedText(encoded)\n\n    const decoded = decodeText(encoded, tree)\n    setDecodedText(decoded)\n\n    // Calculate compression ratio\n    const originalBits = inputText.length * 8 // ASCII\n    const compressedBits = encoded.length\n    const ratio = ((1 - compressedBits / originalBits) * 100).toFixed(2)\n    setCompressionRatio(ratio)\n\n    // Start animation\n    setCurrentStep(0)\n    setIsAnimating(true)\n  }\n\n  useEffect(() => {\n    if (isAnimating && currentStep < buildingSteps.length) {\n      animationRef.current = setTimeout(() => {\n        setCurrentStep((prev) => prev + 1)\n      }, 1500)\n    } else if (currentStep >= buildingSteps.length) {\n      setIsAnimating(false)\n    }\n\n    return () => {\n      if (animationRef.current) {\n        clearTimeout(animationRef.current)\n      }\n    }\n  }, [isAnimating, currentStep, buildingSteps.length])\n\n  const resetAnimation = () => {\n    setCurrentStep(0)\n    setIsAnimating(true)\n  }\n\n  const renderTreeNode = (node, x, y, level, horizontalSpacing) => {\n    if (!node) return null\n\n    const nodeRadius = 30\n    const verticalSpacing = 80\n    const offset = horizontalSpacing / Math.pow(2, level + 1)\n\n    const elements = []\n\n    // Draw connections to children\n    if (node.left) {\n      const childX = x - offset\n      const childY = y + verticalSpacing\n      elements.push(\n        <g key={`left-${x}-${y}`}>\n          <line\n            x1={x}\n            y1={y + nodeRadius}\n            x2={childX}\n            y2={childY - nodeRadius}\n            className={styles.treeLine}\n            strokeWidth=\"2\"\n          />\n          <text\n            x={(x + childX) / 2 - 10}\n            y={(y + childY) / 2}\n            className={styles.edgeLabel}\n          >\n            0\n          </text>\n        </g>\n      )\n      elements.push(\n        ...renderTreeNode(\n          node.left,\n          childX,\n          childY,\n          level + 1,\n          horizontalSpacing\n        )\n      )\n    }\n\n    if (node.right) {\n      const childX = x + offset\n      const childY = y + verticalSpacing\n      elements.push(\n        <g key={`right-${x}-${y}`}>\n          <line\n            x1={x}\n            y1={y + nodeRadius}\n            x2={childX}\n            y2={childY - nodeRadius}\n            className={styles.treeLine}\n            strokeWidth=\"2\"\n          />\n          <text\n            x={(x + childX) / 2 + 10}\n            y={(y + childY) / 2}\n            className={styles.edgeLabel}\n          >\n            1\n          </text>\n        </g>\n      )\n      elements.push(\n        ...renderTreeNode(\n          node.right,\n          childX,\n          childY,\n          level + 1,\n          horizontalSpacing\n        )\n      )\n    }\n\n    // Draw node\n    const isLeaf = node.char !== null\n    elements.push(\n      <g key={`node-${x}-${y}`}>\n        <circle\n          cx={x}\n          cy={y}\n          r={nodeRadius}\n          className={isLeaf ? styles.leafNode : styles.internalNode}\n        />\n        <text x={x} y={y - 5} textAnchor=\"middle\" className={styles.nodeText}>\n          {node.char || \"⬤\"}\n        </text>\n        <text x={x} y={y + 12} textAnchor=\"middle\" className={styles.freqText}>\n          {node.freq}\n        </text>\n      </g>\n    )\n\n    return elements\n  }\n\n  const getCurrentStepInfo = () => {\n    if (currentStep === 0 || currentStep > buildingSteps.length) return null\n    const step = buildingSteps[currentStep - 1]\n\n    if (step.action === \"initial\") {\n      return \"Initial priority queue sorted by frequency\"\n    } else if (step.action === \"merge\") {\n      const leftChar = step.left.char || \"internal\"\n      const rightChar = step.right.char || \"internal\"\n      return `Merging '${leftChar}' (${step.left.freq}) + '${rightChar}' (${step.right.freq}) = ${step.parent.freq}`\n    }\n    return null\n  }\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Huffman Coding - Data Compression 🗜️</h1>\n\n      {/* Input Section */}\n      <div className={styles.inputSection}>\n        <div className={styles.inputGroup}>\n          <label htmlFor=\"inputText\">Enter Text to Compress:</label>\n          <input\n            id=\"inputText\"\n            type=\"text\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value.toUpperCase())}\n            placeholder=\"Enter text...\"\n            className={styles.textInput}\n            disabled={isAnimating}\n          />\n        </div>\n        <button\n          onClick={handleBuildTree}\n          className={styles.btnPrimary}\n          disabled={isAnimating || !inputText.trim()}\n        >\n          Build Huffman Tree\n        </button>\n        {buildingSteps.length > 0 && (\n          <button\n            onClick={resetAnimation}\n            className={styles.btnSecondary}\n            disabled={isAnimating}\n          >\n            Replay Animation\n          </button>\n        )}\n      </div>\n\n      {/* Step Info */}\n      {isAnimating && getCurrentStepInfo() && (\n        <div className={styles.stepInfo}>\n          <strong>Step {currentStep}:</strong> {getCurrentStepInfo()}\n        </div>\n      )}\n\n      {/* Frequency Table */}\n      {Object.keys(frequencies).length > 0 && (\n        <div className={styles.section}>\n          <h3>Character Frequencies</h3>\n          <div className={styles.frequencyTable}>\n            {Object.entries(frequencies)\n              .sort((a, b) => b[1] - a[1])\n              .map(([char, freq]) => (\n                <div key={char} className={styles.freqItem}>\n                  <span className={styles.charBox}>\n                    {char === \" \" ? \"SPACE\" : char}\n                  </span>\n                  <div className={styles.freqBar}>\n                    <div\n                      className={styles.freqBarFill}\n                      style={{\n                        width: `${\n                          (freq / Math.max(...Object.values(frequencies))) * 100\n                        }%`,\n                      }}\n                    />\n                  </div>\n                  <span className={styles.freqCount}>{freq}</span>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {/* Huffman Tree Visualization */}\n      {huffmanTree && currentStep >= buildingSteps.length && (\n        <div className={styles.section}>\n          <h3>Huffman Tree</h3>\n          <div className={styles.treeContainer}>\n            <svg width=\"800\" height=\"400\" className={styles.treeSvg}>\n              {renderTreeNode(huffmanTree, 400, 40, 0, 400)}\n            </svg>\n          </div>\n          <p className={styles.treeNote}>\n            Left edges = 0, Right edges = 1. Traverse from root to leaf to get\n            the code.\n          </p>\n        </div>\n      )}\n\n      {/* Encoding Table */}\n      {Object.keys(codes).length > 0 && currentStep >= buildingSteps.length && (\n        <div className={styles.section}>\n          <h3>Huffman Codes</h3>\n          <div className={styles.codesTable}>\n            {Object.entries(codes)\n              .sort((a, b) => a[1].length - b[1].length)\n              .map(([char, code]) => (\n                <div key={char} className={styles.codeItem}>\n                  <span className={styles.codeChar}>\n                    {char === \" \" ? \"SPACE\" : char}\n                  </span>\n                  <span className={styles.codeArrow}>→</span>\n                  <span className={styles.codeBinary}>{code}</span>\n                  <span className={styles.codeLength}>\n                    ({code.length} bits)\n                  </span>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {/* Encoding/Decoding Results */}\n      {encodedText && currentStep >= buildingSteps.length && (\n        <div className={styles.section}>\n          <h3>Compression Results</h3>\n          <div className={styles.resultBox}>\n            <div className={styles.resultItem}>\n              <strong>Original Text:</strong>\n              <div className={styles.textDisplay}>{inputText}</div>\n            </div>\n            <div className={styles.resultItem}>\n              <strong>Encoded Binary:</strong>\n              <div className={styles.textDisplay}>{encodedText}</div>\n            </div>\n            <div className={styles.resultItem}>\n              <strong>Decoded Text:</strong>\n              <div className={styles.textDisplay}>{decodedText}</div>\n            </div>\n            <div className={styles.statsGrid}>\n              <div className={styles.statCard}>\n                <div className={styles.statLabel}>Original Size</div>\n                <div className={styles.statValue}>\n                  {inputText.length * 8} bits\n                </div>\n              </div>\n              <div className={styles.statCard}>\n                <div className={styles.statLabel}>Compressed Size</div>\n                <div className={styles.statValue}>\n                  {encodedText.length} bits\n                </div>\n              </div>\n              <div className={styles.statCard}>\n                <div className={styles.statLabel}>Compression Ratio</div>\n                <div className={styles.statValue}>{compressionRatio}%</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Algorithm Explanation */}\n      <div className={styles.explanation}>\n        <h3>How Huffman Coding Works:</h3>\n        <ol>\n          <li>\n            <strong>Calculate Frequencies:</strong> Count how many times each\n            character appears in the text\n          </li>\n          <li>\n            <strong>Create Priority Queue:</strong> Create a node for each\n            character with its frequency\n          </li>\n          <li>\n            <strong>Build Tree:</strong> Repeatedly merge the two nodes with\n            smallest frequencies\n          </li>\n          <li>\n            <strong>Generate Codes:</strong> Traverse the tree - left edges are\n            0, right edges are 1\n          </li>\n          <li>\n            <strong>Encode:</strong> Replace each character with its binary code\n          </li>\n          <li>\n            <strong>Decode:</strong> Traverse the tree using the binary digits\n            to reconstruct original text\n          </li>\n        </ol>\n        <div className={styles.complexityBox}>\n          <strong>Time Complexity:</strong> O(n log n) where n is the number of\n          unique characters\n          <br />\n          <strong>Space Complexity:</strong> O(n) for the tree and codes\n          <br />\n          <strong>Key Property:</strong> Prefix-free codes - no code is a prefix\n          of another\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HuffmanCoding\n"],"names":["HuffmanNode","constructor","char","freq","left","arguments","length","undefined","right","this","HuffmanCoding","inputText","setInputText","useState","frequencies","setFrequencies","huffmanTree","setHuffmanTree","codes","setCodes","encodedText","setEncodedText","decodedText","setDecodedText","buildingSteps","setBuildingSteps","currentStep","setCurrentStep","isAnimating","setIsAnimating","compressionRatio","setCompressionRatio","animationRef","useRef","generateCodes","node","code","codesMap","useEffect","current","setTimeout","prev","clearTimeout","renderTreeNode","x","y","level","horizontalSpacing","offset","Math","pow","elements","childX","childY","push","_jsxs","children","_jsx","x1","y1","x2","y2","className","styles","strokeWidth","isLeaf","cx","cy","r","textAnchor","getCurrentStepInfo","step","action","leftChar","rightChar","parent","htmlFor","id","type","value","onChange","e","target","toUpperCase","placeholder","disabled","onClick","handleBuildTree","trim","alert","text","calculateFrequencies","tree","steps","nodes","Object","entries","map","_ref","sort","a","b","shift","inserted","i","splice","buildHuffmanTree","huffmanCodes","encoded","encodeText","split","join","decoded","decodeText","bit","originalBits","ratio","toFixed","resetAnimation","keys","_ref2","style","width","max","values","height","_ref3"],"sourceRoot":""}