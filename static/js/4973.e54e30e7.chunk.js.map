{"version":3,"file":"static/js/4973.e54e30e7.chunk.js","mappings":"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","sources":["webpack://app/./src/routing/site/algo/components/DFSGraph/DFSGraph.module.css?dfb1","routing/site/algo/components/DFSGraph/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DFSGraph_container__mFPWr\",\"button\":\"DFSGraph_button__yc6wX\",\"graph\":\"DFSGraph_graph__5VLHx\",\"unvisitedNode\":\"DFSGraph_unvisitedNode__N0y1V\",\"visitedNode\":\"DFSGraph_visitedNode__GgUvU\"};","import React, { useState, useEffect } from \"react\"\r\nimport styles from \"./DFSGraph.module.css\"\r\n\r\nconst graph = {\r\n  A: [\"B\", \"C\"],\r\n  B: [\"A\", \"D\", \"E\"],\r\n  C: [\"A\", \"F\", \"G\"],\r\n  D: [\"B\", \"H\"],\r\n  E: [\"B\", \"I\"],\r\n  F: [\"C\", \"J\"],\r\n  G: [\"C\"],\r\n  H: [\"D\"],\r\n  I: [\"E\"],\r\n  J: [\"F\"],\r\n}\r\n\r\nconst positions = {\r\n  A: { x: 100, y: 200 },\r\n  B: { x: 220, y: 120 },\r\n  C: { x: 220, y: 280 },\r\n  D: { x: 340, y: 60 },\r\n  E: { x: 340, y: 160 },\r\n  F: { x: 340, y: 240 },\r\n  G: { x: 340, y: 320 },\r\n  H: { x: 460, y: 60 },\r\n  I: { x: 460, y: 160 },\r\n  J: { x: 460, y: 240 },\r\n}\r\n\r\nexport default function DFSGraph() {\r\n  const [visited, setVisited] = useState([])\r\n  const [running, setRunning] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!running) return\r\n\r\n    let order = []\r\n    const visitedSet = new Set()\r\n\r\n    function dfs(node) {\r\n      if (visitedSet.has(node)) return\r\n      visitedSet.add(node)\r\n      order.push(node)\r\n      graph[node].forEach((n) => dfs(n))\r\n    }\r\n\r\n    dfs(\"A\") // start DFS from A\r\n\r\n    let i = 0\r\n    const interval = setInterval(() => {\r\n      if (i < order.length) {\r\n        setVisited((prev) => [...prev, order[i]])\r\n        i++\r\n      } else {\r\n        clearInterval(interval)\r\n      }\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [running])\r\n\r\n  const edges = []\r\n  Object.keys(graph).forEach((node) => {\r\n    graph[node].forEach((neighbor) => {\r\n      if (\r\n        Object.keys(positions).includes(neighbor) &&\r\n        node < neighbor // avoid duplicate edges\r\n      ) {\r\n        edges.push([node, neighbor])\r\n      }\r\n    })\r\n  })\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2>Depth First Search ðŸŒ²</h2>\r\n      <button\r\n        className={styles.button}\r\n        onClick={() => {\r\n          setVisited([])\r\n          setRunning(true)\r\n        }}\r\n      >\r\n        Start DFS\r\n      </button>\r\n      <div>\r\n        <svg width=\"600\" height=\"400\" className={styles.graph}>\r\n          {/* Draw edges */}\r\n          {edges.map(([from, to], idx) => (\r\n            <line\r\n              key={idx}\r\n              x1={positions[from].x}\r\n              y1={positions[from].y}\r\n              x2={positions[to].x}\r\n              y2={positions[to].y}\r\n              stroke=\"#999\"\r\n              strokeWidth=\"2\"\r\n            />\r\n          ))}\r\n\r\n          {/* Draw nodes */}\r\n          {Object.keys(positions).map((node) => (\r\n            <g key={node}>\r\n              <circle\r\n                cx={positions[node].x}\r\n                cy={positions[node].y}\r\n                r=\"20\"\r\n                className={\r\n                  visited.includes(node)\r\n                    ? styles.visitedNode\r\n                    : styles.unvisitedNode\r\n                }\r\n              />\r\n              <text\r\n                x={positions[node].x}\r\n                y={positions[node].y + 5}\r\n                textAnchor=\"middle\"\r\n                fontSize=\"14\"\r\n                fill=\"white\"\r\n              >\r\n                {node}\r\n              </text>\r\n            </g>\r\n          ))}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["graph","A","B","C","D","E","F","G","H","I","J","positions","x","y","DFSGraph","visited","setVisited","useState","running","setRunning","useEffect","order","visitedSet","Set","dfs","node","has","add","push","forEach","n","i","interval","setInterval","length","prev","clearInterval","edges","Object","keys","neighbor","includes","_jsxs","className","styles","children","_jsx","onClick","width","height","map","_ref","idx","from","to","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","r","textAnchor","fontSize","fill"],"sourceRoot":""}