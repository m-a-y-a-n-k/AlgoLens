{"version":3,"file":"static/js/7915.ff4e6f61.chunk.js","mappings":"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","sources":["common/components/Table.jsx"],"sourcesContent":["import React, { useCallback, useState, useEffect, lazy } from \"react\"\nimport PropTypes from \"prop-types\"\nimport clsx from \"clsx\"\nimport { lighten, makeStyles } from \"@material-ui/core/styles\"\nimport {\n  FormControl,\n  Switch,\n  FormControlLabel,\n  Tooltip,\n  IconButton,\n  Checkbox,\n  Paper,\n  Typography,\n  Toolbar,\n  Table,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n} from \"@material-ui/core\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport NotInterestedIcon from \"@material-ui/icons/NotInterested\"\nimport { DynamicLoader } from \"../../routing/base/Router\"\n\nconst TableBody = lazy(() => import(`@material-ui/core/TableBody`))\nconst TableContainer = lazy(() => import(`@material-ui/core/TableContainer`))\nconst TablePagination = lazy(() => import(`@material-ui/core/TablePagination`))\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index])\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) return order\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map((el) => el[0])\n}\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    numSelected,\n    order,\n    orderBy,\n    onSelectAllClick,\n    onRequestSort,\n    rowCount,\n    headCells,\n  } = props\n\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property)\n  }\n\n  return (\n    <TableHead className={classes.tableHead}>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all enteries\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            className={classes.headCell}\n            key={headCell.id}\n            align={headCell.numeric ? \"right\" : \"left\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n  headCells: PropTypes.array.isRequired,\n}\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(1),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    flexDirection: \"column\",\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n          flexDirection: \"row\",\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n          flexDirection: \"row\",\n        },\n  title: {\n    flex: \"1 1 100%\",\n    margin: theme.spacing(1),\n  },\n  searchField: {\n    margin: theme.spacing(2),\n    width: \"80%\",\n  },\n  searchColumns: {\n    margin: theme.spacing(1),\n    flexDirection: \"row\",\n  },\n}))\n\nconst EnhancedTableToolbar = ({\n  numSelected,\n  title,\n  setSelected,\n  deleteHandler,\n  selected,\n  searchState,\n  setSearchState,\n  performSearch,\n  headCells,\n}) => {\n  const classes = useToolbarStyles()\n  const searchText = searchState?.searchText || \"\"\n  const selectedIds = searchState?.searchIds || new Set()\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <>\n          <FormControl className={classes.searchField} variant=\"outlined\">\n            <InputLabel htmlFor=\"outlined-search-table\">\n              Search In Table\n            </InputLabel>\n            <OutlinedInput\n              autoComplete=\"off\"\n              id=\"outlined-search-table\"\n              type={\"text\"}\n              value={searchText}\n              onChange={({ target: { value } }) => {\n                setSearchState({\n                  searchText: value || \"\",\n                  searchIds: selectedIds,\n                })\n              }}\n              endAdornment={\n                <Tooltip title=\"Filter table\">\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"perform-search\"\n                      onClick={() => {\n                        performSearch(searchState)\n                      }}\n                      onMouseDown={(e) => {\n                        e.preventDefault()\n                      }}\n                      disabled={!searchText}\n                      edge=\"end\"\n                    >\n                      {searchText ? <SearchIcon /> : <NotInterestedIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                </Tooltip>\n              }\n              labelWidth={120}\n            />\n          </FormControl>\n          {searchText && (\n            <FormControl className={classes.searchColumns}>\n              {headCells.map((cell) => {\n                const { id, label } = cell\n                return (\n                  <FormControlLabel\n                    key={id}\n                    control={\n                      <Checkbox\n                        checked={selectedIds.has(id)}\n                        onChange={({ target: { checked } }) => {\n                          checked\n                            ? selectedIds.add(id)\n                            : selectedIds.size > 1 && selectedIds.delete(id)\n                          setSearchState({\n                            searchText: searchText,\n                            searchIds: selectedIds,\n                          })\n                        }}\n                        inputProps={{ \"aria-label\": \"select all enteries\" }}\n                      />\n                    }\n                    label={label}\n                  />\n                )\n              })}\n            </FormControl>\n          )}\n        </>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton\n            aria-label=\"delete\"\n            onClick={() => {\n              deleteHandler(selected)\n              setSelected([])\n            }}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Typography\n          className={classes.title}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          {title}\n        </Typography>\n      )}\n    </Toolbar>\n  )\n}\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  searchState: PropTypes.object.isRequired,\n  performSearch: PropTypes.func.isRequired,\n  setSearchState: PropTypes.func.isRequired,\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    width: \"100vw\",\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  tableHead: {\n    background: \"#A2DDFF\",\n  },\n  headCell: {\n    fontWeight: \"bolder\",\n  },\n  tableNote: {\n    textAlign: \"center\",\n    fontSize: 16,\n    fontWeight: \"lighter\",\n    padding: \"15px 0px\",\n    fontStyle: \"italic\",\n  },\n}))\n\nexport default function EnhancedTable({\n  allRows,\n  rows,\n  headCells,\n  deleteHandler,\n  title,\n  setFilteredRows,\n}) {\n  const primaryCellKey =\n    (headCells &&\n      Array.isArray(headCells) &&\n      headCells.length > 0 &&\n      headCells[0].id) ||\n    \"\"\n  const classes = useStyles()\n  const [order, setOrder] = useState(\"asc\")\n  const [orderBy, setOrderBy] = useState(primaryCellKey)\n  const [selected, setSelected] = useState([])\n  const [page, setPage] = useState(0)\n  const [dense, setDense] = useState(false)\n  const [rowsPerPage, setRowsPerPage] = useState(5)\n  const [searchState, setSearchState] = useState({\n    searchText: \"\",\n    searchIds: new Set([primaryCellKey]),\n  })\n\n  const handlePerformSearch = useCallback(() => {\n    const { searchText, searchIds } = searchState\n    const temp = allRows.filter((row) => {\n      let res = false\n      for (let id of searchIds) {\n        if (!res) {\n          res = row[id].includes(searchText)\n        }\n      }\n      return res\n    })\n    setFilteredRows(temp)\n    setPage(0)\n  }, [searchState, setFilteredRows, allRows])\n\n  useEffect(() => {\n    handlePerformSearch()\n  }, [handlePerformSearch])\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\"\n    setOrder(isAsc ? \"desc\" : \"asc\")\n    setOrderBy(property)\n  }\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n[primaryCellKey])\n      setSelected(newSelecteds)\n      return\n    }\n    setSelected([])\n  }\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name)\n    let newSelected = []\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name)\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1))\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1))\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      )\n    }\n    setSelected(newSelected)\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked)\n  }\n\n  const isSelected = (name) => selected.indexOf(name) !== -1\n\n  const emptyRows = rows.length === 0\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar\n          title={title}\n          numSelected={selected.length}\n          selected={selected}\n          searchState={searchState}\n          headCells={headCells}\n          performSearch={() => {\n            handlePerformSearch()\n          }}\n          deleteHandler={deleteHandler}\n          setSelected={setSelected}\n          setSearchState={setSearchState}\n        />\n        {DynamicLoader(TableContainer, {\n          children: (\n            <>\n              <Table\n                className={classes.table}\n                aria-labelledby=\"tableTitle\"\n                size={dense ? \"small\" : \"medium\"}\n                aria-label=\"enhanced table\"\n              >\n                <EnhancedTableHead\n                  classes={classes}\n                  numSelected={selected.length}\n                  order={order}\n                  orderBy={orderBy}\n                  onSelectAllClick={handleSelectAllClick}\n                  onRequestSort={handleRequestSort}\n                  rowCount={rows.length}\n                  headCells={headCells}\n                />\n                {DynamicLoader(TableBody, {\n                  children: stableSort(rows, getComparator(order, orderBy))\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row[primaryCellKey])\n                      const labelId = `enhanced-table-checkbox-${index}`\n\n                      return (\n                        <TableRow\n                          hover\n                          onClick={(event) =>\n                            handleClick(event, row[primaryCellKey])\n                          }\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          key={row[primaryCellKey]}\n                          selected={isItemSelected}\n                        >\n                          <TableCell padding=\"checkbox\">\n                            <Checkbox\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                            />\n                          </TableCell>\n                          {headCells.map((cell, index) => {\n                            return index === 0 ? (\n                              <TableCell\n                                key={cell.id}\n                                component=\"th\"\n                                id={labelId}\n                                scope=\"row\"\n                                padding=\"none\"\n                              >\n                                {row[cell.id]}\n                              </TableCell>\n                            ) : (\n                              <TableCell key={cell.id} align=\"left\">\n                                {row[cell.id]}\n                              </TableCell>\n                            )\n                          })}\n                        </TableRow>\n                      )\n                    }),\n                })}\n              </Table>\n              {emptyRows && (\n                <Typography className={classes.tableNote}>\n                  {searchState.searchText\n                    ? `No search results found :( `\n                    : `No data found. Please add some entries using + button`}\n                </Typography>\n              )}\n            </>\n          ),\n        })}\n        {DynamicLoader(TablePagination, {\n          rowsPerPageOptions: [5, 10, 25],\n          component: \"div\",\n          count: rows.length,\n          rowsPerPage: rowsPerPage,\n          page: page,\n          onChangePage: handleChangePage,\n          onChangeRowsPerPage: handleChangeRowsPerPage,\n        })}\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  )\n}\n"],"names":["TableBody","lazy","TableContainer","TablePagination","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","EnhancedTableHead","props","classes","numSelected","onSelectAllClick","onRequestSort","rowCount","headCells","_jsx","TableHead","className","tableHead","children","_jsxs","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","headCell","align","numeric","disablePadding","sortDirection","id","TableSortLabel","active","direction","onClick","property","event","label","visuallyHidden","useToolbarStyles","makeStyles","theme","root","margin","spacing","paddingLeft","paddingRight","flexDirection","highlight","palette","type","color","secondary","main","backgroundColor","lighten","light","text","primary","dark","title","flex","searchField","width","searchColumns","EnhancedTableToolbar","_ref","setSelected","deleteHandler","selected","searchState","setSearchState","performSearch","searchText","selectedIds","searchIds","Set","Toolbar","clsx","Typography","variant","component","_Fragment","FormControl","InputLabel","htmlFor","OutlinedInput","autoComplete","value","_ref2","target","endAdornment","Tooltip","InputAdornment","position","IconButton","onMouseDown","e","preventDefault","disabled","edge","SearchIcon","NotInterestedIcon","labelWidth","cell","FormControlLabel","control","has","_ref3","add","size","delete","DeleteIcon","useStyles","paper","marginBottom","table","border","clip","height","overflow","top","background","fontWeight","tableNote","textAlign","fontSize","fontStyle","EnhancedTable","_ref4","allRows","rows","setFilteredRows","primaryCellKey","Array","isArray","length","setOrder","useState","setOrderBy","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","handlePerformSearch","useCallback","temp","filter","row","res","includes","useEffect","emptyRows","Paper","DynamicLoader","Table","newSelecteds","n","handleRequestSort","slice","isItemSelected","name","indexOf","labelId","concat","hover","handleClick","selectedIndex","newSelected","role","tabIndex","scope","rowsPerPageOptions","count","onChangePage","handleChangePage","newPage","onChangeRowsPerPage","parseInt","Switch"],"sourceRoot":""}