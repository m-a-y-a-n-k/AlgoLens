{"version":3,"file":"static/js/7915.ff4e6f61.chunk.js","mappings":"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","sources":["common/components/Table.jsx"],"sourcesContent":["import React, { useCallback, useState, useEffect, lazy } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport clsx from \"clsx\"\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\"\r\nimport {\r\n  FormControl,\r\n  Switch,\r\n  FormControlLabel,\r\n  Tooltip,\r\n  IconButton,\r\n  Checkbox,\r\n  Paper,\r\n  Typography,\r\n  Toolbar,\r\n  Table,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport NotInterestedIcon from \"@material-ui/icons/NotInterested\"\r\nimport { DynamicLoader } from \"../../routing/base/Router\"\r\n\r\nconst TableBody = lazy(() => import(`@material-ui/core/TableBody`))\r\nconst TableContainer = lazy(() => import(`@material-ui/core/TableContainer`))\r\nconst TablePagination = lazy(() => import(`@material-ui/core/TablePagination`))\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    numSelected,\r\n    order,\r\n    orderBy,\r\n    onSelectAllClick,\r\n    onRequestSort,\r\n    rowCount,\r\n    headCells,\r\n  } = props\r\n\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  return (\r\n    <TableHead className={classes.tableHead}>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all enteries\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            className={classes.headCell}\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n  headCells: PropTypes.array.isRequired,\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    flexDirection: \"column\",\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n          flexDirection: \"row\",\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n          flexDirection: \"row\",\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n    margin: theme.spacing(1),\r\n  },\r\n  searchField: {\r\n    margin: theme.spacing(2),\r\n    width: \"80%\",\r\n  },\r\n  searchColumns: {\r\n    margin: theme.spacing(1),\r\n    flexDirection: \"row\",\r\n  },\r\n}))\r\n\r\nconst EnhancedTableToolbar = ({\r\n  numSelected,\r\n  title,\r\n  setSelected,\r\n  deleteHandler,\r\n  selected,\r\n  searchState,\r\n  setSearchState,\r\n  performSearch,\r\n  headCells,\r\n}) => {\r\n  const classes = useToolbarStyles()\r\n  const searchText = searchState?.searchText || \"\"\r\n  const selectedIds = searchState?.searchIds || new Set()\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <>\r\n          <FormControl className={classes.searchField} variant=\"outlined\">\r\n            <InputLabel htmlFor=\"outlined-search-table\">\r\n              Search In Table\r\n            </InputLabel>\r\n            <OutlinedInput\r\n              autoComplete=\"off\"\r\n              id=\"outlined-search-table\"\r\n              type={\"text\"}\r\n              value={searchText}\r\n              onChange={({ target: { value } }) => {\r\n                setSearchState({\r\n                  searchText: value || \"\",\r\n                  searchIds: selectedIds,\r\n                })\r\n              }}\r\n              endAdornment={\r\n                <Tooltip title=\"Filter table\">\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"perform-search\"\r\n                      onClick={() => {\r\n                        performSearch(searchState)\r\n                      }}\r\n                      onMouseDown={(e) => {\r\n                        e.preventDefault()\r\n                      }}\r\n                      disabled={!searchText}\r\n                      edge=\"end\"\r\n                    >\r\n                      {searchText ? <SearchIcon /> : <NotInterestedIcon />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                </Tooltip>\r\n              }\r\n              labelWidth={120}\r\n            />\r\n          </FormControl>\r\n          {searchText && (\r\n            <FormControl className={classes.searchColumns}>\r\n              {headCells.map((cell) => {\r\n                const { id, label } = cell\r\n                return (\r\n                  <FormControlLabel\r\n                    key={id}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={selectedIds.has(id)}\r\n                        onChange={({ target: { checked } }) => {\r\n                          checked\r\n                            ? selectedIds.add(id)\r\n                            : selectedIds.size > 1 && selectedIds.delete(id)\r\n                          setSearchState({\r\n                            searchText: searchText,\r\n                            searchIds: selectedIds,\r\n                          })\r\n                        }}\r\n                        inputProps={{ \"aria-label\": \"select all enteries\" }}\r\n                      />\r\n                    }\r\n                    label={label}\r\n                  />\r\n                )\r\n              })}\r\n            </FormControl>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            onClick={() => {\r\n              deleteHandler(selected)\r\n              setSelected([])\r\n            }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          {title}\r\n        </Typography>\r\n      )}\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  searchState: PropTypes.object.isRequired,\r\n  performSearch: PropTypes.func.isRequired,\r\n  setSearchState: PropTypes.func.isRequired,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    width: \"100vw\",\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  tableHead: {\r\n    background: \"#A2DDFF\",\r\n  },\r\n  headCell: {\r\n    fontWeight: \"bolder\",\r\n  },\r\n  tableNote: {\r\n    textAlign: \"center\",\r\n    fontSize: 16,\r\n    fontWeight: \"lighter\",\r\n    padding: \"15px 0px\",\r\n    fontStyle: \"italic\",\r\n  },\r\n}))\r\n\r\nexport default function EnhancedTable({\r\n  allRows,\r\n  rows,\r\n  headCells,\r\n  deleteHandler,\r\n  title,\r\n  setFilteredRows,\r\n}) {\r\n  const primaryCellKey =\r\n    (headCells &&\r\n      Array.isArray(headCells) &&\r\n      headCells.length > 0 &&\r\n      headCells[0].id) ||\r\n    \"\"\r\n  const classes = useStyles()\r\n  const [order, setOrder] = useState(\"asc\")\r\n  const [orderBy, setOrderBy] = useState(primaryCellKey)\r\n  const [selected, setSelected] = useState([])\r\n  const [page, setPage] = useState(0)\r\n  const [dense, setDense] = useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = useState(5)\r\n  const [searchState, setSearchState] = useState({\r\n    searchText: \"\",\r\n    searchIds: new Set([primaryCellKey]),\r\n  })\r\n\r\n  const handlePerformSearch = useCallback(() => {\r\n    const { searchText, searchIds } = searchState\r\n    const temp = allRows.filter((row) => {\r\n      let res = false\r\n      for (let id of searchIds) {\r\n        if (!res) {\r\n          res = row[id].includes(searchText)\r\n        }\r\n      }\r\n      return res\r\n    })\r\n    setFilteredRows(temp)\r\n    setPage(0)\r\n  }, [searchState, setFilteredRows, allRows])\r\n\r\n  useEffect(() => {\r\n    handlePerformSearch()\r\n  }, [handlePerformSearch])\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\"\r\n    setOrder(isAsc ? \"desc\" : \"asc\")\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n[primaryCellKey])\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1\r\n\r\n  const emptyRows = rows.length === 0\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar\r\n          title={title}\r\n          numSelected={selected.length}\r\n          selected={selected}\r\n          searchState={searchState}\r\n          headCells={headCells}\r\n          performSearch={() => {\r\n            handlePerformSearch()\r\n          }}\r\n          deleteHandler={deleteHandler}\r\n          setSelected={setSelected}\r\n          setSearchState={setSearchState}\r\n        />\r\n        {DynamicLoader(TableContainer, {\r\n          children: (\r\n            <>\r\n              <Table\r\n                className={classes.table}\r\n                aria-labelledby=\"tableTitle\"\r\n                size={dense ? \"small\" : \"medium\"}\r\n                aria-label=\"enhanced table\"\r\n              >\r\n                <EnhancedTableHead\r\n                  classes={classes}\r\n                  numSelected={selected.length}\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  onSelectAllClick={handleSelectAllClick}\r\n                  onRequestSort={handleRequestSort}\r\n                  rowCount={rows.length}\r\n                  headCells={headCells}\r\n                />\r\n                {DynamicLoader(TableBody, {\r\n                  children: stableSort(rows, getComparator(order, orderBy))\r\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                      const isItemSelected = isSelected(row[primaryCellKey])\r\n                      const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          onClick={(event) =>\r\n                            handleClick(event, row[primaryCellKey])\r\n                          }\r\n                          role=\"checkbox\"\r\n                          aria-checked={isItemSelected}\r\n                          tabIndex={-1}\r\n                          key={row[primaryCellKey]}\r\n                          selected={isItemSelected}\r\n                        >\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              checked={isItemSelected}\r\n                              inputProps={{ \"aria-labelledby\": labelId }}\r\n                            />\r\n                          </TableCell>\r\n                          {headCells.map((cell, index) => {\r\n                            return index === 0 ? (\r\n                              <TableCell\r\n                                key={cell.id}\r\n                                component=\"th\"\r\n                                id={labelId}\r\n                                scope=\"row\"\r\n                                padding=\"none\"\r\n                              >\r\n                                {row[cell.id]}\r\n                              </TableCell>\r\n                            ) : (\r\n                              <TableCell key={cell.id} align=\"left\">\r\n                                {row[cell.id]}\r\n                              </TableCell>\r\n                            )\r\n                          })}\r\n                        </TableRow>\r\n                      )\r\n                    }),\r\n                })}\r\n              </Table>\r\n              {emptyRows && (\r\n                <Typography className={classes.tableNote}>\r\n                  {searchState.searchText\r\n                    ? `No search results found :( `\r\n                    : `No data found. Please add some entries using + button`}\r\n                </Typography>\r\n              )}\r\n            </>\r\n          ),\r\n        })}\r\n        {DynamicLoader(TablePagination, {\r\n          rowsPerPageOptions: [5, 10, 25],\r\n          component: \"div\",\r\n          count: rows.length,\r\n          rowsPerPage: rowsPerPage,\r\n          page: page,\r\n          onChangePage: handleChangePage,\r\n          onChangeRowsPerPage: handleChangeRowsPerPage,\r\n        })}\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"],"names":["TableBody","lazy","TableContainer","TablePagination","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","EnhancedTableHead","props","classes","numSelected","onSelectAllClick","onRequestSort","rowCount","headCells","_jsx","TableHead","className","tableHead","children","_jsxs","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","headCell","align","numeric","disablePadding","sortDirection","id","TableSortLabel","active","direction","onClick","property","event","label","visuallyHidden","useToolbarStyles","makeStyles","theme","root","margin","spacing","paddingLeft","paddingRight","flexDirection","highlight","palette","type","color","secondary","main","backgroundColor","lighten","light","text","primary","dark","title","flex","searchField","width","searchColumns","EnhancedTableToolbar","_ref","setSelected","deleteHandler","selected","searchState","setSearchState","performSearch","searchText","selectedIds","searchIds","Set","Toolbar","clsx","Typography","variant","component","_Fragment","FormControl","InputLabel","htmlFor","OutlinedInput","autoComplete","value","_ref2","target","endAdornment","Tooltip","InputAdornment","position","IconButton","onMouseDown","e","preventDefault","disabled","edge","SearchIcon","NotInterestedIcon","labelWidth","cell","FormControlLabel","control","has","_ref3","add","size","delete","DeleteIcon","useStyles","paper","marginBottom","table","border","clip","height","overflow","top","background","fontWeight","tableNote","textAlign","fontSize","fontStyle","EnhancedTable","_ref4","allRows","rows","setFilteredRows","primaryCellKey","Array","isArray","length","setOrder","useState","setOrderBy","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","handlePerformSearch","useCallback","temp","filter","row","res","includes","useEffect","emptyRows","Paper","DynamicLoader","Table","newSelecteds","n","handleRequestSort","slice","isItemSelected","name","indexOf","labelId","concat","hover","handleClick","selectedIndex","newSelected","role","tabIndex","scope","rowsPerPageOptions","count","onChangePage","handleChangePage","newPage","onChangeRowsPerPage","parseInt","Switch"],"sourceRoot":""}