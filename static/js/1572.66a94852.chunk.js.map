{"version":3,"file":"static/js/1572.66a94852.chunk.js","mappings":"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","sources":["common/components/Table.jsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport {\n  AiOutlineDelete,\n  AiOutlineSearch,\n  AiOutlineClose,\n} from \"react-icons/ai\"\nimport { BsArrowDown, BsArrowUp } from \"react-icons/bs\"\nimport \"./Table.css\"\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index])\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) return order\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map((el) => el[0])\n}\n\nfunction EnhancedTableHead(props) {\n  const {\n    numSelected,\n    order,\n    orderBy,\n    onSelectAllClick,\n    onRequestSort,\n    rowCount,\n    headCells,\n  } = props\n\n  const createSortHandler = (property) => () => {\n    onRequestSort(property)\n  }\n\n  return (\n    <thead className=\"table-head\">\n      <tr>\n        <th className=\"table-checkbox\">\n          <input\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            aria-label=\"select all entries\"\n          />\n        </th>\n        {headCells.map((headCell) => (\n          <th\n            key={headCell.id}\n            className={headCell.numeric ? \"text-end\" : \"text-start\"}\n            onClick={createSortHandler(headCell.id)}\n            style={{ cursor: \"pointer\" }}\n          >\n            <div className=\"d-flex align-items-center\">\n              {headCell.label}\n              {orderBy === headCell.id && (\n                <span className=\"ms-2\">\n                  {order === \"desc\" ? <BsArrowDown /> : <BsArrowUp />}\n                </span>\n              )}\n            </div>\n          </th>\n        ))}\n      </tr>\n    </thead>\n  )\n}\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n  headCells: PropTypes.array.isRequired,\n}\n\nconst EnhancedTableToolbar = ({\n  numSelected,\n  title,\n  setSelected,\n  deleteHandler,\n  selected,\n  searchState,\n  setSearchState,\n  performSearch,\n  headCells,\n}) => {\n  const searchText = searchState?.searchText || \"\"\n  const selectedIds = searchState?.searchIds || new Set()\n\n  return (\n    <div className={`table-toolbar ${numSelected > 0 ? \"highlight\" : \"\"}`}>\n      {numSelected > 0 ? (\n        <div className=\"d-flex justify-content-between align-items-center w-100\">\n          <h6 className=\"mb-0\">{numSelected} selected</h6>\n          <button\n            className=\"btn btn-outline-danger\"\n            onClick={() => {\n              deleteHandler(selected)\n              setSelected([])\n            }}\n            title=\"Delete\"\n          >\n            <AiOutlineDelete />\n          </button>\n        </div>\n      ) : (\n        <>\n          <div className=\"search-field\">\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search In Table\"\n                value={searchText}\n                onChange={(e) => {\n                  setSearchState({\n                    searchText: e.target.value || \"\",\n                    searchIds: selectedIds,\n                  })\n                }}\n                autoComplete=\"off\"\n              />\n              <button\n                className=\"btn btn-outline-secondary\"\n                onClick={() => performSearch(searchState)}\n                disabled={!searchText}\n                title=\"Filter table\"\n              >\n                {searchText ? <AiOutlineSearch /> : <AiOutlineClose />}\n              </button>\n            </div>\n          </div>\n          {searchText && (\n            <div className=\"search-columns\">\n              {headCells.map((cell) => {\n                const { id, label } = cell\n                return (\n                  <div key={id} className=\"form-check form-check-inline\">\n                    <input\n                      className=\"form-check-input\"\n                      type=\"checkbox\"\n                      id={`checkbox-${id}`}\n                      checked={selectedIds.has(id)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          selectedIds.add(id)\n                        } else if (selectedIds.size > 1) {\n                          selectedIds.delete(id)\n                        }\n                        setSearchState({\n                          searchText: searchText,\n                          searchIds: selectedIds,\n                        })\n                      }}\n                    />\n                    <label\n                      className=\"form-check-label\"\n                      htmlFor={`checkbox-${id}`}\n                    >\n                      {label}\n                    </label>\n                  </div>\n                )\n              })}\n            </div>\n          )}\n          <h5 className=\"table-title\">{title}</h5>\n        </>\n      )}\n    </div>\n  )\n}\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  searchState: PropTypes.object.isRequired,\n  performSearch: PropTypes.func.isRequired,\n  setSearchState: PropTypes.func.isRequired,\n}\n\nexport default function EnhancedTable({\n  allRows,\n  rows,\n  headCells,\n  deleteHandler,\n  title,\n  setFilteredRows,\n}) {\n  const primaryCellKey =\n    (headCells &&\n      Array.isArray(headCells) &&\n      headCells.length > 0 &&\n      headCells[0].id) ||\n    \"\"\n  const [order, setOrder] = useState(\"asc\")\n  const [orderBy, setOrderBy] = useState(primaryCellKey)\n  const [selected, setSelected] = useState([])\n  const [page, setPage] = useState(0)\n  const [dense, setDense] = useState(false)\n  const [rowsPerPage, setRowsPerPage] = useState(5)\n  const [searchState, setSearchState] = useState({\n    searchText: \"\",\n    searchIds: new Set([primaryCellKey]),\n  })\n\n  const handlePerformSearch = useCallback(() => {\n    const { searchText, searchIds } = searchState\n    const temp = allRows.filter((row) => {\n      let res = false\n      for (let id of searchIds) {\n        if (!res) {\n          res = row[id].includes(searchText)\n        }\n      }\n      return res\n    })\n    setFilteredRows(temp)\n    setPage(0)\n  }, [searchState, setFilteredRows, allRows])\n\n  useEffect(() => {\n    handlePerformSearch()\n  }, [handlePerformSearch])\n\n  const handleRequestSort = (property) => {\n    const isAsc = orderBy === property && order === \"asc\"\n    setOrder(isAsc ? \"desc\" : \"asc\")\n    setOrderBy(property)\n  }\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelected = rows.map((n) => n[primaryCellKey])\n      setSelected(newSelected)\n      return\n    }\n    setSelected([])\n  }\n\n  const handleClick = (name) => {\n    const selectedIndex = selected.indexOf(name)\n    let newSelected = []\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name)\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1))\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1))\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      )\n    }\n    setSelected(newSelected)\n  }\n\n  const isSelected = (name) => selected.indexOf(name) !== -1\n\n  const emptyRows = rows.length === 0\n\n  const displayedRows = stableSort(rows, getComparator(order, orderBy)).slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage\n  )\n\n  return (\n    <div className=\"enhanced-table-root\">\n      <div className=\"card\">\n        <EnhancedTableToolbar\n          title={title}\n          numSelected={selected.length}\n          selected={selected}\n          searchState={searchState}\n          headCells={headCells}\n          performSearch={() => handlePerformSearch()}\n          deleteHandler={deleteHandler}\n          setSelected={setSelected}\n          setSearchState={setSearchState}\n        />\n        <div className=\"table-responsive\">\n          <table className=\"table table-hover\">\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n              headCells={headCells}\n            />\n            <tbody>\n              {displayedRows.map((row, index) => {\n                const isItemSelected = isSelected(row[primaryCellKey])\n                const labelId = `enhanced-table-checkbox-${index}`\n\n                return (\n                  <tr\n                    key={row[primaryCellKey]}\n                    onClick={() => handleClick(row[primaryCellKey])}\n                    className={isItemSelected ? \"table-active\" : \"\"}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    <td className=\"table-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        checked={isItemSelected}\n                        onChange={() => {}}\n                        aria-labelledby={labelId}\n                      />\n                    </td>\n                    {headCells.map((cell, idx) => (\n                      <td\n                        key={cell.id}\n                        className={idx === 0 ? \"fw-bold\" : \"\"}\n                        id={idx === 0 ? labelId : undefined}\n                      >\n                        {row[cell.id]}\n                      </td>\n                    ))}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n          {emptyRows && (\n            <div className=\"table-note\">\n              {searchState.searchText\n                ? `No search results found :( `\n                : `No data found. Please add some entries using + button`}\n            </div>\n          )}\n        </div>\n        <div className=\"table-pagination\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <div className=\"form-check form-switch\">\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"densePadding\"\n                checked={dense}\n                onChange={(e) => setDense(e.target.checked)}\n              />\n              <label className=\"form-check-label\" htmlFor=\"densePadding\">\n                Dense padding\n              </label>\n            </div>\n            <div className=\"d-flex align-items-center gap-3\">\n              <div>\n                <label htmlFor=\"rowsPerPage\" className=\"me-2\">\n                  Rows per page:\n                </label>\n                <select\n                  id=\"rowsPerPage\"\n                  className=\"form-select form-select-sm d-inline-block w-auto\"\n                  value={rowsPerPage}\n                  onChange={(e) => {\n                    setRowsPerPage(parseInt(e.target.value, 10))\n                    setPage(0)\n                  }}\n                >\n                  <option value={5}>5</option>\n                  <option value={10}>10</option>\n                  <option value={25}>25</option>\n                </select>\n              </div>\n              <div>\n                {page * rowsPerPage + 1}-\n                {Math.min((page + 1) * rowsPerPage, rows.length)} of{\" \"}\n                {rows.length}\n              </div>\n              <div className=\"btn-group\">\n                <button\n                  className=\"btn btn-sm btn-outline-secondary\"\n                  onClick={() => setPage(Math.max(0, page - 1))}\n                  disabled={page === 0}\n                >\n                  Previous\n                </button>\n                <button\n                  className=\"btn btn-sm btn-outline-secondary\"\n                  onClick={() =>\n                    setPage(\n                      Math.min(\n                        Math.ceil(rows.length / rowsPerPage) - 1,\n                        page + 1\n                      )\n                    )\n                  }\n                  disabled={page >= Math.ceil(rows.length / rowsPerPage) - 1}\n                >\n                  Next\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["descendingComparator","a","b","orderBy","EnhancedTableHead","props","numSelected","order","onSelectAllClick","onRequestSort","rowCount","headCells","_jsx","className","children","_jsxs","type","checked","onChange","map","headCell","numeric","onClick","property","id","style","cursor","label","BsArrowDown","BsArrowUp","EnhancedTableToolbar","_ref","title","setSelected","deleteHandler","selected","searchState","setSearchState","performSearch","searchText","selectedIds","searchIds","Set","AiOutlineDelete","_Fragment","placeholder","value","e","target","autoComplete","disabled","AiOutlineSearch","AiOutlineClose","cell","has","add","size","delete","htmlFor","EnhancedTable","_ref2","allRows","rows","setFilteredRows","primaryCellKey","Array","isArray","length","setOrder","useState","setOrderBy","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","handlePerformSearch","useCallback","temp","filter","row","res","includes","useEffect","emptyRows","displayedRows","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","event","newSelected","n","isItemSelected","name","indexOf","labelId","selectedIndex","concat","handleClick","idx","undefined","parseInt","Math","min","max","ceil"],"sourceRoot":""}