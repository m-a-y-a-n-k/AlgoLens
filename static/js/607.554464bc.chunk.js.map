{"version":3,"file":"static/js/607.554464bc.chunk.js","mappings":"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","sources":["webpack://AlgoLens/./src/routing/site/ds/components/RedBlackTree/RedBlackTree.module.css?20dc","routing/site/ds/components/RedBlackTree/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RedBlackTree_container__tx7kK\",\"title\":\"RedBlackTree_title__tXXQm\",\"description\":\"RedBlackTree_description__7AnMv\",\"controls\":\"RedBlackTree_controls__HQszw\",\"inputGroup\":\"RedBlackTree_inputGroup__YcZ2L\",\"input\":\"RedBlackTree_input__ogDK4\",\"btnPrimary\":\"RedBlackTree_btnPrimary__rDddR\",\"btnSecondary\":\"RedBlackTree_btnSecondary__MSnI0\",\"btnDanger\":\"RedBlackTree_btnDanger__z-tJm\",\"btnNav\":\"RedBlackTree_btnNav__sLArn\",\"animationControls\":\"RedBlackTree_animationControls__Bz4Uh\",\"stepCounter\":\"RedBlackTree_stepCounter__mzzfA\",\"stepMessage\":\"RedBlackTree_stepMessage__+rEHq\",\"slideDown\":\"RedBlackTree_slideDown__8yGsx\",\"legend\":\"RedBlackTree_legend__83SC2\",\"legendItem\":\"RedBlackTree_legendItem__Q8fdH\",\"legendBox\":\"RedBlackTree_legendBox__IBD+E\",\"legendRed\":\"RedBlackTree_legendRed__37Bib\",\"legendBlack\":\"RedBlackTree_legendBlack__Ult2D\",\"legendHighlight\":\"RedBlackTree_legendHighlight__qGUav\",\"pulse\":\"RedBlackTree_pulse__Wnm2z\",\"section\":\"RedBlackTree_section__3T0wi\",\"emptyMessage\":\"RedBlackTree_emptyMessage__CYOQV\",\"treeContainer\":\"RedBlackTree_treeContainer__ePp84\",\"treeSvg\":\"RedBlackTree_treeSvg__8eof4\",\"treeLine\":\"RedBlackTree_treeLine__RYNeM\",\"redNode\":\"RedBlackTree_redNode__gjlJh\",\"blackNode\":\"RedBlackTree_blackNode__oNPsd\",\"highlighted\":\"RedBlackTree_highlighted__tdPsV\",\"nodeHighlight\":\"RedBlackTree_nodeHighlight__xKIzZ\",\"nodeText\":\"RedBlackTree_nodeText__lrn9q\",\"propertiesGrid\":\"RedBlackTree_propertiesGrid__0wLAi\",\"propertyCard\":\"RedBlackTree_propertyCard__8UQ1C\",\"propertyNumber\":\"RedBlackTree_propertyNumber__rH8T-\",\"complexityGrid\":\"RedBlackTree_complexityGrid__0T2Fz\",\"complexityCard\":\"RedBlackTree_complexityCard__kprcr\",\"complexity\":\"RedBlackTree_complexity__4yQKD\",\"complexityNote\":\"RedBlackTree_complexityNote__6hhrg\",\"explanation\":\"RedBlackTree_explanation__ERgiX\",\"note\":\"RedBlackTree_note__bMzXd\"};","import React, { useState } from \"react\"\nimport styles from \"./RedBlackTree.module.css\"\n\nconst RED = \"red\"\nconst BLACK = \"black\"\n\nclass RBNode {\n  constructor(value, color = RED) {\n    this.value = value\n    this.color = color\n    this.left = null\n    this.right = null\n    this.parent = null\n  }\n}\n\nclass RedBlackTree {\n  constructor() {\n    this.root = null\n    this.animationSteps = []\n  }\n\n  rotateLeft(node) {\n    this.animationSteps.push({\n      type: \"rotate-left\",\n      node: node.value,\n      message: `Left rotation on node ${node.value}`,\n    })\n\n    const rightChild = node.right\n    node.right = rightChild.left\n\n    if (rightChild.left !== null) {\n      rightChild.left.parent = node\n    }\n\n    rightChild.parent = node.parent\n\n    if (node.parent === null) {\n      this.root = rightChild\n    } else if (node === node.parent.left) {\n      node.parent.left = rightChild\n    } else {\n      node.parent.right = rightChild\n    }\n\n    rightChild.left = node\n    node.parent = rightChild\n  }\n\n  rotateRight(node) {\n    this.animationSteps.push({\n      type: \"rotate-right\",\n      node: node.value,\n      message: `Right rotation on node ${node.value}`,\n    })\n\n    const leftChild = node.left\n    node.left = leftChild.right\n\n    if (leftChild.right !== null) {\n      leftChild.right.parent = node\n    }\n\n    leftChild.parent = node.parent\n\n    if (node.parent === null) {\n      this.root = leftChild\n    } else if (node === node.parent.right) {\n      node.parent.right = leftChild\n    } else {\n      node.parent.left = leftChild\n    }\n\n    leftChild.right = node\n    node.parent = leftChild\n  }\n\n  fixViolation(node) {\n    let parent = null\n    let grandParent = null\n\n    while (\n      node !== this.root &&\n      node.color === RED &&\n      node.parent.color === RED\n    ) {\n      parent = node.parent\n      grandParent = parent.parent\n\n      // Case A: Parent is left child of grandparent\n      if (parent === grandParent.left) {\n        const uncle = grandParent.right\n\n        // Case 1: Uncle is red - only recoloring needed\n        if (uncle !== null && uncle.color === RED) {\n          this.animationSteps.push({\n            type: \"recolor\",\n            nodes: [grandParent.value, parent.value, uncle.value],\n            message: `Recoloring: GP(${grandParent.value}) RED, P(${parent.value}) BLACK, U(${uncle.value}) BLACK`,\n          })\n\n          grandParent.color = RED\n          parent.color = BLACK\n          uncle.color = BLACK\n          node = grandParent\n        } else {\n          // Case 2: Node is right child - left rotation needed\n          if (node === parent.right) {\n            this.rotateLeft(parent)\n            node = parent\n            parent = node.parent\n          }\n\n          // Case 3: Node is left child - right rotation needed\n          this.animationSteps.push({\n            type: \"recolor\",\n            nodes: [parent.value, grandParent.value],\n            message: `Recoloring and rotating: P(${parent.value}) BLACK, GP(${grandParent.value}) RED`,\n          })\n\n          this.rotateRight(grandParent)\n          const tempColor = parent.color\n          parent.color = grandParent.color\n          grandParent.color = tempColor\n          node = parent\n        }\n      }\n      // Case B: Parent is right child of grandparent\n      else {\n        const uncle = grandParent.left\n\n        // Case 1: Uncle is red - only recoloring needed\n        if (uncle !== null && uncle.color === RED) {\n          this.animationSteps.push({\n            type: \"recolor\",\n            nodes: [grandParent.value, parent.value, uncle.value],\n            message: `Recoloring: GP(${grandParent.value}) RED, P(${parent.value}) BLACK, U(${uncle.value}) BLACK`,\n          })\n\n          grandParent.color = RED\n          parent.color = BLACK\n          uncle.color = BLACK\n          node = grandParent\n        } else {\n          // Case 2: Node is left child - right rotation needed\n          if (node === parent.left) {\n            this.rotateRight(parent)\n            node = parent\n            parent = node.parent\n          }\n\n          // Case 3: Node is right child - left rotation needed\n          this.animationSteps.push({\n            type: \"recolor\",\n            nodes: [parent.value, grandParent.value],\n            message: `Recoloring and rotating: P(${parent.value}) BLACK, GP(${grandParent.value}) RED`,\n          })\n\n          this.rotateLeft(grandParent)\n          const tempColor = parent.color\n          parent.color = grandParent.color\n          grandParent.color = tempColor\n          node = parent\n        }\n      }\n    }\n\n    this.root.color = BLACK\n  }\n\n  insert(value) {\n    this.animationSteps = []\n    const newNode = new RBNode(value)\n\n    this.animationSteps.push({\n      type: \"insert\",\n      node: value,\n      message: `Inserting ${value} as RED node`,\n    })\n\n    if (this.root === null) {\n      this.root = newNode\n      this.root.color = BLACK\n      this.animationSteps.push({\n        type: \"root\",\n        node: value,\n        message: `${value} is root, changing to BLACK`,\n      })\n      return this.animationSteps\n    }\n\n    let current = this.root\n    let parent = null\n\n    while (current !== null) {\n      parent = current\n      if (value < current.value) {\n        current = current.left\n      } else if (value > current.value) {\n        current = current.right\n      } else {\n        // Duplicate value\n        return []\n      }\n    }\n\n    newNode.parent = parent\n\n    if (value < parent.value) {\n      parent.left = newNode\n    } else {\n      parent.right = newNode\n    }\n\n    // Fix Red-Black Tree violations\n    if (newNode.parent.parent === null) {\n      return this.animationSteps\n    }\n\n    this.fixViolation(newNode)\n    return this.animationSteps\n  }\n\n  clone() {\n    const newTree = new RedBlackTree()\n    newTree.root = this.cloneNode(this.root, null)\n    return newTree\n  }\n\n  cloneNode(node, parent) {\n    if (node === null) return null\n\n    const newNode = new RBNode(node.value, node.color)\n    newNode.parent = parent\n    newNode.left = this.cloneNode(node.left, newNode)\n    newNode.right = this.cloneNode(node.right, newNode)\n    return newNode\n  }\n}\n\nconst RedBlackTreeVisualizer = () => {\n  const [tree, setTree] = useState(new RedBlackTree())\n  const [inputValue, setInputValue] = useState(\"\")\n  const [animationSteps, setAnimationSteps] = useState([])\n  const [currentStepIndex, setCurrentStepIndex] = useState(-1)\n  const [highlightedNodes, setHighlightedNodes] = useState([])\n\n  const handleInsert = () => {\n    if (!inputValue.trim()) return\n\n    const value = parseInt(inputValue, 10)\n    if (isNaN(value)) return\n\n    const steps = tree.insert(value)\n    setTree(tree.clone())\n    setAnimationSteps(steps)\n    setCurrentStepIndex(0)\n    setInputValue(\"\")\n\n    // Highlight first step\n    if (steps.length > 0) {\n      highlightStep(steps[0])\n    }\n  }\n\n  const highlightStep = (step) => {\n    if (step.type === \"recolor\" && step.nodes) {\n      setHighlightedNodes(step.nodes)\n    } else if (step.node !== undefined) {\n      setHighlightedNodes([step.node])\n    }\n  }\n\n  const nextStep = () => {\n    if (currentStepIndex < animationSteps.length - 1) {\n      const newIndex = currentStepIndex + 1\n      setCurrentStepIndex(newIndex)\n      highlightStep(animationSteps[newIndex])\n    }\n  }\n\n  const prevStep = () => {\n    if (currentStepIndex > 0) {\n      const newIndex = currentStepIndex - 1\n      setCurrentStepIndex(newIndex)\n      highlightStep(animationSteps[newIndex])\n    }\n  }\n\n  const clearHighlight = () => {\n    setHighlightedNodes([])\n  }\n\n  const handleClear = () => {\n    setTree(new RedBlackTree())\n    setAnimationSteps([])\n    setCurrentStepIndex(-1)\n    setHighlightedNodes([])\n  }\n\n  const handleSample = () => {\n    const sampleValues = [10, 20, 30, 15, 25, 5, 1]\n    const newTree = new RedBlackTree()\n    sampleValues.forEach((val) => newTree.insert(val))\n    setTree(newTree.clone())\n    setAnimationSteps([])\n    setCurrentStepIndex(-1)\n    setHighlightedNodes([])\n  }\n\n  const renderTree = (node, x, y, level, horizontalSpacing) => {\n    if (!node) return null\n\n    const nodeRadius = 28\n    const verticalSpacing = 80\n    const offset = horizontalSpacing / Math.pow(2, level + 1)\n\n    const elements = []\n    const isHighlighted = highlightedNodes.includes(node.value)\n\n    // Draw connections to children\n    if (node.left) {\n      const childX = x - offset\n      const childY = y + verticalSpacing\n      elements.push(\n        <line\n          key={`left-line-${node.value}`}\n          x1={x}\n          y1={y + nodeRadius}\n          x2={childX}\n          y2={childY - nodeRadius}\n          className={styles.treeLine}\n          strokeWidth=\"3\"\n        />\n      )\n      elements.push(\n        ...renderTree(node.left, childX, childY, level + 1, horizontalSpacing)\n      )\n    }\n\n    if (node.right) {\n      const childX = x + offset\n      const childY = y + verticalSpacing\n      elements.push(\n        <line\n          key={`right-line-${node.value}`}\n          x1={x}\n          y1={y + nodeRadius}\n          x2={childX}\n          y2={childY - nodeRadius}\n          className={styles.treeLine}\n          strokeWidth=\"3\"\n        />\n      )\n      elements.push(\n        ...renderTree(node.right, childX, childY, level + 1, horizontalSpacing)\n      )\n    }\n\n    // Draw node\n    const nodeClass = node.color === RED ? styles.redNode : styles.blackNode\n\n    elements.push(\n      <g key={`node-${node.value}`}>\n        <circle\n          cx={x}\n          cy={y}\n          r={nodeRadius}\n          className={`${nodeClass} ${isHighlighted ? styles.highlighted : \"\"}`}\n        />\n        <text x={x} y={y + 6} textAnchor=\"middle\" className={styles.nodeText}>\n          {node.value}\n        </text>\n      </g>\n    )\n\n    return elements\n  }\n\n  const getTreeDepth = (node) => {\n    if (!node) return 0\n    return 1 + Math.max(getTreeDepth(node.left), getTreeDepth(node.right))\n  }\n\n  const treeDepth = getTreeDepth(tree.root)\n  const svgHeight = Math.max(400, treeDepth * 90 + 50)\n\n  const currentStep =\n    currentStepIndex >= 0 && currentStepIndex < animationSteps.length\n      ? animationSteps[currentStepIndex]\n      : null\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Red-Black Tree Visualization 🔴⚫</h1>\n\n      {/* Description */}\n      <div className={styles.description}>\n        <p>\n          A Red-Black Tree is a self-balancing binary search tree where each\n          node has a color (red or black) and follows specific properties to\n          maintain O(log n) operations.\n        </p>\n      </div>\n\n      {/* Controls */}\n      <div className={styles.controls}>\n        <div className={styles.inputGroup}>\n          <input\n            type=\"number\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Enter value\"\n            className={styles.input}\n            onKeyPress={(e) => e.key === \"Enter\" && handleInsert()}\n          />\n          <button onClick={handleInsert} className={styles.btnPrimary}>\n            Insert\n          </button>\n        </div>\n        <button onClick={handleSample} className={styles.btnSecondary}>\n          Load Sample\n        </button>\n        <button onClick={handleClear} className={styles.btnDanger}>\n          Clear Tree\n        </button>\n      </div>\n\n      {/* Animation Controls */}\n      {animationSteps.length > 0 && (\n        <div className={styles.animationControls}>\n          <button\n            onClick={prevStep}\n            disabled={currentStepIndex <= 0}\n            className={styles.btnNav}\n          >\n            ← Previous\n          </button>\n          <span className={styles.stepCounter}>\n            Step {currentStepIndex + 1} of {animationSteps.length}\n          </span>\n          <button\n            onClick={nextStep}\n            disabled={currentStepIndex >= animationSteps.length - 1}\n            className={styles.btnNav}\n          >\n            Next →\n          </button>\n          <button onClick={clearHighlight} className={styles.btnNav}>\n            Clear Highlight\n          </button>\n        </div>\n      )}\n\n      {/* Current Step Message */}\n      {currentStep && (\n        <div className={styles.stepMessage}>\n          <strong>Step {currentStepIndex + 1}:</strong> {currentStep.message}\n        </div>\n      )}\n\n      {/* Legend */}\n      <div className={styles.legend}>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendRed}`} />\n          <span>Red Node</span>\n        </div>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendBlack}`} />\n          <span>Black Node</span>\n        </div>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendHighlight}`} />\n          <span>Highlighted</span>\n        </div>\n      </div>\n\n      {/* Tree Visualization */}\n      <div className={styles.section}>\n        <h3>Tree Structure</h3>\n        {!tree.root ? (\n          <p className={styles.emptyMessage}>Tree is empty. Add some nodes!</p>\n        ) : (\n          <div className={styles.treeContainer}>\n            <svg width=\"900\" height={svgHeight} className={styles.treeSvg}>\n              {renderTree(tree.root, 450, 40, 0, 450)}\n            </svg>\n          </div>\n        )}\n      </div>\n\n      {/* Red-Black Tree Properties */}\n      <div className={styles.section}>\n        <h3>Red-Black Tree Properties</h3>\n        <div className={styles.propertiesGrid}>\n          <div className={styles.propertyCard}>\n            <div className={styles.propertyNumber}>1</div>\n            <p>Every node is either RED or BLACK</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <div className={styles.propertyNumber}>2</div>\n            <p>The root is always BLACK</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <div className={styles.propertyNumber}>3</div>\n            <p>All NULL leaves are considered BLACK</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <div className={styles.propertyNumber}>4</div>\n            <p>\n              Red node cannot have red children (no two consecutive red nodes)\n            </p>\n          </div>\n          <div className={styles.propertyCard}>\n            <div className={styles.propertyNumber}>5</div>\n            <p>\n              Every path from root to NULL has the same number of black nodes\n              (Black Height)\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Operations & Complexity */}\n      <div className={styles.section}>\n        <h3>Operations & Time Complexity</h3>\n        <div className={styles.complexityGrid}>\n          <div className={styles.complexityCard}>\n            <h4>Search</h4>\n            <p className={styles.complexity}>O(log n)</p>\n            <p className={styles.complexityNote}>Same as BST</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Insert</h4>\n            <p className={styles.complexity}>O(log n)</p>\n            <p className={styles.complexityNote}>BST insert + rebalancing</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Delete</h4>\n            <p className={styles.complexity}>O(log n)</p>\n            <p className={styles.complexityNote}>BST delete + rebalancing</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Use Cases */}\n      <div className={styles.explanation}>\n        <h3>Real-World Applications:</h3>\n        <ul>\n          <li>\n            <strong>Java TreeMap & TreeSet:</strong> Standard library\n            implementations\n          </li>\n          <li>\n            <strong>C++ STL map & set:</strong> Often implemented as Red-Black\n            Trees\n          </li>\n          <li>\n            <strong>Linux Kernel:</strong> Used in process scheduling\n            (Completely Fair Scheduler)\n          </li>\n          <li>\n            <strong>Database Indexing:</strong> Alternative to B-trees for\n            in-memory indexes\n          </li>\n          <li>\n            <strong>Computational Geometry:</strong> Used in various geometric\n            algorithms\n          </li>\n        </ul>\n        <div className={styles.note}>\n          <strong>Note:</strong> Red-Black Trees guarantee O(log n) time for all\n          operations by maintaining balanced height through rotations and color\n          changes.\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RedBlackTreeVisualizer\n"],"names":["RED","BLACK","RBNode","constructor","value","color","arguments","length","undefined","this","left","right","parent","RedBlackTree","root","animationSteps","rotateLeft","node","push","type","message","concat","rightChild","rotateRight","leftChild","fixViolation","grandParent","uncle","nodes","tempColor","insert","newNode","current","clone","newTree","cloneNode","RedBlackTreeVisualizer","tree","setTree","useState","inputValue","setInputValue","setAnimationSteps","currentStepIndex","setCurrentStepIndex","highlightedNodes","setHighlightedNodes","handleInsert","trim","parseInt","isNaN","steps","highlightStep","step","renderTree","x","y","level","horizontalSpacing","offset","Math","pow","elements","isHighlighted","includes","childX","childY","_jsx","x1","y1","x2","y2","className","styles","strokeWidth","nodeClass","_jsxs","children","cx","cy","r","textAnchor","getTreeDepth","max","treeDepth","svgHeight","currentStep","onChange","e","target","placeholder","onKeyPress","key","onClick","handleSample","forEach","val","handleClear","prevStep","newIndex","disabled","nextStep","clearHighlight","width","height"],"sourceRoot":""}