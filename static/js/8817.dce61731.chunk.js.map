{"version":3,"file":"static/js/8817.dce61731.chunk.js","mappings":"8JAGA,MAEMA,EAAYC,EAAAA,GAAAA,GAAW;;;;;;;EASvBC,EAAWD,EAAAA,GAAAA,GAAW;;;;;;;;;EAWtBE,EAAQF,EAAAA,GAAAA,KAAa;;;;;;;;;;EAYrBG,EAAaH,EAAAA,GAAAA,GAAW;;;;;;;;;;;;;;EAgBxBI,EAASJ,EAAAA,GAAAA,GAAW;;;;;;;EASpBK,EAAOL,EAAAA,GAAAA,GAAW;;;;;;;;;;;;;EAiFxB,EAlEuBM,KACrB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAC5BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,MAC9BG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,IAEnCK,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BH,GACGI,GACCA,EAnF6B,GAmFhBV,EAA0C,KAC1D,GApFgC,IAuFnC,MAAO,IAAMW,cAAcH,EAAS,GACnC,CAACR,IAEJ,MAAMY,EAAkBT,EAASH,EAEjC,OACEa,EAAAA,EAAAA,MAACrB,EAAS,CAAAsB,SAAA,EACRC,EAAAA,EAAAA,KAACjB,EAAI,CAAAgB,UACHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBAEND,EAAAA,EAAAA,MAACnB,EAAQ,CAAAoB,SAAA,EACPD,EAAAA,EAAAA,MAAClB,EAAK,CAAAmB,SAAA,CAAC,0BAELC,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,MAAOjB,EACPkB,SAAWC,IACT,MAAMC,EAAeC,OAAOF,EAAEG,OAAOL,OACjCG,GAAgB,GAAKA,GAAgB,IACvCnB,EAASmB,EAAa,QAI9BP,EAAAA,EAAAA,MAAClB,EAAK,CAAAmB,SAAA,CAAC,6BAELC,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,MAAOd,EACPe,SAAWC,IACT,MAAMI,EAAgBF,OAAOF,EAAEG,OAAOL,OAClCM,GAAiB,GAAKA,GAAiB,KACzCnB,EAAUmB,EAAc,WAKlCR,EAAAA,EAAAA,KAACnB,EAAU,CAAAkB,UACTC,EAAAA,EAAAA,KAAClB,EAAM,CACL2B,MAAO,CACLC,UAAY,aAAYtB,EAASuB,KAAKC,IAAItB,SACxCF,EAASuB,KAAKE,IAAIvB,cAK1BQ,EAAAA,EAAAA,MAACf,EAAI,CAAAgB,SAAA,EACHD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,qBAAmBF,EAAgBiB,QAAQ,OAC9ChB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,2BAAyBT,GAAS,EAAIqB,KAAKI,KAAKD,QAAQ,WAEnD,C","sources":["routing/site/physics/components/CircularMotion/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nconst ROTATION_INTERVAL_MILLISECONDS = 16\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f0f0f0;\r\n  font-family: Arial, sans-serif;\r\n`\r\n\r\nconst Controls = styled.div`\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  @media (min-width: 768px) {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst Label = styled.label`\r\n  margin: 10px;\r\n  font-size: 1.1em;\r\n\r\n  input {\r\n    margin-left: 10px;\r\n    padding: 5px;\r\n    border-radius: 4px;\r\n    border: 1px solid #ccc;\r\n  }\r\n`\r\n\r\nconst Visualizer = styled.div`\r\n  width: 300px;\r\n  height: 300px;\r\n  border: 2px dashed #ccc;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  overflow: hidden;\r\n\r\n  @media (min-width: 768px) {\r\n    width: 400px;\r\n    height: 400px;\r\n  }\r\n`\r\n\r\nconst Circle = styled.div`\r\n  position: absolute;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: #3498db;\r\n  border-radius: 50%;\r\n  transition: transform 0.016s linear;\r\n`\r\n\r\nconst Info = styled.div`\r\n  margin-top: 20px;\r\n  text-align: center;\r\n\r\n  h4 {\r\n    padding: 8px;\r\n    font-size: 1.5em;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0;\r\n    font-size: 1.1em;\r\n  }\r\n`\r\n\r\nconst CircularMotion = () => {\r\n  const [speed, setSpeed] = useState(1) // radians per second\r\n  const [radius, setRadius] = useState(100) // pixels\r\n  const [angle, setAngle] = useState(0) // current angle in radians\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setAngle(\r\n        (prevAngle) =>\r\n          prevAngle + (speed * ROTATION_INTERVAL_MILLISECONDS) / 1000\r\n      )\r\n    }, ROTATION_INTERVAL_MILLISECONDS)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [speed])\r\n\r\n  const angularMomentum = radius * speed\r\n\r\n  return (\r\n    <Container>\r\n      <Info>\r\n        <h4>Circular Motion</h4>\r\n      </Info>\r\n      <Controls>\r\n        <Label>\r\n          Speed (0 to 16 rad/s):\r\n          <input\r\n            type=\"number\"\r\n            value={speed}\r\n            onChange={(e) => {\r\n              const updatedSpeed = Number(e.target.value)\r\n              if (updatedSpeed >= 0 && updatedSpeed <= 16)\r\n                setSpeed(updatedSpeed)\r\n            }}\r\n          />\r\n        </Label>\r\n        <Label>\r\n          Radius (0 to 120 pixels):\r\n          <input\r\n            type=\"number\"\r\n            value={radius}\r\n            onChange={(e) => {\r\n              const updatedRadius = Number(e.target.value)\r\n              if (updatedRadius >= 0 && updatedRadius <= 120)\r\n                setRadius(updatedRadius)\r\n            }}\r\n          />\r\n        </Label>\r\n      </Controls>\r\n      <Visualizer>\r\n        <Circle\r\n          style={{\r\n            transform: `translate(${radius * Math.cos(angle)}px, ${\r\n              radius * Math.sin(angle)\r\n            }px)`,\r\n          }}\r\n        />\r\n      </Visualizer>\r\n      <Info>\r\n        <p>Angular Momentum: {angularMomentum.toFixed(2)}</p>\r\n        <p>Number of Revolutions: {(angle / (2 * Math.PI)).toFixed(2)}</p>\r\n      </Info>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default CircularMotion\r\n"],"names":["Container","styled","Controls","Label","Visualizer","Circle","Info","CircularMotion","speed","setSpeed","useState","radius","setRadius","angle","setAngle","useEffect","interval","setInterval","prevAngle","clearInterval","angularMomentum","_jsxs","children","_jsx","type","value","onChange","e","updatedSpeed","Number","target","updatedRadius","style","transform","Math","cos","sin","toFixed","PI"],"sourceRoot":""}