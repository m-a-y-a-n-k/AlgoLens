"use strict";(self.webpackChunkAlgoLens=self.webpackChunkAlgoLens||[]).push([[607],{607:(e,s,l)=>{l.r(s),l.d(s,{default:()=>X});var t=l(2791);const a="RedBlackTree_container__tx7kK",n="RedBlackTree_title__tXXQm",r="RedBlackTree_description__7AnMv",c="RedBlackTree_controls__HQszw",i="RedBlackTree_inputGroup__YcZ2L",o="RedBlackTree_input__ogDK4",d="RedBlackTree_btnPrimary__rDddR",h="RedBlackTree_btnSecondary__MSnI0",p="RedBlackTree_btnDanger__z-tJm",u="RedBlackTree_btnNav__sLArn",m="RedBlackTree_animationControls__Bz4Uh",_="RedBlackTree_stepCounter__mzzfA",x="RedBlackTree_stepMessage__+rEHq",g="RedBlackTree_legend__83SC2",v="RedBlackTree_legendItem__Q8fdH",j="RedBlackTree_legendBox__IBD+E",N="RedBlackTree_legendRed__37Bib",k="RedBlackTree_legendBlack__Ult2D",B="RedBlackTree_legendHighlight__qGUav",R="RedBlackTree_section__3T0wi",f="RedBlackTree_emptyMessage__CYOQV",T="RedBlackTree_treeContainer__ePp84",y="RedBlackTree_treeSvg__8eof4",S="RedBlackTree_treeLine__RYNeM",C="RedBlackTree_redNode__gjlJh",b="RedBlackTree_blackNode__oNPsd",L="RedBlackTree_highlighted__tdPsV",A="RedBlackTree_nodeText__lrn9q",w="RedBlackTree_propertiesGrid__0wLAi",K="RedBlackTree_propertyCard__8UQ1C",P="RedBlackTree_propertyNumber__rH8T-",D="RedBlackTree_complexityGrid__0T2Fz",E="RedBlackTree_complexityCard__kprcr",M="RedBlackTree_complexity__4yQKD",U="RedBlackTree_complexityNote__6hhrg",G="RedBlackTree_explanation__ERgiX",z="RedBlackTree_note__bMzXd";var H=l(184);const I="red",O="black";class Q{constructor(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:I;this.value=e,this.color=s,this.left=null,this.right=null,this.parent=null}}class V{constructor(){this.root=null,this.animationSteps=[]}rotateLeft(e){this.animationSteps.push({type:"rotate-left",node:e.value,message:"Left rotation on node ".concat(e.value)});const s=e.right;e.right=s.left,null!==s.left&&(s.left.parent=e),s.parent=e.parent,null===e.parent?this.root=s:e===e.parent.left?e.parent.left=s:e.parent.right=s,s.left=e,e.parent=s}rotateRight(e){this.animationSteps.push({type:"rotate-right",node:e.value,message:"Right rotation on node ".concat(e.value)});const s=e.left;e.left=s.right,null!==s.right&&(s.right.parent=e),s.parent=e.parent,null===e.parent?this.root=s:e===e.parent.right?e.parent.right=s:e.parent.left=s,s.right=e,e.parent=s}fixViolation(e){let s=null,l=null;for(;e!==this.root&&e.color===I&&e.parent.color===I;)if(s=e.parent,l=s.parent,s===l.left){const t=l.right;if(null!==t&&t.color===I)this.animationSteps.push({type:"recolor",nodes:[l.value,s.value,t.value],message:"Recoloring: GP(".concat(l.value,") RED, P(").concat(s.value,") BLACK, U(").concat(t.value,") BLACK")}),l.color=I,s.color=O,t.color=O,e=l;else{e===s.right&&(this.rotateLeft(s),s=(e=s).parent),this.animationSteps.push({type:"recolor",nodes:[s.value,l.value],message:"Recoloring and rotating: P(".concat(s.value,") BLACK, GP(").concat(l.value,") RED")}),this.rotateRight(l);const t=s.color;s.color=l.color,l.color=t,e=s}}else{const t=l.left;if(null!==t&&t.color===I)this.animationSteps.push({type:"recolor",nodes:[l.value,s.value,t.value],message:"Recoloring: GP(".concat(l.value,") RED, P(").concat(s.value,") BLACK, U(").concat(t.value,") BLACK")}),l.color=I,s.color=O,t.color=O,e=l;else{e===s.left&&(this.rotateRight(s),s=(e=s).parent),this.animationSteps.push({type:"recolor",nodes:[s.value,l.value],message:"Recoloring and rotating: P(".concat(s.value,") BLACK, GP(").concat(l.value,") RED")}),this.rotateLeft(l);const t=s.color;s.color=l.color,l.color=t,e=s}}this.root.color=O}insert(e){this.animationSteps=[];const s=new Q(e);if(this.animationSteps.push({type:"insert",node:e,message:"Inserting ".concat(e," as RED node")}),null===this.root)return this.root=s,this.root.color=O,this.animationSteps.push({type:"root",node:e,message:"".concat(e," is root, changing to BLACK")}),this.animationSteps;let l=this.root,t=null;for(;null!==l;)if(t=l,e<l.value)l=l.left;else{if(!(e>l.value))return[];l=l.right}return s.parent=t,e<t.value?t.left=s:t.right=s,null===s.parent.parent||this.fixViolation(s),this.animationSteps}clone(){const e=new V;return e.root=this.cloneNode(this.root,null),e}cloneNode(e,s){if(null===e)return null;const l=new Q(e.value,e.color);return l.parent=s,l.left=this.cloneNode(e.left,l),l.right=this.cloneNode(e.right,l),l}}const X=()=>{const[e,s]=(0,t.useState)(new V),[l,O]=(0,t.useState)(""),[Q,X]=(0,t.useState)([]),[q,J]=(0,t.useState)(-1),[W,Y]=(0,t.useState)([]),F=()=>{if(!l.trim())return;const t=parseInt(l,10);if(isNaN(t))return;const a=e.insert(t);s(e.clone()),X(a),J(0),O(""),a.length>0&&Z(a[0])},Z=e=>{"recolor"===e.type&&e.nodes?Y(e.nodes):void 0!==e.node&&Y([e.node])},$=(e,s,l,t,a)=>{if(!e)return null;const n=a/Math.pow(2,t+1),r=[],c=W.includes(e.value);if(e.left){const c=s-n,i=l+80;r.push((0,H.jsx)("line",{x1:s,y1:l+28,x2:c,y2:i-28,className:S,strokeWidth:"3"},"left-line-".concat(e.value))),r.push(...$(e.left,c,i,t+1,a))}if(e.right){const c=s+n,i=l+80;r.push((0,H.jsx)("line",{x1:s,y1:l+28,x2:c,y2:i-28,className:S,strokeWidth:"3"},"right-line-".concat(e.value))),r.push(...$(e.right,c,i,t+1,a))}const i=e.color===I?C:b;return r.push((0,H.jsxs)("g",{children:[(0,H.jsx)("circle",{cx:s,cy:l,r:28,className:"".concat(i," ").concat(c?L:"")}),(0,H.jsx)("text",{x:s,y:l+6,textAnchor:"middle",className:A,children:e.value})]},"node-".concat(e.value))),r},ee=e=>e?1+Math.max(ee(e.left),ee(e.right)):0,se=ee(e.root),le=Math.max(400,90*se+50),te=q>=0&&q<Q.length?Q[q]:null;return(0,H.jsxs)("div",{className:a,children:[(0,H.jsx)("h1",{className:n,children:"Red-Black Tree Visualization \ud83d\udd34\u26ab"}),(0,H.jsx)("div",{className:r,children:(0,H.jsx)("p",{children:"A Red-Black Tree is a self-balancing binary search tree where each node has a color (red or black) and follows specific properties to maintain O(log n) operations."})}),(0,H.jsxs)("div",{className:c,children:[(0,H.jsxs)("div",{className:i,children:[(0,H.jsx)("input",{type:"number",value:l,onChange:e=>O(e.target.value),placeholder:"Enter value",className:o,onKeyPress:e=>"Enter"===e.key&&F()}),(0,H.jsx)("button",{onClick:F,className:d,children:"Insert"})]}),(0,H.jsx)("button",{onClick:()=>{const e=new V;[10,20,30,15,25,5,1].forEach((s=>e.insert(s))),s(e.clone()),X([]),J(-1),Y([])},className:h,children:"Load Sample"}),(0,H.jsx)("button",{onClick:()=>{s(new V),X([]),J(-1),Y([])},className:p,children:"Clear Tree"})]}),Q.length>0&&(0,H.jsxs)("div",{className:m,children:[(0,H.jsx)("button",{onClick:()=>{if(q>0){const e=q-1;J(e),Z(Q[e])}},disabled:q<=0,className:u,children:"\u2190 Previous"}),(0,H.jsxs)("span",{className:_,children:["Step ",q+1," of ",Q.length]}),(0,H.jsx)("button",{onClick:()=>{if(q<Q.length-1){const e=q+1;J(e),Z(Q[e])}},disabled:q>=Q.length-1,className:u,children:"Next \u2192"}),(0,H.jsx)("button",{onClick:()=>{Y([])},className:u,children:"Clear Highlight"})]}),te&&(0,H.jsxs)("div",{className:x,children:[(0,H.jsxs)("strong",{children:["Step ",q+1,":"]})," ",te.message]}),(0,H.jsxs)("div",{className:g,children:[(0,H.jsxs)("div",{className:v,children:[(0,H.jsx)("div",{className:"".concat(j," ").concat(N)}),(0,H.jsx)("span",{children:"Red Node"})]}),(0,H.jsxs)("div",{className:v,children:[(0,H.jsx)("div",{className:"".concat(j," ").concat(k)}),(0,H.jsx)("span",{children:"Black Node"})]}),(0,H.jsxs)("div",{className:v,children:[(0,H.jsx)("div",{className:"".concat(j," ").concat(B)}),(0,H.jsx)("span",{children:"Highlighted"})]})]}),(0,H.jsxs)("div",{className:R,children:[(0,H.jsx)("h3",{children:"Tree Structure"}),e.root?(0,H.jsx)("div",{className:T,children:(0,H.jsx)("svg",{width:"900",height:le,className:y,children:$(e.root,450,40,0,450)})}):(0,H.jsx)("p",{className:f,children:"Tree is empty. Add some nodes!"})]}),(0,H.jsxs)("div",{className:R,children:[(0,H.jsx)("h3",{children:"Red-Black Tree Properties"}),(0,H.jsxs)("div",{className:w,children:[(0,H.jsxs)("div",{className:K,children:[(0,H.jsx)("div",{className:P,children:"1"}),(0,H.jsx)("p",{children:"Every node is either RED or BLACK"})]}),(0,H.jsxs)("div",{className:K,children:[(0,H.jsx)("div",{className:P,children:"2"}),(0,H.jsx)("p",{children:"The root is always BLACK"})]}),(0,H.jsxs)("div",{className:K,children:[(0,H.jsx)("div",{className:P,children:"3"}),(0,H.jsx)("p",{children:"All NULL leaves are considered BLACK"})]}),(0,H.jsxs)("div",{className:K,children:[(0,H.jsx)("div",{className:P,children:"4"}),(0,H.jsx)("p",{children:"Red node cannot have red children (no two consecutive red nodes)"})]}),(0,H.jsxs)("div",{className:K,children:[(0,H.jsx)("div",{className:P,children:"5"}),(0,H.jsx)("p",{children:"Every path from root to NULL has the same number of black nodes (Black Height)"})]})]})]}),(0,H.jsxs)("div",{className:R,children:[(0,H.jsx)("h3",{children:"Operations & Time Complexity"}),(0,H.jsxs)("div",{className:D,children:[(0,H.jsxs)("div",{className:E,children:[(0,H.jsx)("h4",{children:"Search"}),(0,H.jsx)("p",{className:M,children:"O(log n)"}),(0,H.jsx)("p",{className:U,children:"Same as BST"})]}),(0,H.jsxs)("div",{className:E,children:[(0,H.jsx)("h4",{children:"Insert"}),(0,H.jsx)("p",{className:M,children:"O(log n)"}),(0,H.jsx)("p",{className:U,children:"BST insert + rebalancing"})]}),(0,H.jsxs)("div",{className:E,children:[(0,H.jsx)("h4",{children:"Delete"}),(0,H.jsx)("p",{className:M,children:"O(log n)"}),(0,H.jsx)("p",{className:U,children:"BST delete + rebalancing"})]})]})]}),(0,H.jsxs)("div",{className:G,children:[(0,H.jsx)("h3",{children:"Real-World Applications:"}),(0,H.jsxs)("ul",{children:[(0,H.jsxs)("li",{children:[(0,H.jsx)("strong",{children:"Java TreeMap & TreeSet:"})," Standard library implementations"]}),(0,H.jsxs)("li",{children:[(0,H.jsx)("strong",{children:"C++ STL map & set:"})," Often implemented as Red-Black Trees"]}),(0,H.jsxs)("li",{children:[(0,H.jsx)("strong",{children:"Linux Kernel:"})," Used in process scheduling (Completely Fair Scheduler)"]}),(0,H.jsxs)("li",{children:[(0,H.jsx)("strong",{children:"Database Indexing:"})," Alternative to B-trees for in-memory indexes"]}),(0,H.jsxs)("li",{children:[(0,H.jsx)("strong",{children:"Computational Geometry:"})," Used in various geometric algorithms"]})]}),(0,H.jsxs)("div",{className:z,children:[(0,H.jsx)("strong",{children:"Note:"})," Red-Black Trees guarantee O(log n) time for all operations by maintaining balanced height through rotations and color changes."]})]})]})}}}]);
//# sourceMappingURL=607.554464bc.chunk.js.map