{"version":3,"file":"static/js/4770.5ac86dad.chunk.js","mappings":"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","sources":["routing/site/algo/components/Factorial/Input.jsx","routing/site/algo/components/Factorial/index.jsx","../node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js","../node_modules/@material-ui/core/esm/TextField/TextField.js"],"sourcesContent":["import React, { useState } from \"react\"\r\nimport { makeStyles, fade } from \"@material-ui/core/styles\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardActions from \"@material-ui/core/CardActions\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { FormControl } from \"@material-ui/core\"\r\n\r\n//Card component styling\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 180,\r\n  },\r\n})\r\n\r\n//text input field styling\r\nconst useStylesReddit = makeStyles((theme) => ({\r\n  root: {\r\n    border: \"1px solid #e2e2e1\",\r\n    overflow: \"hidden\",\r\n    borderRadius: 4,\r\n    backgroundColor: \"#fcfcfb\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    \"&:hover\": {\r\n      backgroundColor: \"#fff\",\r\n    },\r\n    \"&$focused\": {\r\n      backgroundColor: \"#fff\",\r\n      boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}))\r\nfunction RedditTextField(props) {\r\n  const classes = useStylesReddit()\r\n\r\n  return (\r\n    <TextField InputProps={{ classes, disableUnderline: true }} {...props} />\r\n  )\r\n}\r\n\r\nconst styleforform = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst stylefortext = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst styleforbutton = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst Input = React.memo(({ disabled, fact, setResult }) => {\r\n  const [input, setInput] = useState(null)\r\n  const classes = useStyles()\r\n  const inputstyle = stylefortext()\r\n  const buttonstyle = styleforbutton()\r\n  const formstyle = styleforform()\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <h2 className=\"bg-success text-white p-2\">\r\n        Compute Factorial of a whole number N --&gt; N!\r\n      </h2>\r\n      <h4 className=\"text-primary p-2\">\r\n        Finds the product 1 x 2 x 3 x .... upto a number N\r\n      </h4>\r\n      <CardActions>\r\n        <FormControl className={`pb-3 pr-0 pl-2 pt-1 ${formstyle.root}`}>\r\n          <RedditTextField\r\n            label=\"Number\"\r\n            className={inputstyle.root}\r\n            variant=\"filled\"\r\n            id=\"reddit-input-base\"\r\n            onChange={(event) => {\r\n              setInput(event.target.value)\r\n            }}\r\n            value={input ? input : \"\"}\r\n            disabled={disabled}\r\n          />\r\n          <Button\r\n            className={buttonstyle.root}\r\n            disabled={disabled}\r\n            onClick={() => {\r\n              fact(parseInt(input))\r\n              setInput(null)\r\n              setResult(null)\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </FormControl>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n})\r\n\r\nInput.displayName = \"Factorial.Input\"\r\n\r\nexport default Input\r\n","import React, { useState, lazy, useEffect } from \"react\"\r\nimport { FaEquals, FaTimes } from \"react-icons/fa\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { Alert } from \"reactstrap\"\r\nimport Input from \"routing/site/algo/components/Factorial/Input\"\r\n\r\nconst Element = lazy(() => import(\"common/components/Element\"))\r\n\r\nconst Factorial = () => {\r\n  const [input, setInput] = useState(null)\r\n  const [result, setResult] = useState(null)\r\n  const [processed, setProcessed] = useState(null)\r\n  const [rest, setRest] = useState(null)\r\n  const [disabled, setDisabled] = useState(false)\r\n  const [alert, setAlert] = useState(null)\r\n\r\n  const computeFactorial = (currentValue) => {\r\n    if (currentValue <= 0) {\r\n      setTimeout(() => {\r\n        setDisabled(false)\r\n        setAlert({\r\n          text: \"Factorial successfully computed\",\r\n          type: \"success\",\r\n        })\r\n        setInput(null)\r\n        setProcessed(null)\r\n        setRest(null)\r\n      }, 500)\r\n      return\r\n    }\r\n    setTimeout(() => {\r\n      setProcessed((prevProcessed) => `${prevProcessed} X ${currentValue}`)\r\n      setProcessed((prevProcessed) => {\r\n        const processedNumbers = prevProcessed.split(\" X \").map(Number)\r\n        if (processedNumbers.length === 2) {\r\n          const [a, b] = processedNumbers\r\n          return (a * b).toString()\r\n        }\r\n        return prevProcessed\r\n      })\r\n      setRest(currentValue - 1)\r\n      computeFactorial(currentValue - 1)\r\n    }, 500)\r\n  }\r\n\r\n  const fact = (input) => {\r\n    if (input >= 0 && input <= 1) {\r\n      setAlert({\r\n        text: \"Factorial is 1\",\r\n        type: \"success\",\r\n      })\r\n    } else if (input >= 2 && input <= 50) {\r\n      setInput(input)\r\n      setDisabled(true)\r\n      setProcessed(input > 1 ? `${input}` : `1`)\r\n      setRest(input >= 2 ? input - 1 : 1)\r\n      setAlert(null)\r\n      computeFactorial(input - 1)\r\n    } else {\r\n      setAlert({\r\n        text: \"Factorial does not exist or too large\",\r\n        type: \"danger\",\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const updateResult = () => {\r\n      if (processed) {\r\n        const processedNumbers = processed.split(\" X \").map(Number)\r\n        if (processedNumbers.length <= 2) {\r\n          const [a = 1, b = 1] = processedNumbers\r\n          if (b === 1) setResult((a * b).toString())\r\n        }\r\n      }\r\n    }\r\n    updateResult()\r\n  }, [processed])\r\n\r\n  return (\r\n    <Grid container>\r\n      {alert && (\r\n        <Grid item xs={12}>\r\n          <Alert\r\n            color={alert.type}\r\n            isOpen={!!alert.text}\r\n            toggle={() => setAlert(null)}\r\n          >\r\n            {alert.text}\r\n          </Alert>\r\n        </Grid>\r\n      )}\r\n      <Grid container className=\"text-center\">\r\n        <Grid item xs={12}>\r\n          <Input fact={fact} setResult={setResult} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {parseInt(input) >= 0 && (\r\n        <Grid container className=\"text-center mt-4 mb-4\">\r\n          <Grid item xs={2}>\r\n            <Element\r\n              highlight={true}\r\n              data={{ value: `${input}!` }}\r\n              type=\"array\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <FaEquals style={{ margin: \"auto 5px\" }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Element data={{ value: processed }} type=\"array\" />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <FaTimes style={{ margin: \"auto 5px\" }} />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Element data={{ value: `${rest}!` }} type=\"array\" />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {parseInt(result) >= 0 && (\r\n        <Grid container className=\"text-center mt-4 mb-4\">\r\n          <Grid item xs={12}>\r\n            <Element\r\n              highlight={true}\r\n              data={{ value: `${result}` }}\r\n              type=\"array\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Factorial\r\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 3,\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      marginLeft: 14,\n      marginRight: 14\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), children === ' ' ?\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : children);\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = /*#__PURE__*/React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    if (label) {\n      var _InputLabelProps$requ;\n\n      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;\n      InputMore.label = /*#__PURE__*/React.createElement(React.Fragment, null, label, displayRequired && \"\\xA0*\");\n    }\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = /*#__PURE__*/React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && /*#__PURE__*/React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? /*#__PURE__*/React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);"],"names":["useStyles","makeStyles","root","minWidth","useStylesReddit","theme","border","overflow","borderRadius","backgroundColor","transition","transitions","create","boxShadow","fade","palette","primary","main","borderColor","focused","RedditTextField","props","classes","_jsx","TextField","InputProps","disableUnderline","styleforform","width","margin","spacing","stylefortext","styleforbutton","Input","React","_ref","disabled","fact","setResult","input","setInput","useState","inputstyle","buttonstyle","formstyle","_jsxs","Card","className","variant","children","CardActions","FormControl","label","id","onChange","event","target","value","Button","onClick","parseInt","color","size","displayName","Element","lazy","Factorial","result","processed","setProcessed","rest","setRest","setDisabled","alert","setAlert","computeFactorial","currentValue","setTimeout","text","type","prevProcessed","processedNumbers","split","map","Number","length","a","b","toString","useEffect","updateResult","Grid","container","item","xs","Alert","isOpen","toggle","highlight","data","FaEquals","style","FaTimes","FormHelperText","ref","_props$component","component","Component","other","error","filled","required","_objectWithoutProperties","muiFormControl","useFormControl","fcs","formControlState","states","_extends","clsx","contained","marginDense","dangerouslySetInnerHTML","__html","withStyles","secondary","typography","caption","textAlign","marginTop","marginLeft","marginRight","name","variantComponent","standard","FilledInput","outlined","OutlinedInput","autoComplete","_props$autoFocus","autoFocus","_props$color","defaultValue","_props$disabled","_props$error","FormHelperTextProps","_props$fullWidth","fullWidth","helperText","hiddenLabel","InputLabelProps","inputProps","inputRef","_props$multiline","multiline","onBlur","onFocus","placeholder","_props$required","rows","rowsMax","_props$select","select","SelectProps","_props$variant","InputMore","shrink","notched","_InputLabelProps$requ","displayRequired","native","undefined","helperTextId","concat","inputLabelId","InputComponent","InputElement","InputLabel","htmlFor","Select","labelId"],"sourceRoot":""}