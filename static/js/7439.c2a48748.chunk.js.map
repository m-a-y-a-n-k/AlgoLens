{"version":3,"file":"static/js/7439.c2a48748.chunk.js","mappings":"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","sources":["common/helpers/dimensions.js","common/hooks/usePoint.jsx","routing/site/algo/components/ClosestPair/Canvas.jsx","routing/site/algo/components/ClosestPair/Run.jsx","routing/site/algo/components/ClosestPair/index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window\n  return {\n    width,\n    height,\n  }\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(() =>\n    getWindowDimensions()\n  )\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, [])\n\n  return windowDimensions\n}\n","import { useCallback } from \"react\"\n\nconst usePoint = (canvas) => {\n  const size = 3\n\n  const drawCoordinates = useCallback(\n    (x, y) => {\n      if (!canvas) return\n\n      const ctx = canvas.getContext(\"2d\")\n      ctx.fillStyle = \"#ff2626\" // Red color\n      ctx.beginPath() // Start path\n      ctx.arc(x, y, size, 0, Math.PI * 2, true)\n      ctx.fill()\n      ctx.font = \"15px Arial\"\n      ctx.fillText(`( ${x} , ${y} )`, x + 2 * size, y + 2 * size)\n    },\n    [canvas, size]\n  )\n\n  const draw = useCallback(\n    (event) => {\n      if (!canvas) return\n\n      const rect = canvas.getBoundingClientRect()\n      const x = event.clientX - rect.left\n      const y = event.clientY - rect.top\n      drawCoordinates(x, y)\n    },\n    [canvas, drawCoordinates]\n  )\n\n  return { draw }\n}\n\nexport default usePoint\n","import React, { useRef, useEffect } from \"react\"\nimport usePoint from \"common/hooks/usePoint\"\n\nconst Canvas = ({ id, width, height, clickable, addPoints }) => {\n  const canvasRef = useRef(null)\n\n  const { draw } = usePoint(canvasRef.current)\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const handleClick = (event) => {\n      if (clickable) {\n        draw(event)\n        const rect = canvas.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const y = event.clientY - rect.top\n        addPoints({ x, y })\n      }\n    }\n\n    canvas.addEventListener(\"click\", handleClick)\n    return () => {\n      canvas.removeEventListener(\"click\", handleClick)\n    }\n  }, [clickable, draw, addPoints])\n\n  return (\n    <canvas\n      id={id}\n      ref={canvasRef}\n      width={width}\n      height={height}\n      style={{\n        border: \"1px solid lightgray\",\n        background: \"rgba(123,178,91,0.3)\",\n      }}\n    ></canvas>\n  )\n}\n\nexport default Canvas\n","import React, { useEffect, useRef, useState } from \"react\"\nimport \"./Run.css\"\n\nconst Run = (props) => {\n  const inputLabel = useRef([])\n  const [speed, setSpeed] = useState(\"Slow\")\n  const [, setLabelWidth] = useState(0)\n\n  useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth)\n  }, [])\n\n  const selectSpeed = (event) => {\n    setSpeed(event.target.value)\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">Closest Pair of Points</h5>\n        <p className=\"card-subheader\">Pair connected by red dash lines</p>\n      </div>\n      <div className=\"card-actions\">\n        <div className=\"form-control\">\n          <label htmlFor=\"speed-select\" ref={inputLabel}>\n            Speed\n          </label>\n          <select\n            id=\"speed-select\"\n            value={speed}\n            onChange={selectSpeed}\n            className=\"select\"\n          >\n            <option value=\"Slow\">Slow</option>\n            <option value=\"Fast\">Fast</option>\n          </select>\n        </div>\n        <button\n          className=\"run-button\"\n          onClick={() => {\n            props.find(speed)\n          }}\n        >\n          Run\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Run\n","import React, { useState, useEffect, useRef, useCallback } from \"react\"\n\nimport Canvas from \"routing/site/algo/components/ClosestPair/Canvas\"\nimport Run from \"routing/site/algo/components/ClosestPair/Run\"\nimport { Alert } from \"reactstrap\"\nimport useWindowDimensions from \"common/helpers/dimensions\"\n\nconst ClosestPair = () => {\n  const [points, setPoints] = useState([])\n  const [clickable, setClickable] = useState(true)\n  const [alert, setAlert] = useState(null)\n  const canvasRef = useRef(null)\n  const { width: innerWidth } = useWindowDimensions()\n\n  const clearCanvas = useCallback(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n    const ctx = canvas.getContext(\"2d\")\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n  }, [])\n\n  const drawPoints = useCallback(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n    const ctx = canvas.getContext(\"2d\")\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    ctx.fillStyle = \"#ff2626\" // Red color\n    points.forEach((p) => {\n      ctx.beginPath()\n      ctx.arc(p.x, p.y, 3, 0, Math.PI * 2, true)\n      ctx.fill()\n      ctx.font = \"15px Arial\"\n      ctx.fillText(`( ${p.x} , ${p.y} )`, p.x + 6, p.y + 6)\n    })\n  }, [points])\n\n  const drawLine = useCallback((p, q, stroke) => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n    const ctx = canvas.getContext(\"2d\")\n    ctx.strokeStyle = stroke\n    ctx.setLineDash([2, 2])\n    ctx.beginPath()\n    ctx.moveTo(p.x, p.y)\n    ctx.lineTo(q.x, q.y)\n    ctx.stroke()\n  }, [])\n\n  const drawVerticalLine = useCallback((x, color = \"#0000ff\") => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n    const ctx = canvas.getContext(\"2d\")\n    ctx.strokeStyle = color\n    ctx.setLineDash([5, 5])\n    ctx.lineWidth = 2\n    ctx.beginPath()\n    ctx.moveTo(x, 0)\n    ctx.lineTo(x, canvas.height)\n    ctx.stroke()\n    ctx.lineWidth = 1\n    ctx.setLineDash([2, 2])\n  }, [])\n\n  const plot = useCallback(\n    (i, j, shortest = null) => {\n      if (i >= points.length - 1) {\n        clearCanvas()\n        drawPoints()\n        if (shortest) {\n          drawLine(shortest.start, shortest.end, \"#ff2626\")\n        }\n        setClickable(true)\n        return\n      }\n      if (j >= points.length) {\n        setTimeout(() => plot(i + 1, i + 2, shortest), 2000)\n        return\n      }\n      clearCanvas()\n      drawPoints()\n      drawLine(points[i], points[j], \"#000000\")\n\n      const length =\n        (points[j].x - points[i].x) ** 2 + (points[j].y - points[i].y) ** 2\n      if (!shortest || length < shortest.length) {\n        shortest = {\n          start: { x: points[i].x, y: points[i].y },\n          end: { x: points[j].x, y: points[j].y },\n          length: length,\n        }\n      }\n\n      if (shortest) {\n        drawLine(shortest.start, shortest.end, \"#ff2626\")\n      }\n\n      setTimeout(() => plot(i, j + 1, shortest), 1200)\n    },\n    [points, drawLine, clearCanvas, drawPoints]\n  )\n\n  // Helper function to calculate distance between two points\n  const distance = useCallback((p1, p2) => {\n    return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2)\n  }, [])\n\n  // Helper function to find closest pair by brute force (for small arrays)\n  const bruteForce = useCallback(\n    (pointsArr) => {\n      let minDist = Infinity\n      let pair = null\n      const n = pointsArr.length\n\n      for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n          const dist = distance(pointsArr[i], pointsArr[j])\n          if (dist < minDist) {\n            minDist = dist\n            pair = { start: pointsArr[i], end: pointsArr[j], length: minDist }\n          }\n        }\n      }\n      return pair\n    },\n    [distance]\n  )\n\n  // Helper function to find closest pair in strip\n  const stripClosest = useCallback(\n    (strip, d, currentPair) => {\n      let minDist = d\n      let pair = currentPair\n\n      // Sort strip by y-coordinate\n      strip.sort((a, b) => a.y - b.y)\n\n      for (let i = 0; i < strip.length; i++) {\n        for (\n          let j = i + 1;\n          j < strip.length && strip[j].y - strip[i].y < minDist;\n          j++\n        ) {\n          const dist = distance(strip[i], strip[j])\n          if (dist < minDist) {\n            minDist = dist\n            pair = { start: strip[i], end: strip[j], length: minDist }\n          }\n        }\n      }\n      return pair\n    },\n    [distance]\n  )\n\n  // Divide and Conquer algorithm with visualization\n  const closestPairRecursive = useCallback(\n    async (pointsArr, visualSteps) => {\n      const n = pointsArr.length\n\n      // Base case: use brute force for small arrays\n      if (n <= 3) {\n        return bruteForce(pointsArr)\n      }\n\n      // Divide points into two halves\n      const mid = Math.floor(n / 2)\n      const midPoint = pointsArr[mid]\n\n      // Visualize the division\n      visualSteps.push({\n        type: \"divide\",\n        midX: midPoint.x,\n        left: pointsArr.slice(0, mid),\n        right: pointsArr.slice(mid),\n      })\n\n      // Recursively find closest pairs in both halves\n      const leftPair = await closestPairRecursive(\n        pointsArr.slice(0, mid),\n        visualSteps\n      )\n      const rightPair = await closestPairRecursive(\n        pointsArr.slice(mid),\n        visualSteps\n      )\n\n      // Find the smaller of two\n      let minPair = leftPair\n      if (rightPair && (!leftPair || rightPair.length < leftPair.length)) {\n        minPair = rightPair\n      }\n\n      const d = minPair ? minPair.length : Infinity\n\n      // Build strip of points within distance d of the dividing line\n      const strip = pointsArr.filter((p) => Math.abs(p.x - midPoint.x) < d)\n\n      visualSteps.push({\n        type: \"strip\",\n        midX: midPoint.x,\n        strip: strip,\n        currentBest: minPair,\n        stripWidth: d,\n      })\n\n      // Find closest pair in strip\n      const stripPair = stripClosest(strip, d, minPair)\n\n      // Return the closest pair found\n      return stripPair || minPair\n    },\n    [bruteForce, stripClosest]\n  )\n\n  // Animated visualization for divide and conquer\n  const plotFast = useCallback(async () => {\n    // Sort points by x-coordinate\n    const sortedPoints = [...points].sort((a, b) => a.x - b.x)\n    const visualSteps = []\n\n    // Run the divide and conquer algorithm\n    const result = await closestPairRecursive(sortedPoints, visualSteps)\n\n    // Animate the visualization steps\n    let stepIndex = 0\n\n    const animateStep = () => {\n      if (stepIndex >= visualSteps.length) {\n        // Show final result\n        clearCanvas()\n        drawPoints()\n        if (result) {\n          drawLine(result.start, result.end, \"#ff2626\")\n        }\n        setClickable(true)\n        return\n      }\n\n      const step = visualSteps[stepIndex]\n      clearCanvas()\n      drawPoints()\n\n      if (step.type === \"divide\") {\n        // Draw dividing line\n        drawVerticalLine(step.midX, \"#0000ff\")\n      } else if (step.type === \"strip\") {\n        // Draw strip region\n        drawVerticalLine(step.midX, \"#0000ff\")\n        if (step.stripWidth && step.stripWidth !== Infinity) {\n          drawVerticalLine(step.midX - step.stripWidth, \"#00ff00\")\n          drawVerticalLine(step.midX + step.stripWidth, \"#00ff00\")\n        }\n        // Draw current best pair\n        if (step.currentBest) {\n          drawLine(step.currentBest.start, step.currentBest.end, \"#ff6600\")\n        }\n      }\n\n      stepIndex++\n      setTimeout(animateStep, 600)\n    }\n\n    animateStep()\n  }, [\n    points,\n    closestPairRecursive,\n    clearCanvas,\n    drawPoints,\n    drawLine,\n    drawVerticalLine,\n  ])\n\n  const find = useCallback(\n    (speed) => {\n      if (points.length < 2) {\n        setAlert({\n          text: \"Not enough points on canvas\",\n          type: \"info\",\n        })\n        return\n      }\n      if (speed.toLowerCase() === \"slow\") {\n        setClickable(false)\n        setAlert(null)\n        plot(0, 1)\n      } else if (speed.toLowerCase() === \"fast\") {\n        setClickable(false)\n        setAlert(null)\n        plotFast()\n      }\n    },\n    [points, plot, plotFast]\n  )\n\n  useEffect(() => {\n    canvasRef.current = document.getElementById(\"pointsCanvas\")\n  }, [])\n\n  useEffect(() => {\n    drawPoints()\n  }, [points])\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div style={{ width: \"100%\" }}>\n        <div className=\"mt-2\" style={{ width: \"100%\" }}>\n          {alert && (\n            <Alert\n              color={alert.type}\n              isOpen={!!alert.text}\n              toggle={() => setAlert(null)}\n            >\n              {alert.text}\n            </Alert>\n          )}\n          <Run find={find} />\n        </div>\n        <div className=\"m-2\" style={{ width: \"100%\" }}>\n          <h3 className=\"p-2\">Click in the canvas below to draw points</h3>\n          <Canvas\n            id=\"pointsCanvas\"\n            clickable={clickable}\n            width={`${innerWidth - 48}`}\n            height=\"400\"\n            addPoints={(p) => {\n              if (clickable) {\n                setPoints((prevPoints) => [...prevPoints, p])\n              }\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ClosestPair\n"],"names":["getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","useState","useEffect","handleResize","addEventListener","removeEventListener","canvas","drawCoordinates","useCallback","x","y","ctx","getContext","fillStyle","beginPath","arc","Math","PI","fill","font","fillText","concat","draw","event","rect","getBoundingClientRect","clientX","left","clientY","top","_ref","id","clickable","addPoints","canvasRef","useRef","usePoint","current","handleClick","_jsx","ref","style","border","background","props","inputLabel","speed","setSpeed","setLabelWidth","offsetWidth","_jsxs","className","children","htmlFor","value","onChange","target","onClick","find","ClosestPair","points","setPoints","setClickable","alert","setAlert","clearCanvas","clearRect","drawPoints","forEach","p","drawLine","q","stroke","strokeStyle","setLineDash","moveTo","lineTo","drawVerticalLine","color","arguments","length","undefined","lineWidth","plot","i","j","shortest","start","end","setTimeout","distance","p1","p2","sqrt","bruteForce","pointsArr","minDist","Infinity","pair","n","dist","stripClosest","strip","d","currentPair","sort","a","b","closestPairRecursive","async","visualSteps","mid","floor","midPoint","push","type","midX","slice","right","leftPair","rightPair","minPair","filter","abs","currentBest","stripWidth","plotFast","sortedPoints","result","stepIndex","animateStep","step","text","toLowerCase","document","getElementById","Alert","isOpen","toggle","Run","Canvas","prevPoints"],"sourceRoot":""}