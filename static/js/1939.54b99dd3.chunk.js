"use strict";(self.webpackChunkAlgoLens=self.webpackChunkAlgoLens||[]).push([[1939],{1939:(e,s,i)=>{i.r(s),i.d(s,{default:()=>R});var n=i(2791);const r="BTree_container__KORkJ",a="BTree_title__5qjVq",t="BTree_description__dukkn",l="BTree_section__MIdLU",c="BTree_initGroup__IVs71",h="BTree_info__qAoi9",d="BTree_operations__blunP",o="BTree_operationCard__eSPY7",x="BTree_inputGroup__8eNAf",m="BTree_input__OMosh",_="BTree_btnPrimary__-lM23",j="BTree_btnSecondary__83Zz7",u="BTree_btnOperation__gxUNI",p="BTree_lastOperation__RB7Fq",y="BTree_treeContainer__prGVl",N="BTree_treeSvg__bDiqM",g="BTree_nodeBox__8bSNy",v="BTree_edge__R9C6u",f="BTree_separator__nnaHa",k="BTree_keyText__xRRo0",T="BTree_highlighted__RYsnn",B="BTree_leafLabel__sisC3",b="BTree_propertiesGrid__T6GHQ",C="BTree_propertyCard__9+Ph4",S="BTree_complexityGrid__j6uUO",w="BTree_complexityCard__9L0v8",L="BTree_complexity__ceUip",K="BTree_explanation__niUzS",I="BTree_note__GAaJo";var M=i(184);class E{constructor(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.keys=[],this.children=[],this.isLeaf=e}}class O{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3;this.root=new E(!0),this.order=e,this.minKeys=Math.ceil(e/2)-1,this.maxKeys=e-1}search(e,s){let i=0;for(;i<e.keys.length&&s>e.keys[i];)i++;return i<e.keys.length&&s===e.keys[i]||!e.isLeaf&&this.search(e.children[i],s)}insert(e){if(this.root.keys.length===this.maxKeys){const e=new E(!1);e.children.push(this.root),this.splitChild(e,0),this.root=e}this.insertNonFull(this.root,e)}insertNonFull(e,s){let i=e.keys.length-1;if(e.isLeaf)e.keys.push(s),e.keys.sort(((e,s)=>e-s));else{for(;i>=0&&s<e.keys[i];)i--;i++,e.children[i].keys.length===this.maxKeys&&(this.splitChild(e,i),s>e.keys[i]&&i++),this.insertNonFull(e.children[i],s)}}splitChild(e,s){const i=e.children[s],n=new E(i.isLeaf),r=Math.floor(this.maxKeys/2),a=i.keys[r];n.keys=i.keys.splice(r+1),i.keys.pop(),i.isLeaf||(n.children=i.children.splice(r+1)),e.keys.splice(s,0,a),e.children.splice(s+1,0,n)}getHeight(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return e.isLeaf?1:1+this.getHeight(e.children[0])}clone(){const e=new O(this.order);return e.root=this.cloneNode(this.root),e}cloneNode(e){if(!e)return null;const s=new E(e.isLeaf);return s.keys=[...e.keys],s.children=e.children.map((e=>this.cloneNode(e))),s}}const R=()=>{const[e,s]=(0,n.useState)(new O(4)),[i,E]=(0,n.useState)(4),[R,A]=(0,n.useState)(""),[P,F]=(0,n.useState)(""),[z,G]=(0,n.useState)([]),[H,U]=(0,n.useState)(""),q=()=>{const i=parseInt(R,10);if(isNaN(i))return void alert("Please enter a valid number");const n=e.clone();n.insert(i),s(n),A(""),U("Inserted ".concat(i)),G([i]),setTimeout((()=>G([])),2e3)},D=()=>{const s=parseInt(P,10);if(isNaN(s))return void alert("Please enter a valid number");const i=e.search(e.root,s);F(""),U("Search for ".concat(s,": ").concat(i?"Found \u2713":"Not Found \u2717")),i&&(G([s]),setTimeout((()=>G([])),2e3))},V=(e,s,i,n,r)=>{if(!e)return[];const a=[],t=Math.max(50*e.keys.length+10,60);if(a.push((0,M.jsx)("rect",{x:s-t/2,y:i,width:t,height:50,className:g},"box-".concat(s,"-").concat(i))),e.keys.forEach(((e,n)=>{const r=s-t/2+50*(n+.5)+5,l=z.includes(e);n>0&&a.push((0,M.jsx)("line",{x1:s-t/2+50*n+5,y1:i,x2:s-t/2+50*n+5,y2:i+50,className:f},"sep-".concat(s,"-").concat(i,"-").concat(n))),a.push((0,M.jsx)("text",{x:r,y:i+25+6,textAnchor:"middle",className:"".concat(k," ").concat(l?T:""),children:e},"key-".concat(s,"-").concat(i,"-").concat(n)))})),!e.isLeaf&&e.children.length>0){const l=n/e.children.length;e.children.forEach(((c,h)=>{const d=s-n/2+(h+.5)*l,o=s-t/2+(h+.5)*t/e.children.length;a.push((0,M.jsx)("line",{x1:o,y1:i+50,x2:d,y2:i+100,className:v},"edge-".concat(s,"-").concat(i,"-").concat(h))),a.push(...V(c,d,i+100,l,r+1))}))}return e.isLeaf&&a.push((0,M.jsx)("text",{x:s,y:i+50+15,textAnchor:"middle",className:B,children:"Leaf"},"leaf-".concat(s,"-").concat(i))),a},J=e.getHeight(),Q=Math.max(400,120*J+100);return(0,M.jsxs)("div",{className:r,children:[(0,M.jsx)("h1",{className:a,children:"B-Tree Visualization \ud83c\udf32"}),(0,M.jsx)("div",{className:t,children:(0,M.jsx)("p",{children:"A B-Tree is a self-balancing tree data structure that maintains sorted data and allows searches, insertions, and deletions in logarithmic time. Used extensively in databases and file systems."})}),(0,M.jsxs)("div",{className:l,children:[(0,M.jsx)("h3",{children:"Initialize B-Tree"}),(0,M.jsxs)("div",{className:c,children:[(0,M.jsx)("label",{children:"Order (m):"}),(0,M.jsx)("input",{type:"number",value:i,onChange:e=>E(e.target.value),className:m,min:"3",max:"7"}),(0,M.jsx)("button",{onClick:()=>{const e=parseInt(i,10);isNaN(e)||e<3||e>7?alert("Please enter order between 3 and 7"):(s(new O(e)),U("Initialized B-Tree of order ".concat(e)),G([]))},className:_,children:"Initialize"}),(0,M.jsx)("button",{onClick:()=>{const e=new O(4);[10,20,30,40,50,25,35,45,15,5].forEach((s=>e.insert(s))),s(e),U("Loaded example B-Tree"),G([])},className:j,children:"Load Example"}),(0,M.jsxs)("span",{className:h,children:["Current: Order ",e.order," | Max keys per node: ",e.maxKeys," | Min keys: ",e.minKeys]})]})]}),(0,M.jsxs)("div",{className:d,children:[(0,M.jsxs)("div",{className:o,children:[(0,M.jsx)("h4",{children:"Insert Key"}),(0,M.jsxs)("div",{className:x,children:[(0,M.jsx)("input",{type:"number",value:R,onChange:e=>A(e.target.value),placeholder:"Enter value",className:m,onKeyPress:e=>"Enter"===e.key&&q()}),(0,M.jsx)("button",{onClick:q,className:u,children:"Insert"})]})]}),(0,M.jsxs)("div",{className:o,children:[(0,M.jsx)("h4",{children:"Search Key"}),(0,M.jsxs)("div",{className:x,children:[(0,M.jsx)("input",{type:"number",value:P,onChange:e=>F(e.target.value),placeholder:"Enter value",className:m,onKeyPress:e=>"Enter"===e.key&&D()}),(0,M.jsx)("button",{onClick:D,className:u,children:"Search"})]})]})]}),H&&(0,M.jsx)("div",{className:p,children:H}),(0,M.jsxs)("div",{className:l,children:[(0,M.jsxs)("h3",{children:["Tree Structure (Height: ",J,")"]}),(0,M.jsx)("div",{className:y,children:(0,M.jsx)("svg",{width:"1000",height:Q,className:N,children:V(e.root,500,50,900,0)})})]}),(0,M.jsxs)("div",{className:l,children:[(0,M.jsx)("h3",{children:"B-Tree Properties"}),(0,M.jsxs)("div",{className:b,children:[(0,M.jsxs)("div",{className:C,children:[(0,M.jsx)("h4",{children:"Balanced"}),(0,M.jsx)("p",{children:"All leaf nodes are at the same level"})]}),(0,M.jsxs)("div",{className:C,children:[(0,M.jsx)("h4",{children:"Multi-way"}),(0,M.jsx)("p",{children:"Each node can have multiple keys and children"})]}),(0,M.jsxs)("div",{className:C,children:[(0,M.jsx)("h4",{children:"Sorted Keys"}),(0,M.jsx)("p",{children:"Keys within nodes are in ascending order"})]}),(0,M.jsxs)("div",{className:C,children:[(0,M.jsx)("h4",{children:"Node Capacity"}),(0,M.jsxs)("p",{children:["Min: ",e.minKeys," keys, Max: ",e.maxKeys," keys"]})]}),(0,M.jsxs)("div",{className:C,children:[(0,M.jsx)("h4",{children:"Children Rule"}),(0,M.jsx)("p",{children:"Node with k keys has k+1 children"})]}),(0,M.jsxs)("div",{className:C,children:[(0,M.jsx)("h4",{children:"Root Exception"}),(0,M.jsx)("p",{children:"Root can have fewer than minimum keys"})]})]})]}),(0,M.jsxs)("div",{className:l,children:[(0,M.jsx)("h3",{children:"Time Complexity"}),(0,M.jsxs)("div",{className:S,children:[(0,M.jsxs)("div",{className:w,children:[(0,M.jsx)("h4",{children:"Search"}),(0,M.jsx)("p",{className:L,children:"O(log n)"})]}),(0,M.jsxs)("div",{className:w,children:[(0,M.jsx)("h4",{children:"Insert"}),(0,M.jsx)("p",{className:L,children:"O(log n)"})]}),(0,M.jsxs)("div",{className:w,children:[(0,M.jsx)("h4",{children:"Delete"}),(0,M.jsx)("p",{className:L,children:"O(log n)"})]}),(0,M.jsxs)("div",{className:w,children:[(0,M.jsx)("h4",{children:"Space"}),(0,M.jsx)("p",{className:L,children:"O(n)"})]})]})]}),(0,M.jsxs)("div",{className:K,children:[(0,M.jsx)("h3",{children:"Real-World Applications:"}),(0,M.jsxs)("ul",{children:[(0,M.jsxs)("li",{children:[(0,M.jsx)("strong",{children:"Database Indexing:"})," Most relational databases use B-Trees for indexing"]}),(0,M.jsxs)("li",{children:[(0,M.jsx)("strong",{children:"File Systems:"})," NTFS, ext4, HFS+ use B-Trees for file organization"]}),(0,M.jsxs)("li",{children:[(0,M.jsx)("strong",{children:"Large Datasets:"})," Efficient for data that doesn't fit in memory"]}),(0,M.jsxs)("li",{children:[(0,M.jsx)("strong",{children:"Range Queries:"})," Efficient for finding ranges of values"]})]}),(0,M.jsxs)("div",{className:I,children:[(0,M.jsx)("strong",{children:"Why B-Trees?"})," Designed to work efficiently with block storage (disk). Each node fits in a disk block, minimizing disk I/O operations. The order is typically much higher (100+) in real systems."]})]})]})}}}]);
//# sourceMappingURL=1939.54b99dd3.chunk.js.map