{"version":3,"file":"static/js/7917.9274d7fe.chunk.js","mappings":"uOAQA,MAAMA,GAAYC,EAAAA,EAAAA,IAAYC,IAAK,CACjCC,OAAQ,CACNC,SAAU,WACVC,aAAcH,EAAMI,QAAQ,GAC5BC,iBAAiBC,EAAAA,EAAAA,IAAKN,EAAMO,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACTJ,iBAAiBC,EAAAA,EAAAA,IAAKN,EAAMO,QAAQC,OAAOC,MAAO,MAEpDC,YAAaV,EAAMI,QAAQ,GAC3BO,WAAYX,EAAMI,QAAQ,GAC1BQ,MAAO,QAETC,WAAY,CACVD,MAAOZ,EAAMI,QAAQ,GACrBU,OAAQ,OACRZ,SAAU,WACVa,cAAe,OACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACTd,gBAAiB,QACjBe,QAASpB,EAAMI,QAAQ,GACvBD,aAAcH,EAAMI,QAAQ,QAIjB,SAASiB,EAAgBC,GACtC,MAAMC,EAAUzB,KACT0B,EAAOC,IAAkBC,EAAAA,EAAAA,UAAS,OAClCC,EAAMC,IAAWF,EAAAA,EAAAA,WAAS,GACjC,OACEG,EAAAA,EAAAA,MAAA,OAAKC,UAAWP,EAAQtB,OAAO8B,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAWP,EAAQV,WAAWkB,UACjCC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,OAEbD,EAAAA,EAAAA,KAACE,EAAAA,GAAY,CACXP,KAAMA,EACNQ,eAAa,EACbC,GAAId,EAAMc,GACVC,cAAeA,CAACC,EAAOC,KACrBX,IAAQW,EAAqB,EAE/BC,QAASA,KACPZ,GAAQ,EAAK,EAEfa,OAAQA,KACNb,GAAQ,EAAM,EAEhBc,QAASpB,EAAMqB,UACfJ,MAAOf,EACPoB,eAAiBC,GAAWA,EAAOC,OAASD,EAAOE,MAAQ,GAC3DC,YAAcC,IACZjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,IACJD,EACJE,YAAY,cACZ5B,QAAS,CACP6B,KAAM7B,EAAQJ,aAIpBkC,SAAUA,CAACf,EAAOC,KACZA,IACFd,EAAe,IAAKc,IACpBX,GAAQ,GACRN,EAAMgC,iBAAmBhC,EAAMgC,gBAAgB,IAAKf,IACtD,EAEFgB,aAAcA,CAACV,EAAMW,KAAsB,IAApB,WAAEC,GAAYD,EACnC,MAAME,EAAUC,IAAMd,EAAOC,MAAOW,GAC9BG,EAAQC,IAAMhB,EAAOC,MAAOY,GAElC,OACE1B,EAAAA,EAAAA,KAAA,OAAAD,SACG6B,EAAME,KAAI,CAACC,EAAMC,KAChBhC,EAAAA,EAAAA,KAAA,QAEEiC,MAAO,CAAEC,WAAYH,EAAKI,UAAY,IAAM,KAAMpC,SAEjDgC,EAAKK,MAHDJ,MAML,MAMlB,C","sources":["common/components/SearchSuggestor.jsx"],"sourcesContent":["import React, { useState } from \"react\"\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport parse from \"autosuggest-highlight/parse\"\r\nimport match from \"autosuggest-highlight/match\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.spacing(2),\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: theme.spacing(3),\r\n    width: \"100%\",\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing(7),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    backgroundColor: \"white\",\r\n    padding: theme.spacing(1),\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n}))\r\n\r\nexport default function SearchSuggestor(props) {\r\n  const classes = useStyles()\r\n  const [opVal, setOptionValue] = useState(null)\r\n  const [open, setOpen] = useState(false)\r\n  return (\r\n    <div className={classes.search}>\r\n      <div className={classes.searchIcon}>\r\n        <SearchIcon />\r\n      </div>\r\n      <Autocomplete\r\n        open={open}\r\n        clearOnEscape\r\n        id={props.id}\r\n        onInputChange={(event, value) => {\r\n          setOpen(value ? true : false)\r\n        }}\r\n        onFocus={() => {\r\n          setOpen(true)\r\n        }}\r\n        onBlur={() => {\r\n          setOpen(false)\r\n        }}\r\n        options={props.searchOps}\r\n        value={opVal}\r\n        getOptionLabel={(option) => option.title || option.data || \"\"}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            placeholder=\"Search Page\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n            }}\r\n          />\r\n        )}\r\n        onChange={(event, value) => {\r\n          if (value) {\r\n            setOptionValue({ ...value })\r\n            setOpen(false)\r\n            props.updateSelection && props.updateSelection({ ...value })\r\n          }\r\n        }}\r\n        renderOption={(option, { inputValue }) => {\r\n          const matches = match(option.title, inputValue)\r\n          const parts = parse(option.title, matches)\r\n\r\n          return (\r\n            <div>\r\n              {parts.map((part, index) => (\r\n                <span\r\n                  key={index}\r\n                  style={{ fontWeight: part.highlight ? 700 : 400 }}\r\n                >\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          )\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"],"names":["useStyles","makeStyles","theme","search","position","borderRadius","spacing","backgroundColor","fade","palette","common","white","marginRight","marginLeft","width","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","padding","SearchSuggestor","props","classes","opVal","setOptionValue","useState","open","setOpen","_jsxs","className","children","_jsx","SearchIcon","Autocomplete","clearOnEscape","id","onInputChange","event","value","onFocus","onBlur","options","searchOps","getOptionLabel","option","title","data","renderInput","params","TextField","placeholder","root","onChange","updateSelection","renderOption","_ref","inputValue","matches","match","parts","parse","map","part","index","style","fontWeight","highlight","text"],"sourceRoot":""}