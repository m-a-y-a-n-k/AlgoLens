{"version":3,"file":"static/js/3634.8454da38.chunk.js","mappings":"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","sources":["common/helpers/dimensions.js","routing/site/algo/components/Palindrome/Input.jsx","routing/site/algo/components/Palindrome/index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window\n  return {\n    width,\n    height,\n  }\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(() =>\n    getWindowDimensions()\n  )\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, [])\n\n  return windowDimensions\n}\n","import React, { useState } from \"react\"\nimport \"./Input.css\"\n\nconst Input = React.memo(({ disabled, checkPalindrome }) => {\n  const [input, setInput] = useState(\"\")\n\n  const handleSubmit = () => {\n    if (input) {\n      checkPalindrome(input)\n      setInput(\"\")\n    }\n  }\n\n  return (\n    <div className=\"palindrome-input-card\">\n      <h2 className=\"palindrome-input-header\">\n        Check whether string is Palindrome\n      </h2>\n      <h4 className=\"palindrome-input-subheader\">\n        A Palindrome reads the same from left to right and right to left\n      </h4>\n      <div className=\"palindrome-input-form\">\n        <div className=\"palindrome-input-group\">\n          <label\n            htmlFor=\"palindrome-string-input\"\n            className=\"palindrome-input-label\"\n          >\n            String\n          </label>\n          <input\n            type=\"text\"\n            id=\"palindrome-string-input\"\n            className=\"palindrome-input-field\"\n            onChange={(event) => setInput(event.target.value)}\n            value={input}\n            disabled={disabled}\n            placeholder=\"Enter a string\"\n          />\n        </div>\n        <button\n          className=\"palindrome-submit-btn\"\n          disabled={disabled || !input}\n          onClick={handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  )\n})\n\nInput.displayName = \"Palindrome.Input\"\n\nexport default Input\n","import React, { Suspense, lazy, useCallback, useState } from \"react\"\nimport Input from \"./Input\"\nimport { FixedSizeList as List } from \"react-window\"\nimport useWindowDimensions from \"common/helpers/dimensions\"\nimport \"./Palindrome.css\"\n\nconst LazyElement = lazy(() => import(\"common/components/Element\"))\n\nconst Palindrome = () => {\n  const [characters, setCharacters] = useState([])\n  const [alert, setAlert] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  const updateCharacters = (start, end, delay) => {\n    setTimeout(() => {\n      setCharacters((prevCharacters) => {\n        return prevCharacters.map(({ char, highlight }, idx) => {\n          if (idx === start || idx === end) {\n            return {\n              char,\n              highlight: true,\n            }\n          }\n          return {\n            char,\n            highlight,\n          }\n        })\n      })\n    }, delay)\n  }\n\n  const checkPalindrome = useCallback((input) => {\n    let start = 0,\n      end = input.length - 1,\n      isPalindrome = true,\n      delay = 1000\n\n    setCharacters(\n      input.split(\"\").map((char) => ({\n        char,\n        highlight: false,\n      }))\n    )\n    setDisabled(true)\n    while (start <= end) {\n      if (input[start] !== input[end]) {\n        setAlert({\n          type: \"danger\",\n          text: \"Input string is not a Palindrome\",\n        })\n        setDisabled(false)\n        isPalindrome = false\n        break\n      } else {\n        updateCharacters(start, end, delay)\n        delay = delay * 1.2\n        start++\n        end--\n      }\n    }\n    if (isPalindrome) {\n      setAlert({\n        type: \"success\",\n        text: \"Input string is a Palindrome\",\n      })\n      setDisabled(false)\n    }\n  }, [])\n\n  return (\n    <div className=\"palindrome-container\">\n      {alert && (\n        <div className=\"palindrome-row\">\n          <div className=\"palindrome-col-full\">\n            <div className={`palindrome-alert palindrome-alert-${alert.type}`}>\n              <span>{alert.text}</span>\n              <button\n                className=\"palindrome-alert-close\"\n                onClick={() => setAlert(null)}\n              >\n                Ã—\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"palindrome-row text-center\">\n        <div className=\"palindrome-col-full\">\n          <Input checkPalindrome={checkPalindrome} disabled={disabled} />\n        </div>\n      </div>\n\n      <div className=\"palindrome-row palindrome-chars-container text-center\">\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyList characters={characters} />\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst LazyList = ({ characters }) => {\n  const { width: innerWidth } = useWindowDimensions()\n\n  return (\n    <List\n      height={120}\n      itemCount={characters.length}\n      itemSize={200}\n      width={innerWidth || 800}\n      direction=\"horizontal\"\n    >\n      {({ index, style }) => (\n        <div className=\"palindrome-char-item\" style={style}>\n          <LazyElement\n            highlight={characters[index].highlight}\n            data={{ value: characters[index].char, index }}\n            type=\"array\"\n          />\n        </div>\n      )}\n    </List>\n  )\n}\n\nexport default Palindrome\n"],"names":["getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","useState","useEffect","handleResize","addEventListener","removeEventListener","Input","React","_ref","disabled","checkPalindrome","input","setInput","_jsxs","className","children","_jsx","htmlFor","type","id","onChange","event","target","value","placeholder","onClick","handleSubmit","displayName","LazyElement","lazy","LazyList","_ref2","characters","List","itemCount","length","itemSize","direction","_ref3","index","style","highlight","data","char","Palindrome","setCharacters","alert","setAlert","setDisabled","updateCharacters","start","end","delay","setTimeout","prevCharacters","map","idx","useCallback","isPalindrome","split","text","concat","Suspense","fallback"],"sourceRoot":""}