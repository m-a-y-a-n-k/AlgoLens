{"version":3,"file":"static/js/7917.8a2d658f.chunk.js","mappings":"gRAQMA,GAAYC,EAAAA,EAAAA,IAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,SAAU,WACVC,aAAcH,EAAMI,MAAMD,aAC1BE,iBAAiBC,EAAAA,EAAAA,IAAKN,EAAMO,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACTJ,iBAAiBC,EAAAA,EAAAA,IAAKN,EAAMO,QAAQC,OAAOC,MAAO,MAEpDC,YAAaV,EAAMW,QAAQ,GAC3BC,WAAYZ,EAAMW,QAAQ,GAC1BE,MAAO,QAETC,WAAY,CACVD,MAAOb,EAAMW,QAAQ,GACrBI,OAAQ,OACRb,SAAU,WACVc,cAAe,OACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACTC,MAAO,UACPR,MAAO,QAETS,WAAY,CACVC,QAASvB,EAAMW,QAAQ,EAAG,EAAG,EAAG,GAChCa,WAAYxB,EAAMyB,YAAYC,OAAO,SACrCb,MAAO,QA5BkB,IAgCd,SAASc,EAAgBC,GACtC,IAAMC,EAAU/B,IAChB,GAAgCgC,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwBF,EAAAA,EAAAA,WAAS,GAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,OACE,iBAAKC,UAAWN,EAAQ5B,OAAxB,WACE,gBAAKkC,UAAWN,EAAQf,WAAxB,UACE,SAAC,IAAD,OAEF,SAAC,KAAD,CACEmB,KAAMA,EACNG,eAAa,EACbC,GAAIT,EAAMS,GACVC,cAAe,SAACC,EAAOC,GACrBN,IAAQM,EACT,EACDC,QAAS,WACPP,GAAQ,EACT,EACDQ,OAAQ,WACNR,GAAQ,EACT,EACDS,QAASf,EAAMgB,UACfJ,MAAOT,EACPc,eAAgB,SAACC,GAAD,OAAYA,EAAOC,OAASD,EAAOE,MAAQ,EAA3C,EAChBC,YAAa,SAACC,GAAD,OACX,SAAC,IAAD,CACEC,IAAKD,EAAOE,WAAWD,IACvBE,WAAYH,EAAOG,WACnBC,YAAa,cACbzB,QAAS,CACP0B,KAAM1B,EAAQT,UACdoC,MAAO3B,EAAQP,aAPR,EAWbmC,SAAU,SAAClB,EAAOC,GACZA,IACFR,GAAe,UAAKQ,IACpBZ,EAAM8B,iBAAmB9B,EAAM8B,iBAAN,UAA2BlB,IAEvD,EACDmB,aAAc,SAACb,EAAD,GAA6B,IAAlBc,EAAiB,EAAjBA,WACjBC,EAAUC,IAAMhB,EAAOC,MAAOa,GAC9BG,EAAQC,IAAMlB,EAAOC,MAAOc,GAElC,OACE,yBACGE,EAAME,KAAI,SAACC,EAAMC,GAAP,OACT,iBAEEC,MAAO,CAAEC,WAAYH,EAAKI,UAAY,IAAM,KAF9C,SAIGJ,EAAKK,MAHDJ,EAFE,KAUhB,MAIR,C","sources":["common/components/SearchSuggestor.jsx"],"sourcesContent":["import React, { useState } from \"react\"\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport { fade, makeStyles } from \"@material-ui/core/styles\"\nimport InputBase from \"@material-ui/core/InputBase\"\nimport parse from \"autosuggest-highlight/parse\"\nimport match from \"autosuggest-highlight/match\"\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: theme.spacing(3),\n    width: \"100%\",\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n    width: \"100%\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n  },\n}))\n\nexport default function SearchSuggestor(props) {\n  const classes = useStyles()\n  const [opVal, setOptionValue] = useState(null)\n  const [open, setOpen] = useState(false)\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <Autocomplete\n        open={open}\n        clearOnEscape\n        id={props.id}\n        onInputChange={(event, value) => {\n          setOpen(value ? true : false)\n        }}\n        onFocus={() => {\n          setOpen(true)\n        }}\n        onBlur={() => {\n          setOpen(false)\n        }}\n        options={props.searchOps}\n        value={opVal}\n        getOptionLabel={(option) => option.title || option.data || \"\"}\n        renderInput={(params) => (\n          <InputBase\n            ref={params.InputProps.ref}\n            inputProps={params.inputProps}\n            placeholder={\"Search Page\"}\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput,\n            }}\n          />\n        )}\n        onChange={(event, value) => {\n          if (value) {\n            setOptionValue({ ...value })\n            props.updateSelection && props.updateSelection({ ...value })\n          }\n        }}\n        renderOption={(option, { inputValue }) => {\n          const matches = match(option.title, inputValue)\n          const parts = parse(option.title, matches)\n\n          return (\n            <div>\n              {parts.map((part, index) => (\n                <span\n                  key={index}\n                  style={{ fontWeight: part.highlight ? 700 : 400 }}\n                >\n                  {part.text}\n                </span>\n              ))}\n            </div>\n          )\n        }}\n      />\n    </div>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","SearchSuggestor","props","classes","useState","opVal","setOptionValue","open","setOpen","className","clearOnEscape","id","onInputChange","event","value","onFocus","onBlur","options","searchOps","getOptionLabel","option","title","data","renderInput","params","ref","InputProps","inputProps","placeholder","root","input","onChange","updateSelection","renderOption","inputValue","matches","match","parts","parse","map","part","index","style","fontWeight","highlight","text"],"sourceRoot":""}