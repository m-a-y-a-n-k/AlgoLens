{"version":3,"file":"static/js/2391.1f3e251c.chunk.js","mappings":"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","sources":["routing/site/algo/components/FloodFill/index.jsx"],"sourcesContent":["import React from \"react\"\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  InputGroup,\n  Input,\n  Alert,\n} from \"reactstrap\"\nimport SketchPicker from \"react-color\"\n\nclass CanvasImage extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps !== this.props || nextState !== this.state\n  }\n\n  captureMousePixel(event) {\n    let image = document.getElementById(\"cusImage\"),\n      details = document.getElementById(\"detailsPane\")\n    let imageData = image\n      .getContext(\"2d\")\n      .getImageData(\n        event.nativeEvent.offsetX,\n        event.nativeEvent.offsetY,\n        image.width,\n        image.height\n      )\n    let pixelData = imageData.data\n    details.innerHTML =\n      \"R: \" +\n      pixelData[0] +\n      \"<br>G: \" +\n      pixelData[1] +\n      \"<br>B: \" +\n      pixelData[2] +\n      \"<br>A: \" +\n      pixelData[3]\n  }\n\n  hexToRgb = (hex) =>\n    hex\n      .replace(\n        /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n        (m, r, g, b) => \"#\" + r + r + g + g + b + b\n      )\n      .substring(1)\n      .match(/.{2}/g)\n      .map((x) => parseInt(x, 16))\n\n  fillPixel(fillColor, xPos, yPos, firstRgb, image) {\n    if (xPos < 0 || xPos > image.width || yPos < 0 || yPos > image.width) {\n      return\n    }\n\n    let pixelData = image\n      .getContext(\"2d\")\n      .getImageData(xPos, yPos, image.width, image.height).data\n\n    if (\n      pixelData[0] !== firstRgb[0] ||\n      pixelData[1] !== firstRgb[1] ||\n      pixelData[2] !== firstRgb[2]\n    ) {\n      return\n    }\n\n    let rgb = this.hexToRgb(fillColor)\n    let imageData = image.getContext(\"2d\").createImageData(1, 1)\n\n    pixelData = imageData.data\n    pixelData[0] = rgb[0]\n    pixelData[1] = rgb[1]\n    pixelData[2] = rgb[2]\n    pixelData[3] = 255\n\n    image.getContext(\"2d\").putImageData(imageData, xPos, yPos)\n\n    // Flood fill recursion\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos + 1, yPos, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos + 1, yPos - 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos + 1, yPos + 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos, yPos - 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos, yPos + 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos - 1, yPos, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos - 1, yPos + 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos - 1, yPos - 1, firstRgb, image)\n    }, 20)\n  }\n\n  render() {\n    return (\n      <canvas\n        id=\"cusImage\"\n        width=\"360\"\n        height=\"360\"\n        style={{\n          cursor: \"crosshair\",\n          margin: \"5% auto\",\n          border: \"1px solid #bbb\",\n        }}\n        onMouseMove={(event) => {\n          this.captureMousePixel(event)\n        }}\n        onClick={(event) => {\n          let xPos = event.nativeEvent.offsetX\n          let yPos = event.nativeEvent.offsetY\n\n          let image = document.getElementById(\"cusImage\")\n          let imageData = image\n            .getContext(\"2d\")\n            .getImageData(xPos, yPos, image.width, image.height)\n          let originalRgb = imageData.data\n\n          this.fillPixel(this.props.fill, xPos, yPos, originalRgb, image)\n        }}\n      ></canvas>\n    )\n  }\n}\n\nclass DetailsPane extends React.Component {\n  render() {\n    return (\n      <div\n        id=\"detailsPane\"\n        style={{\n          position: \"relative\",\n          top: \"50%\",\n          margin: \"auto\",\n          height: \"100px\",\n          width: \"200px\",\n          border: \"1px solid #bbb\",\n        }}\n      ></div>\n    )\n  }\n}\n\nexport default class FloodFill extends React.Component {\n  constructor(props) {\n    super(props)\n    this.getCustomImage = this.getCustomImage.bind(this)\n    this.handleChangeComplete = this.handleChangeComplete.bind(this)\n    this.state = {\n      hasImage: false,\n      alert: null,\n      background: \"#fff\",\n    }\n  }\n\n  handleChangeComplete = (color) => {\n    this.setState({ background: color.hex })\n  }\n\n  getCustomImage(event) {\n    var self = this\n    var URL = window.URL,\n      img = new Image()\n    let file = event.target.files[0]\n\n    if (file.type.indexOf(\"image\") === -1) {\n      self.setState(\n        { hasImage: false, alert: \"Please upload an image\" },\n        () => {\n          setTimeout(() => {\n            self.setState({ alert: null })\n          }, 5000)\n        }\n      )\n      return\n    }\n    var url = URL.createObjectURL(file)\n    img.onload = function () {\n      self.setState(\n        {\n          hasImage: true,\n          alert:\n            \"Click at position in image to start flood fill with color of choice\",\n        },\n        () => {\n          var canvas = document.getElementById(\"cusImage\")\n          var ctx = canvas.getContext(\"2d\")\n          ctx.clearRect(0, 0, canvas.width, canvas.height)\n          ctx.drawImage(img, 0, 0, 360, 360)\n\n          setTimeout(() => {\n            self.setState({ alert: null })\n          }, 5000)\n        }\n      )\n    }\n    img.src = url\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col sm={12}>\n            {this.state.alert && (\n              <Alert color=\"primary\">{this.state.alert}</Alert>\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={6}>\n            <Card style={{ border: \"1px solid rgba(22,45,167,0.9)\" }}>\n              <CardHeader>Flood Fill Algorithm on Custom Image</CardHeader>\n              <CardBody className=\"text-center\">\n                <CardTitle>Choose Custom Image</CardTitle>\n                <InputGroup>\n                  <Input\n                    id=\"getCustomImage\"\n                    type=\"file\"\n                    placeholder=\"Custom Image\"\n                    onChange={this.getCustomImage}\n                  />\n                </InputGroup>\n              </CardBody>\n            </Card>\n          </Col>\n          {this.state.hasImage && (\n            <Col sm={6}>\n              <SketchPicker\n                color={this.state.background}\n                onChangeComplete={this.handleChangeComplete}\n              />\n            </Col>\n          )}\n        </Row>\n        <Row>\n          <Col sm={6}>\n            {this.state.hasImage && (\n              <CanvasImage fill={this.state.background} />\n            )}\n          </Col>\n          <Col sm={6}>\n            <DetailsPane />\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n"],"names":["CanvasImage","React","constructor","arguments","hexToRgb","hex","replace","m","r","g","b","substring","match","map","x","parseInt","shouldComponentUpdate","nextProps","nextState","this","props","state","captureMousePixel","event","image","document","getElementById","details","pixelData","getContext","getImageData","nativeEvent","offsetX","offsetY","width","height","data","innerHTML","fillPixel","fillColor","xPos","yPos","firstRgb","rgb","imageData","createImageData","putImageData","setTimeout","render","_jsx","id","style","cursor","margin","border","onMouseMove","onClick","originalRgb","fill","DetailsPane","position","top","FloodFill","super","handleChangeComplete","color","setState","background","getCustomImage","bind","hasImage","alert","self","URL","window","img","Image","file","target","files","type","indexOf","url","createObjectURL","onload","canvas","ctx","clearRect","drawImage","src","_jsxs","Container","children","Row","Col","sm","Alert","Card","CardHeader","CardBody","className","CardTitle","InputGroup","Input","placeholder","onChange","SketchPicker","onChangeComplete"],"sourceRoot":""}