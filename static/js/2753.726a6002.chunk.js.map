{"version":3,"file":"static/js/2753.726a6002.chunk.js","mappings":"sQAEA,MAgBA,EAhBoBA,KAEhBC,EAAAA,EAAAA,KAAA,OACEC,GAAG,cACHC,MAAO,CACLC,SAAU,WACVC,IAAK,MACLC,OAAQ,OACRC,OAAQ,QACRC,MAAO,QACPC,OAAQ,oB,cCKhB,MAAMC,GAAcC,EAAAA,EAAAA,OAAK,IAAM,iCA0F/B,EAxFkBC,KAChB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,OAC5BC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,QAEvCG,GAAuBC,EAAAA,EAAAA,cAAaC,IACxCH,EAAcG,EAAMC,IAAI,GACvB,IAEGC,GAAmBH,EAAAA,EAAAA,cAAY,KACnC,MAAMI,EAASC,SAASC,eAAe,YACjCC,EAAMH,EAAOI,WAAW,MAE9B,OADAD,EAAIE,UAAU,EAAG,EAAGL,EAAOf,MAAOe,EAAOhB,QAClCmB,CAAG,GACT,IAEGG,GAAiBV,EAAAA,EAAAA,cAAaW,IAClC,MAAMC,EAAOD,EAAME,OAAOC,MAAM,GAEhC,IAAKF,EAAKG,KAAKC,WAAW,UAGxB,OAFArB,EAAS,+BACTsB,YAAW,IAAMtB,EAAS,OAAO,KAInC,MAAMuB,EAAM,IAAIC,MACVC,EAAMC,IAAIC,gBAAgBV,GAChCM,EAAIK,IAAMH,EAEVF,EAAIM,OAAS,KACCrB,IACRsB,UAAUP,EAAK,EAAG,EAAG,IAAK,KAE9BvB,EACE,sFAEFsB,YAAW,IAAMtB,EAAS,OAAO,IAAK,CACvC,GACA,IAEH,OACE+B,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAAAC,SAAA,EACR9C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAG,CAAAD,UACF9C,EAAAA,EAAAA,KAACgD,EAAAA,EAAG,CAACC,GAAI,GAAGH,SAAElC,IAASZ,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CAAC/B,MAAM,UAAS2B,SAAElC,SAEjDgC,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAAAD,SAAA,EACF9C,EAAAA,EAAAA,KAACgD,EAAAA,EAAG,CAACC,GAAI,EAAEH,UACTF,EAAAA,EAAAA,MAACO,EAAAA,EAAI,CAACjD,MAAO,CAAEM,OAAQ,iCAAkCsC,SAAA,EACvD9C,EAAAA,EAAAA,KAACoD,EAAAA,EAAU,CAAAN,SAAC,0CACZF,EAAAA,EAAAA,MAACS,EAAAA,EAAQ,CAACC,UAAU,cAAaR,SAAA,EAC/B9C,EAAAA,EAAAA,KAACuD,EAAAA,EAAS,CAAAT,SAAC,yBACX9C,EAAAA,EAAAA,KAACwD,EAAAA,EAAU,CAAAV,UACT9C,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CACJxD,GAAG,iBACHgC,KAAK,OACLyB,YAAY,eACZC,SAAU/B,OAGd5B,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CACLzC,MAAM,OACN0C,SAAO,EACPC,QAASzC,EACTiC,UAAU,OAAMR,SACjB,0BAMP9C,EAAAA,EAAAA,KAACgD,EAAAA,EAAG,CAACC,GAAI,EAAEH,UACT9C,EAAAA,EAAAA,KAAC+D,EAAAA,GAAY,CACX5C,MAAOJ,EACPiD,iBAAkB/C,UAIxB2B,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAAAD,SAAA,EACF9C,EAAAA,EAAAA,KAACgD,EAAAA,EAAG,CAACC,GAAI,EAAEH,UACT9C,EAAAA,EAAAA,KAACS,EAAW,CAACwD,KAAMlD,OAErBf,EAAAA,EAAAA,KAACgD,EAAAA,EAAG,CAACC,GAAI,EAAEH,UACT9C,EAAAA,EAAAA,KAACD,EAAW,WAGN,C","sources":["routing/site/algo/components/FloodFill/DetailsPane.jsx","routing/site/algo/components/FloodFill/index.jsx"],"sourcesContent":["import React from \"react\"\n\nconst DetailsPane = () => {\n  return (\n    <div\n      id=\"detailsPane\"\n      style={{\n        position: \"relative\",\n        top: \"50%\",\n        margin: \"auto\",\n        height: \"100px\",\n        width: \"200px\",\n        border: \"1px solid #bbb\",\n      }}\n    ></div>\n  )\n}\n\nexport default DetailsPane\n","import React, { useState, useCallback, lazy } from \"react\"\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  InputGroup,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\"\nimport DetailsPane from \"./DetailsPane\"\nimport { SketchPicker } from \"react-color\"\n\nconst CanvasImage = lazy(() => import(\"./CanvasImage\"))\n\nconst FloodFill = () => {\n  const [alert, setAlert] = useState(null)\n  const [background, setBackground] = useState(\"#fff\")\n\n  const handleChangeComplete = useCallback((color) => {\n    setBackground(color.hex)\n  }, [])\n\n  const getClearedCanvas = useCallback(() => {\n    const canvas = document.getElementById(\"cusImage\")\n    const ctx = canvas.getContext(\"2d\")\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    return ctx\n  }, [])\n\n  const getCustomImage = useCallback((event) => {\n    const file = event.target.files[0]\n\n    if (!file.type.startsWith(\"image/\")) {\n      setAlert(\"Please upload an image\")\n      setTimeout(() => setAlert(null), 5000)\n      return\n    }\n\n    const img = new Image()\n    const url = URL.createObjectURL(file)\n    img.src = url\n\n    img.onload = () => {\n      const ctx = getClearedCanvas()\n      ctx.drawImage(img, 0, 0, 360, 360)\n\n      setAlert(\n        \"Click at a position in the image to start flood fill with the color of your choice\"\n      )\n      setTimeout(() => setAlert(null), 5000)\n    }\n  }, [])\n\n  return (\n    <Container>\n      <Row>\n        <Col sm={12}>{alert && <Alert color=\"primary\">{alert}</Alert>}</Col>\n      </Row>\n      <Row>\n        <Col sm={6}>\n          <Card style={{ border: \"1px solid rgba(22,45,167,0.9)\" }}>\n            <CardHeader>Flood Fill Algorithm on Custom Image</CardHeader>\n            <CardBody className=\"text-center\">\n              <CardTitle>Choose Custom Image</CardTitle>\n              <InputGroup>\n                <Input\n                  id=\"getCustomImage\"\n                  type=\"file\"\n                  placeholder=\"Custom Image\"\n                  onChange={getCustomImage}\n                />\n              </InputGroup>\n              <Button\n                color=\"info\"\n                outline\n                onClick={getClearedCanvas}\n                className=\"mt-4\"\n              >\n                Clear Canvas\n              </Button>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm={6}>\n          <SketchPicker\n            color={background}\n            onChangeComplete={handleChangeComplete}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={6}>\n          <CanvasImage fill={background} />\n        </Col>\n        <Col sm={6}>\n          <DetailsPane />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default FloodFill\n"],"names":["DetailsPane","_jsx","id","style","position","top","margin","height","width","border","CanvasImage","lazy","FloodFill","alert","setAlert","useState","background","setBackground","handleChangeComplete","useCallback","color","hex","getClearedCanvas","canvas","document","getElementById","ctx","getContext","clearRect","getCustomImage","event","file","target","files","type","startsWith","setTimeout","img","Image","url","URL","createObjectURL","src","onload","drawImage","_jsxs","Container","children","Row","Col","sm","Alert","Card","CardHeader","CardBody","className","CardTitle","InputGroup","Input","placeholder","onChange","Button","outline","onClick","SketchPicker","onChangeComplete","fill"],"sourceRoot":""}