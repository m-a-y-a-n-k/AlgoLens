{"version":3,"file":"static/js/1479.cf494591.chunk.js","mappings":"8JAIA,MAwIA,EAxIyBA,KACvB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IAIvCK,GAAsBC,EAAAA,EAAAA,cAAY,KACtC,MAAMC,EAAeT,EAAQU,KAAKC,GAAM,IAClCC,EAAa,EAAIT,EAAQO,KAAKG,IAAIJ,GAJhC,KAKFK,EAAS,GAEf,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAWG,GAAK,GAAK,CACxC,MAAMC,EAAIb,EAAQY,EAAIL,KAAKO,IAAIR,GACzBS,EAAIf,EAAQY,EAAIL,KAAKG,IAAIJ,GAAe,MAAUM,EAAIA,EAC5D,KAAIG,GAAK,GAGP,MAFAJ,EAAOK,KAAK,CAAEH,IAAGE,KAIrB,CAEAZ,EAAcQ,EAAO,GACpB,CAACd,EAAOG,KAEXiB,EAAAA,EAAAA,YAAU,KACRb,GAAqB,GACpB,CAACP,EAAOG,IAEX,MAAMkB,GAAgBC,EAAAA,EAAAA,UAAQ,IACrBjB,EAAWkB,OAAS,EAAIlB,EAAWA,EAAWkB,OAAS,GAAGP,EAAI,GACpE,CAACX,IAEEmB,GAAYF,EAAAA,EAAAA,UAAQ,IACjBZ,KAAKe,OAAOpB,EAAWqB,KAAKC,GAAUA,EAAMT,IAAI,IACtD,CAACb,IAEJ,OACEuB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,oBAELC,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,MAAOjC,EACPkC,SAAWC,IACT,MAAMC,EAAeC,OAAOF,EAAEG,OAAOL,OACjCG,GAAgB,GAAKA,GAAgB,IACvCnC,EAASmC,EACX,QAINR,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,gBAELC,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,MAAO9B,EACP+B,SAAWC,IACT,MAAMI,EAAeF,OAAOF,EAAEG,OAAOL,OACjCM,GAAgB,GAAKA,GAAgB,KACvCnC,EAASmC,EACX,WAKRR,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CAACR,KAAK,OAAOS,MAAO,CAAEC,MAAO,QAASZ,SAAC,kCAG7CC,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CAACR,KAAK,OAAOS,MAAO,CAAEC,MAAO,QAASZ,SAAC,oCAG7CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,MAAA,OAAKc,MAAM,MAAMC,OAAO,MAAMC,QAAQ,cAAad,SAAA,EACjDC,EAAAA,EAAAA,KAAA,QACEc,EAAI,WAAUxC,EACXqB,KAAKC,GAAW,GAAY,GAAVA,EAAMX,KAAU,IAAgB,GAAVW,EAAMT,MAC9C4B,KAAK,SACRC,OAAO,OACPC,KAAK,UAEPjB,EAAAA,EAAAA,KAAA,QACEkB,GAAG,IACHC,GAAG,MACHC,GAAG,MACHC,GAAG,MACHL,OAAO,QACPM,YAAY,OAEdzB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,QACEkB,GAAG,IACHC,GAAG,MACHC,GAAG,IACHC,GAAG,MACHL,OAAO,QACPM,YAAY,OAEdtB,EAAAA,EAAAA,KAAA,QACEf,EAAE,IACFE,EAAE,MACFoC,WAAW,QACXC,SAAS,KACTC,WAAW,SAAQ1B,SACpB,OAGDC,EAAAA,EAAAA,KAAA,QACEkB,GAAG,MACHC,GAAG,MACHC,GAAG,MACHC,GAAG,MACHL,OAAO,QACPM,YAAY,OAEdtB,EAAAA,EAAAA,KAAA,QACEf,EAAE,MACFE,EAAE,MACFoC,WAAW,QACXC,SAAS,KACTC,WAAW,SAAQ1B,SACpB,gBAMPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,mBAAiBT,EAAcoC,QAAQ,GAAG,cAC7C7B,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,mBAAiBN,EAAUiC,QAAQ,GAAG,kBAEvC,EC1HV,QAXA,WACE,OACE7B,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIU,MAAO,CAAEiB,UAAW,SAAUC,QAAS,IAAK7B,SAAC,kCAGjDC,EAAAA,EAAAA,KAAChC,EAAgB,MAGvB,C","sources":["routing/site/physics/components/Projectile/ProjectileMotion.jsx","routing/site/physics/components/Projectile/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\"\r\nimport { Alert } from \"reactstrap\"\r\nimport \"./ProjectileMotion.css\"\r\n\r\nconst ProjectileMotion = () => {\r\n  const [angle, setAngle] = useState(45)\r\n  const [speed, setSpeed] = useState(50)\r\n  const [trajectory, setTrajectory] = useState([])\r\n\r\n  const g = 9.81 // acceleration due to gravity\r\n\r\n  const calculateTrajectory = useCallback(() => {\r\n    const radianAngle = (angle * Math.PI) / 180\r\n    const totalTime = (2 * speed * Math.sin(radianAngle)) / g\r\n    const points = []\r\n\r\n    for (let t = 0; t <= totalTime; t += 0.1) {\r\n      const x = speed * t * Math.cos(radianAngle)\r\n      const y = speed * t * Math.sin(radianAngle) - 0.5 * g * t * t\r\n      if (y >= 0) {\r\n        points.push({ x, y })\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n\r\n    setTrajectory(points)\r\n  }, [angle, speed])\r\n\r\n  useEffect(() => {\r\n    calculateTrajectory()\r\n  }, [angle, speed])\r\n\r\n  const totalDistance = useMemo(() => {\r\n    return trajectory.length > 0 ? trajectory[trajectory.length - 1].x : 0\r\n  }, [trajectory])\r\n\r\n  const maxHeight = useMemo(() => {\r\n    return Math.max(...trajectory.map((point) => point.y), 0)\r\n  }, [trajectory])\r\n\r\n  return (\r\n    <div className=\"projectile-motion\">\r\n      <div className=\"controls\">\r\n        <label>\r\n          Angle (degrees):\r\n          <input\r\n            type=\"number\"\r\n            value={angle}\r\n            onChange={(e) => {\r\n              const updatedAngle = Number(e.target.value)\r\n              if (updatedAngle >= 0 && updatedAngle <= 90) {\r\n                setAngle(updatedAngle)\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n        <label>\r\n          Speed (m/s):\r\n          <input\r\n            type=\"number\"\r\n            value={speed}\r\n            onChange={(e) => {\r\n              const updatedSpeed = Number(e.target.value)\r\n              if (updatedSpeed >= 0 && updatedSpeed <= 1000) {\r\n                setSpeed(updatedSpeed)\r\n              }\r\n            }}\r\n          />\r\n        </label>\r\n      </div>\r\n      <Alert type=\"info\" style={{ width: \"100%\" }}>\r\n        Angle should be from 0 to 90\r\n      </Alert>\r\n      <Alert type=\"info\" style={{ width: \"100%\" }}>\r\n        Speed should be from 0 to 1000\r\n      </Alert>\r\n      <div className=\"visualization\">\r\n        <svg width=\"500\" height=\"500\" viewBox=\"0 0 500 500\">\r\n          <path\r\n            d={`M 0 500 ${trajectory\r\n              .map((point) => `${point.x * 10} ${500 - point.y * 10}`)\r\n              .join(\" L \")}`}\r\n            stroke=\"blue\"\r\n            fill=\"none\"\r\n          />\r\n          <line\r\n            x1=\"0\"\r\n            y1=\"500\"\r\n            x2=\"500\"\r\n            y2=\"500\"\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          <g>\r\n            <line\r\n              x1=\"0\"\r\n              y1=\"490\"\r\n              x2=\"0\"\r\n              y2=\"500\"\r\n              stroke=\"black\"\r\n              strokeWidth=\"2\"\r\n            />\r\n            <text\r\n              x=\"5\"\r\n              y=\"490\"\r\n              fontFamily=\"Arial\"\r\n              fontSize=\"12\"\r\n              textAnchor=\"middle\"\r\n            >\r\n              0\r\n            </text>\r\n            <line\r\n              x1=\"500\"\r\n              y1=\"490\"\r\n              x2=\"500\"\r\n              y2=\"500\"\r\n              stroke=\"black\"\r\n              strokeWidth=\"2\"\r\n            />\r\n            <text\r\n              x=\"490\"\r\n              y=\"490\"\r\n              fontFamily=\"Arial\"\r\n              fontSize=\"12\"\r\n              textAnchor=\"middle\"\r\n            >\r\n              50\r\n            </text>\r\n          </g>\r\n        </svg>\r\n      </div>\r\n      <div className=\"results\">\r\n        <p>Total Distance: {totalDistance.toFixed(2)} meters</p>\r\n        <p>Maximum Height: {maxHeight.toFixed(2)} meters</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProjectileMotion\r\n","import React from \"react\"\r\nimport ProjectileMotion from \"./ProjectileMotion\"\r\n\r\nfunction Main() {\r\n  return (\r\n    <div>\r\n      <h1 style={{ textAlign: \"center\", padding: 12 }}>\r\n        Projectile Motion Visualizer\r\n      </h1>\r\n      <ProjectileMotion />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main\r\n"],"names":["ProjectileMotion","angle","setAngle","useState","speed","setSpeed","trajectory","setTrajectory","calculateTrajectory","useCallback","radianAngle","Math","PI","totalTime","sin","points","t","x","cos","y","push","useEffect","totalDistance","useMemo","length","maxHeight","max","map","point","_jsxs","className","children","_jsx","type","value","onChange","e","updatedAngle","Number","target","updatedSpeed","Alert","style","width","height","viewBox","d","join","stroke","fill","x1","y1","x2","y2","strokeWidth","fontFamily","fontSize","textAnchor","toFixed","textAlign","padding"],"sourceRoot":""}