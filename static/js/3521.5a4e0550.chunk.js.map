{"version":3,"file":"static/js/3521.5a4e0550.chunk.js","mappings":"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","sources":["webpack://app/./src/routing/site/algo/components/DijkstraGraph/DijkstraGraph.module.css?4098","routing/site/algo/components/DijkstraGraph/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"DijkstraGraph_title__mCmEc\",\"legend\":\"DijkstraGraph_legend__Lh7qj\",\"legendItem\":\"DijkstraGraph_legendItem__MlaD1\",\"legendBox\":\"DijkstraGraph_legendBox__7PvZq\",\"legendVisited\":\"DijkstraGraph_legendVisited__fchnh\",\"legendCurrent\":\"DijkstraGraph_legendCurrent__8slFY\",\"legendEdge\":\"DijkstraGraph_legendEdge__kGVKc\",\"stepCounter\":\"DijkstraGraph_stepCounter__r+EuF\",\"graphContainer\":\"DijkstraGraph_graphContainer__StMsr\",\"node\":\"DijkstraGraph_node__2gPRw\",\"nodeLabel\":\"DijkstraGraph_nodeLabel__dAwby\",\"visited\":\"DijkstraGraph_visited__zBnYS\",\"current\":\"DijkstraGraph_current__eoVLx\",\"edgeWeight\":\"DijkstraGraph_edgeWeight__BvmeZ\"};","import React, { useEffect, useState } from \"react\"\r\nimport styles from \"./DijkstraGraph.module.css\"\r\n\r\nconst Dijkstra = () => {\r\n  const nodes = [\r\n    { id: 0, x: 100, y: 100 },\r\n    { id: 1, x: 300, y: 100 },\r\n    { id: 2, x: 500, y: 100 },\r\n    { id: 3, x: 700, y: 100 },\r\n    { id: 4, x: 200, y: 250 },\r\n    { id: 5, x: 400, y: 250 },\r\n    { id: 6, x: 600, y: 250 },\r\n    { id: 7, x: 800, y: 250 },\r\n    { id: 8, x: 300, y: 400 },\r\n    { id: 9, x: 600, y: 400 },\r\n  ]\r\n\r\n  const edges = [\r\n    { from: 0, to: 1, weight: 4 },\r\n    { from: 0, to: 4, weight: 2 },\r\n    { from: 1, to: 2, weight: 3 },\r\n    { from: 1, to: 5, weight: 2 },\r\n    { from: 2, to: 3, weight: 1 },\r\n    { from: 2, to: 6, weight: 5 },\r\n    { from: 4, to: 5, weight: 3 },\r\n    { from: 5, to: 6, weight: 1 },\r\n    { from: 5, to: 8, weight: 4 },\r\n    { from: 6, to: 9, weight: 2 },\r\n  ]\r\n\r\n  const [visited, setVisited] = useState([])\r\n  const [current, setCurrent] = useState(null)\r\n  const [distances, setDistances] = useState({})\r\n  const [step, setStep] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const runDijkstra = async () => {\r\n      const dist = {}\r\n      nodes.forEach((n) => (dist[n.id] = Infinity))\r\n      dist[0] = 0\r\n\r\n      const pq = [{ id: 0, dist: 0 }]\r\n      const visitedOrder = []\r\n\r\n      while (pq.length) {\r\n        pq.sort((a, b) => a.dist - b.dist)\r\n        const { id } = pq.shift()\r\n\r\n        if (visitedOrder.includes(id)) continue\r\n        visitedOrder.push(id)\r\n\r\n        setCurrent(id)\r\n        setVisited([...visitedOrder])\r\n        setDistances({ ...dist })\r\n        setStep((s) => s + 1)\r\n\r\n        await new Promise((res) => setTimeout(res, 1200))\r\n\r\n        edges.forEach(({ from, to, weight }) => {\r\n          if (from === id && dist[to] > dist[id] + weight) {\r\n            dist[to] = dist[id] + weight\r\n            pq.push({ id: to, dist: dist[to] })\r\n          }\r\n          if (to === id && dist[from] > dist[id] + weight) {\r\n            dist[from] = dist[id] + weight\r\n            pq.push({ id: from, dist: dist[from] })\r\n          }\r\n        })\r\n      }\r\n      setCurrent(null)\r\n    }\r\n\r\n    runDijkstra()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.title}>Dijkstraâ€™s Algorithm ðŸš¦</div>\r\n\r\n      {/* Legend */}\r\n      <div className={styles.legend}>\r\n        <div className={styles.legendItem}>\r\n          <div className={`${styles.legendBox} ${styles.legendVisited}`} />\r\n          <span>Visited</span>\r\n        </div>\r\n        <div className={styles.legendItem}>\r\n          <div className={`${styles.legendBox} ${styles.legendCurrent}`} />\r\n          <span>Current</span>\r\n        </div>\r\n        <div className={styles.legendItem}>\r\n          <div className={`${styles.legendBox} ${styles.legendEdge}`} />\r\n          <span>Active Edge</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Step Counter */}\r\n      <div className={styles.stepCounter}>Step {step}</div>\r\n\r\n      <div className={styles.graphContainer}>\r\n        <svg width=\"900\" height=\"500\">\r\n          {edges.map((edge, i) => (\r\n            <line\r\n              key={i}\r\n              x1={nodes[edge.from].x}\r\n              y1={nodes[edge.from].y}\r\n              x2={nodes[edge.to].x}\r\n              y2={nodes[edge.to].y}\r\n              stroke=\"#ccc\"\r\n              strokeWidth=\"2\"\r\n            />\r\n          ))}\r\n          {edges.map((edge, i) => (\r\n            <text\r\n              key={`w-${i}`}\r\n              x={(nodes[edge.from].x + nodes[edge.to].x) / 2}\r\n              y={(nodes[edge.from].y + nodes[edge.to].y) / 2 - 5}\r\n              className={styles.edgeWeight}\r\n            >\r\n              {edge.weight}\r\n            </text>\r\n          ))}\r\n          {nodes.map((node) => (\r\n            <g key={node.id}>\r\n              <circle\r\n                cx={node.x}\r\n                cy={node.y}\r\n                r=\"22\"\r\n                className={`${styles.node} \r\n                  ${visited.includes(node.id) ? styles.visited : \"\"} \r\n                  ${current === node.id ? styles.current : \"\"}`}\r\n              />\r\n              <text\r\n                x={node.x}\r\n                y={node.y + 5}\r\n                textAnchor=\"middle\"\r\n                className={styles.nodeLabel}\r\n              >\r\n                {node.id} (\r\n                {distances[node.id] === Infinity ? \"âˆž\" : distances[node.id]})\r\n              </text>\r\n            </g>\r\n          ))}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dijkstra\r\n"],"names":["Dijkstra","nodes","id","x","y","edges","from","to","weight","visited","setVisited","useState","current","setCurrent","distances","setDistances","step","setStep","useEffect","async","dist","forEach","n","Infinity","pq","visitedOrder","length","sort","a","b","shift","includes","push","s","Promise","res","setTimeout","_ref","runDijkstra","_jsxs","children","_jsx","className","styles","width","height","map","edge","i","x1","y1","x2","y2","stroke","strokeWidth","node","cx","cy","r","textAnchor"],"sourceRoot":""}