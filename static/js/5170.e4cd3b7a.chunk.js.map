{"version":3,"file":"static/js/5170.e4cd3b7a.chunk.js","mappings":"yJAEA,MAyHA,EAzHoBA,IAAe,IAAd,KAAEC,GAAMD,EAC3B,MAAME,GAAoBC,EAAAA,EAAAA,cAAaC,IACrC,MAAMC,EAAQC,SAASC,eAAe,YAChCC,EAAUF,SAASC,eAAe,eAQlCE,EAPMJ,EAAMK,WAAW,MACPC,aACpBP,EAAMQ,YAAYC,QAClBT,EAAMQ,YAAYE,QAClB,EACA,GAE0BC,KAC5BP,EAAQQ,UAAa,MAAKP,EAAU,YAAYA,EAAU,YAAYA,EAAU,YAAYA,EAAU,IAAI,GACzG,IAEGQ,GAAWd,EAAAA,EAAAA,cAAae,GACrBA,EACJC,QACC,oCACA,CAACC,EAAGC,EAAGC,EAAGC,IAAM,IAAMF,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,IAE3CC,UAAU,GACVC,MAAM,SACNC,KAAKC,GAAMC,SAASD,EAAG,OACzB,IAEGE,GAAY1B,EAAAA,EAAAA,cAChB,CAAC2B,EAAWC,EAAMC,EAAMC,EAAU5B,KAChC,GAAI0B,EAAO,GAAKA,GAAQ1B,EAAM6B,OAASF,EAAO,GAAKA,GAAQ3B,EAAM8B,OAC/D,OAGF,MAAMC,EAAM/B,EAAMK,WAAW,MAEvBD,EADY2B,EAAIzB,aAAaoB,EAAMC,EAAM,EAAG,GACtBjB,KAE5B,GACEN,EAAU,KAAOwB,EAAS,IAC1BxB,EAAU,KAAOwB,EAAS,IAC1BxB,EAAU,KAAOwB,EAAS,GAE1B,OAGF,MAAMI,EAAMpB,EAASa,GACfQ,EAAeF,EAAIG,gBAAgB,EAAG,GACtCC,EAAeF,EAAavB,KAClCyB,EAAa,GAAKH,EAAI,GACtBG,EAAa,GAAKH,EAAI,GACtBG,EAAa,GAAKH,EAAI,GACtBG,EAAa,GAAK,IAElBJ,EAAIK,aAAaH,EAAcP,EAAMC,GAErCU,YACE,IAAMb,EAAUC,EAAWC,EAAO,EAAGC,EAAMC,EAAU5B,IACrD,IAEFqC,YACE,IAAMb,EAAUC,EAAWC,EAAO,EAAGC,EAAO,EAAGC,EAAU5B,IACzD,IAEFqC,YACE,IAAMb,EAAUC,EAAWC,EAAO,EAAGC,EAAO,EAAGC,EAAU5B,IACzD,IAEFqC,YACE,IAAMb,EAAUC,EAAWC,EAAMC,EAAO,EAAGC,EAAU5B,IACrD,IAEFqC,YACE,IAAMb,EAAUC,EAAWC,EAAMC,EAAO,EAAGC,EAAU5B,IACrD,IAEFqC,YACE,IAAMb,EAAUC,EAAWC,EAAO,EAAGC,EAAMC,EAAU5B,IACrD,IAEFqC,YACE,IAAMb,EAAUC,EAAWC,EAAO,EAAGC,EAAO,EAAGC,EAAU5B,IACzD,IAEFqC,YACE,IAAMb,EAAUC,EAAWC,EAAO,EAAGC,EAAO,EAAGC,EAAU5B,IACzD,GACD,GAEH,CAACY,IAGG0B,GAAoBxC,EAAAA,EAAAA,cACvBC,IACC,MAAM2B,EAAO3B,EAAMQ,YAAYC,QACzBmB,EAAO5B,EAAMQ,YAAYE,QAEzBT,EAAQC,SAASC,eAAe,YAGhCqC,EAFMvC,EAAMK,WAAW,MACPC,aAAaoB,EAAMC,EAAM,EAAG,GACpBjB,KAE9Bc,EAAU5B,EAAM8B,EAAMC,EAAMY,EAAavC,EAAM,GAEjD,CAACJ,EAAM4B,IAGT,OACEgB,EAAAA,EAAAA,KAAA,UACEC,GAAG,WACHZ,MAAM,MACNC,OAAO,MACPY,MAAO,CACLC,OAAQ,YACRC,OAAQ,UACRC,OAAQ,kBAEVC,YAAajD,EACbkD,QAAST,GACD,C","sources":["routing/site/algo/components/FloodFill/CanvasImage.jsx"],"sourcesContent":["import React, { useCallback } from \"react\"\n\nconst CanvasImage = ({ fill }) => {\n  const captureMousePixel = useCallback((event) => {\n    const image = document.getElementById(\"cusImage\")\n    const details = document.getElementById(\"detailsPane\")\n    const ctx = image.getContext(\"2d\")\n    const imageData = ctx.getImageData(\n      event.nativeEvent.offsetX,\n      event.nativeEvent.offsetY,\n      1,\n      1\n    )\n    const pixelData = imageData.data\n    details.innerHTML = `R: ${pixelData[0]}<br>G: ${pixelData[1]}<br>B: ${pixelData[2]}<br>A: ${pixelData[3]}`\n  }, [])\n\n  const hexToRgb = useCallback((hex) => {\n    return hex\n      .replace(\n        /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n        (m, r, g, b) => \"#\" + r + r + g + g + b + b\n      )\n      .substring(1)\n      .match(/.{2}/g)\n      .map((x) => parseInt(x, 16))\n  }, [])\n\n  const fillPixel = useCallback(\n    (fillColor, xPos, yPos, firstRgb, image) => {\n      if (xPos < 0 || xPos >= image.width || yPos < 0 || yPos >= image.height) {\n        return\n      }\n\n      const ctx = image.getContext(\"2d\")\n      const imageData = ctx.getImageData(xPos, yPos, 1, 1)\n      const pixelData = imageData.data\n\n      if (\n        pixelData[0] !== firstRgb[0] ||\n        pixelData[1] !== firstRgb[1] ||\n        pixelData[2] !== firstRgb[2]\n      ) {\n        return\n      }\n\n      const rgb = hexToRgb(fillColor)\n      const newImageData = ctx.createImageData(1, 1)\n      const newPixelData = newImageData.data\n      newPixelData[0] = rgb[0]\n      newPixelData[1] = rgb[1]\n      newPixelData[2] = rgb[2]\n      newPixelData[3] = 255\n\n      ctx.putImageData(newImageData, xPos, yPos)\n\n      setTimeout(\n        () => fillPixel(fillColor, xPos + 1, yPos, firstRgb, image),\n        20\n      )\n      setTimeout(\n        () => fillPixel(fillColor, xPos + 1, yPos - 1, firstRgb, image),\n        20\n      )\n      setTimeout(\n        () => fillPixel(fillColor, xPos + 1, yPos + 1, firstRgb, image),\n        20\n      )\n      setTimeout(\n        () => fillPixel(fillColor, xPos, yPos + 1, firstRgb, image),\n        20\n      )\n      setTimeout(\n        () => fillPixel(fillColor, xPos, yPos - 1, firstRgb, image),\n        20\n      )\n      setTimeout(\n        () => fillPixel(fillColor, xPos - 1, yPos, firstRgb, image),\n        20\n      )\n      setTimeout(\n        () => fillPixel(fillColor, xPos - 1, yPos - 1, firstRgb, image),\n        20\n      )\n      setTimeout(\n        () => fillPixel(fillColor, xPos - 1, yPos + 1, firstRgb, image),\n        20\n      )\n    },\n    [hexToRgb]\n  )\n\n  const handleCanvasClick = useCallback(\n    (event) => {\n      const xPos = event.nativeEvent.offsetX\n      const yPos = event.nativeEvent.offsetY\n\n      const image = document.getElementById(\"cusImage\")\n      const ctx = image.getContext(\"2d\")\n      const imageData = ctx.getImageData(xPos, yPos, 1, 1)\n      const originalRgb = imageData.data\n\n      fillPixel(fill, xPos, yPos, originalRgb, image)\n    },\n    [fill, fillPixel]\n  )\n\n  return (\n    <canvas\n      id=\"cusImage\"\n      width=\"360\"\n      height=\"360\"\n      style={{\n        cursor: \"crosshair\",\n        margin: \"5% auto\",\n        border: \"1px solid #bbb\",\n      }}\n      onMouseMove={captureMousePixel}\n      onClick={handleCanvasClick}\n    ></canvas>\n  )\n}\n\nexport default CanvasImage\n"],"names":["_ref","fill","captureMousePixel","useCallback","event","image","document","getElementById","details","pixelData","getContext","getImageData","nativeEvent","offsetX","offsetY","data","innerHTML","hexToRgb","hex","replace","m","r","g","b","substring","match","map","x","parseInt","fillPixel","fillColor","xPos","yPos","firstRgb","width","height","ctx","rgb","newImageData","createImageData","newPixelData","putImageData","setTimeout","handleCanvasClick","originalRgb","_jsx","id","style","cursor","margin","border","onMouseMove","onClick"],"sourceRoot":""}