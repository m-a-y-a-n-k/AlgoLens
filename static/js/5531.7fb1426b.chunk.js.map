{"version":3,"file":"static/js/5531.7fb1426b.chunk.js","mappings":"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","sources":["common/helpers/dimensions.js","routing/site/algo/components/Palindrome/Input.jsx","routing/site/algo/components/Palindrome/index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window\r\n  return {\r\n    width,\r\n    height,\r\n  }\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(() =>\r\n    getWindowDimensions()\r\n  )\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions())\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize)\r\n    return () => window.removeEventListener(\"resize\", handleResize)\r\n  }, [])\r\n\r\n  return windowDimensions\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { makeStyles, fade } from \"@material-ui/core/styles\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardActions from \"@material-ui/core/CardActions\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { FormControl } from \"@material-ui/core\"\r\n\r\n//Card component styling\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 180,\r\n  },\r\n})\r\n\r\n//text input field styling\r\nconst useStylesReddit = makeStyles((theme) => ({\r\n  root: {\r\n    border: \"1px solid #e2e2e1\",\r\n    overflow: \"hidden\",\r\n    borderRadius: 4,\r\n    backgroundColor: \"#fcfcfb\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    \"&:hover\": {\r\n      backgroundColor: \"#fff\",\r\n    },\r\n    \"&$focused\": {\r\n      backgroundColor: \"#fff\",\r\n      boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}))\r\nfunction RedditTextField(props) {\r\n  const classes = useStylesReddit()\r\n\r\n  return (\r\n    <TextField InputProps={{ classes, disableUnderline: true }} {...props} />\r\n  )\r\n}\r\n\r\nconst formStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst textStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst buttonStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst Input = React.memo(({ disabled, checkPalindrome }) => {\r\n  const [input, setInput] = useState(null)\r\n  const classes = useStyles()\r\n  const inputStyle = textStyles()\r\n  const buttonStyle = buttonStyles()\r\n  const formStyle = formStyles()\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <h2 className=\"bg-success text-white p-2\">\r\n        Check whether string is Palindrome\r\n      </h2>\r\n      <h4 className=\"text-primary p-2\">\r\n        A Palindrome reads the same from left to right and right to left\r\n      </h4>\r\n      <CardActions>\r\n        <FormControl className={`pb-3 pr-0 pl-2 pt-1 ${formStyle.root}`}>\r\n          <RedditTextField\r\n            label=\"String\"\r\n            className={inputStyle.root}\r\n            variant=\"filled\"\r\n            id=\"reddit-input-base\"\r\n            onChange={(event) => {\r\n              setInput(event.target.value)\r\n            }}\r\n            value={input ? input : \"\"}\r\n            disabled={disabled}\r\n          />\r\n          <Button\r\n            className={buttonStyle.root}\r\n            disabled={disabled}\r\n            onClick={() => {\r\n              checkPalindrome(input)\r\n              setInput(null)\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </FormControl>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n})\r\n\r\nInput.displayName = \"Palindrome.Input\"\r\n\r\nexport default Input\r\n","import React, { Suspense, lazy, useCallback, useState } from \"react\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { Alert } from \"reactstrap\"\r\nimport Input from \"./Input\"\r\nimport { FixedSizeList as List } from \"react-window\"\r\nimport useWindowDimensions from \"common/helpers/dimensions\"\r\n\r\nconst LazyElement = lazy(() => import(\"common/components/Element\"))\r\n\r\nconst Palindrome = () => {\r\n  const [characters, setCharacters] = useState([])\r\n  const [alert, setAlert] = useState(null)\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  const updateCharacters = (start, end, delay) => {\r\n    setTimeout(() => {\r\n      setCharacters((prevCharacters) => {\r\n        return prevCharacters.map(({ char, highlight }, idx) => {\r\n          if (idx === start || idx === end) {\r\n            return {\r\n              char,\r\n              highlight: true,\r\n            }\r\n          }\r\n          return {\r\n            char,\r\n            highlight,\r\n          }\r\n        })\r\n      })\r\n    }, delay)\r\n  }\r\n\r\n  const checkPalindrome = useCallback((input) => {\r\n    let start = 0,\r\n      end = input.length - 1,\r\n      isPalindrome = true,\r\n      delay = 1000\r\n\r\n    setCharacters(\r\n      input.split(\"\").map((char) => ({\r\n        char,\r\n        highlight: false,\r\n      }))\r\n    )\r\n    setDisabled(true)\r\n    while (start <= end) {\r\n      if (input[start] !== input[end]) {\r\n        setAlert({\r\n          type: \"danger\",\r\n          text: \"Input string is not a Palindrome\",\r\n        })\r\n        setDisabled(false)\r\n        isPalindrome = false\r\n        break\r\n      } else {\r\n        updateCharacters(start, end, delay)\r\n        delay = delay * 1.2\r\n        start++\r\n        end--\r\n      }\r\n    }\r\n    if (isPalindrome) {\r\n      setAlert({\r\n        type: \"success\",\r\n        text: \"Input string is a Palindrome\",\r\n      })\r\n      setDisabled(false)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Grid container>\r\n      {alert && (\r\n        <Grid item xs={12}>\r\n          <Alert\r\n            color={alert.type}\r\n            isOpen={!!alert.text}\r\n            toggle={() => setAlert(null)}\r\n          >\r\n            {alert.text}\r\n          </Alert>\r\n        </Grid>\r\n      )}\r\n      <Grid container className=\"text-center\">\r\n        <Grid item xs={12}>\r\n          <Input checkPalindrome={checkPalindrome} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container className=\"mt-4 mb-4 text-center\">\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <LazyList characters={characters} />\r\n        </Suspense>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst LazyList = ({ characters }) => {\r\n  const { width: innerWidth } = useWindowDimensions()\r\n\r\n  return (\r\n    <List\r\n      height={120}\r\n      itemCount={characters.length}\r\n      itemSize={200}\r\n      width={innerWidth || 800}\r\n      direction=\"horizontal\"\r\n    >\r\n      {({ index, style }) => (\r\n        <Grid item xs={12} style={style}>\r\n          <LazyElement\r\n            highlight={characters[index].highlight}\r\n            data={{ value: characters[index].char, index }}\r\n            type=\"array\"\r\n          />\r\n        </Grid>\r\n      )}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Palindrome\r\n"],"names":["getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","useState","useEffect","handleResize","addEventListener","removeEventListener","useStyles","makeStyles","root","minWidth","useStylesReddit","theme","border","overflow","borderRadius","backgroundColor","transition","transitions","create","boxShadow","fade","palette","primary","main","borderColor","focused","RedditTextField","props","classes","_jsx","TextField","InputProps","disableUnderline","formStyles","margin","spacing","textStyles","buttonStyles","Input","React","_ref","disabled","checkPalindrome","input","setInput","inputStyle","buttonStyle","formStyle","_jsxs","Card","className","variant","children","CardActions","FormControl","label","id","onChange","event","target","value","Button","onClick","color","size","displayName","LazyElement","lazy","LazyList","_ref2","characters","List","itemCount","length","itemSize","direction","_ref3","index","style","Grid","item","xs","highlight","data","char","type","Palindrome","setCharacters","alert","setAlert","setDisabled","updateCharacters","start","end","delay","setTimeout","prevCharacters","map","idx","useCallback","isPalindrome","split","text","container","Alert","isOpen","toggle","Suspense","fallback"],"sourceRoot":""}