{"version":3,"file":"static/js/2679.4df2f7fa.chunk.js","mappings":"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","sources":["webpack://app/./src/routing/site/games/components/Tetris/Tetris.module.css?75d5","routing/site/games/components/Tetris/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Tetris_wrapper__uawXh\",\"header\":\"Tetris_header__h0tPk\",\"title\":\"Tetris_title__EJhxR\",\"controls\":\"Tetris_controls__qKpmH\",\"hud\":\"Tetris_hud__DcURo\",\"stat\":\"Tetris_stat__kcHd4\",\"timerBar\":\"Tetris_timerBar__8ShTi\",\"timerFill\":\"Tetris_timerFill__XzwsF\",\"timerText\":\"Tetris_timerText__zIU7A\",\"bossBox\":\"Tetris_bossBox__-O7Mb\",\"bossName\":\"Tetris_bossName__CskHG\",\"bossTaunt\":\"Tetris_bossTaunt__92t7R\",\"bonusPill\":\"Tetris_bonusPill__Yu197\",\"stage\":\"Tetris_stage__VrwAF\",\"board\":\"Tetris_board__QGoPI\",\"row\":\"Tetris_row__3cjJ+\",\"cell\":\"Tetris_cell__XZ2xT\",\"empty\":\"Tetris_empty__DVMvN\",\"ghost\":\"Tetris_ghost__2QLrn\",\"filled\":\"Tetris_filled__WdcGV\",\"sidebar\":\"Tetris_sidebar__h4CIk\",\"panel\":\"Tetris_panel__nKxHu\",\"panelTitle\":\"Tetris_panelTitle__YhhBv\",\"panelBody\":\"Tetris_panelBody__xmdtF\",\"tauntSm\":\"Tetris_tauntSm__ww3Hy\",\"metaRow\":\"Tetris_metaRow__hB-vY\",\"nextList\":\"Tetris_nextList__utyMh\",\"miniPiece\":\"Tetris_miniPiece__l7qcV\",\"miniRow\":\"Tetris_miniRow__EOHNE\",\"miniCell\":\"Tetris_miniCell__uKekQ\",\"miniEmpty\":\"Tetris_miniEmpty__gsIQm\",\"miniFilled\":\"Tetris_miniFilled__VuZzj\",\"holdBox\":\"Tetris_holdBox__UZ6R2\",\"holdEmpty\":\"Tetris_holdEmpty__hbnLd\",\"gameOver\":\"Tetris_gameOver__dmqPm\",\"victory\":\"Tetris_victory__-gpXq\"};","import React, { useEffect, useMemo, useState } from \"react\"\r\nimport styles from \"./Tetris.module.css\"\r\n\r\nconst COLS = 10\r\nconst ROWS = 20\r\nconst EMPTY = 0 // empty marker\r\nconst MAX_LEVEL = 50\r\n\r\nconst TETROMINOES = {\r\n  I: {\r\n    color: \"#5ab3ff\",\r\n    shapes: [\r\n      [\r\n        [0, 0, 0, 0],\r\n        [1, 1, 1, 1],\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0, 0],\r\n        [0, 1, 0, 0],\r\n        [0, 1, 0, 0],\r\n        [0, 1, 0, 0],\r\n      ],\r\n    ],\r\n  },\r\n  J: {\r\n    color: \"#7fb4ff\",\r\n    shapes: [\r\n      [\r\n        [1, 0, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 1],\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n      ],\r\n      [\r\n        [0, 0, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 1],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n        [1, 1, 0],\r\n      ],\r\n    ],\r\n  },\r\n  L: {\r\n    color: \"#ffc857\",\r\n    shapes: [\r\n      [\r\n        [0, 0, 1],\r\n        [1, 1, 1],\r\n        [0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n        [0, 1, 1],\r\n      ],\r\n      [\r\n        [0, 0, 0],\r\n        [1, 1, 1],\r\n        [1, 0, 0],\r\n      ],\r\n      [\r\n        [1, 1, 0],\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n      ],\r\n    ],\r\n  },\r\n  O: {\r\n    color: \"#ffb02e\",\r\n    shapes: [\r\n      [\r\n        [1, 1],\r\n        [1, 1],\r\n      ],\r\n    ],\r\n  },\r\n  S: {\r\n    color: \"#4ad6a7\",\r\n    shapes: [\r\n      [\r\n        [0, 1, 1],\r\n        [1, 1, 0],\r\n        [0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [0, 1, 1],\r\n        [0, 0, 1],\r\n      ],\r\n    ],\r\n  },\r\n  T: {\r\n    color: \"#b694ff\",\r\n    shapes: [\r\n      [\r\n        [0, 1, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [0, 1, 1],\r\n        [0, 1, 0],\r\n      ],\r\n      [\r\n        [0, 0, 0],\r\n        [1, 1, 1],\r\n        [0, 1, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [1, 1, 0],\r\n        [0, 1, 0],\r\n      ],\r\n    ],\r\n  },\r\n  Z: {\r\n    color: \"#ff6b6b\",\r\n    shapes: [\r\n      [\r\n        [1, 1, 0],\r\n        [0, 1, 1],\r\n        [0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 0, 1],\r\n        [0, 1, 1],\r\n        [0, 1, 0],\r\n      ],\r\n    ],\r\n  },\r\n}\r\nconst BAG_KEYS = Object.keys(TETROMINOES)\r\n\r\n// ——————————— Utility helpers ———————————\r\nconst makeEmptyBoard = () =>\r\n  Array.from({ length: ROWS }, () => Array(COLS).fill(EMPTY))\r\n\r\nfunction randomBag() {\r\n  const bag = [...BAG_KEYS]\r\n  for (let i = bag.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[bag[i], bag[j]] = [bag[j], bag[i]]\r\n  }\r\n  return bag\r\n}\r\n\r\nfunction rotate(shape, dir = 1) {\r\n  const N = shape.length\r\n  const res = Array.from({ length: N }, () => Array(N).fill(0))\r\n  for (let y = 0; y < N; y++) {\r\n    for (let x = 0; x < N; x++) {\r\n      if (dir > 0) res[x][N - 1 - y] = shape[y][x]\r\n      else res[N - 1 - x][y] = shape[y][x]\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nconst cloneBoard = (b) => b.map((r) => [...r])\r\n\r\nfunction canPlace(board, shape, px, py) {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (!shape[y][x]) continue\r\n      const nx = px + x\r\n      const ny = py + y\r\n      if (nx < 0 || nx >= COLS || ny >= ROWS) return false\r\n      if (ny >= 0 && board[ny][nx] !== EMPTY) return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction placePiece(board, shape, px, py, color) {\r\n  const out = cloneBoard(board)\r\n  for (let y = 0; y < shape.length; y++) {\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (!shape[y][x]) continue\r\n      const nx = px + x\r\n      const ny = py + y\r\n      if (ny >= 0) out[ny][nx] = color\r\n    }\r\n  }\r\n  return out\r\n}\r\n\r\nfunction clearLines(board) {\r\n  const remaining = board.filter((row) => row.some((c) => c === EMPTY))\r\n  const cleared = ROWS - remaining.length\r\n  const newRows = Array.from({ length: cleared }, () => Array(COLS).fill(EMPTY))\r\n  return { board: [...newRows, ...remaining], cleared }\r\n}\r\n\r\nfunction spawnPiece(key) {\r\n  const def = TETROMINOES[key]\r\n  const shape = def.shapes[0].map((r) => [...r])\r\n  const size = shape[0].length\r\n  return {\r\n    key,\r\n    color: def.color,\r\n    rotationIndex: 0,\r\n    shape,\r\n    x: Math.floor((COLS - size) / 2),\r\n    y: -2,\r\n  }\r\n}\r\n\r\n// Boss + difficulty\r\nfunction levelTimeLimit(level, isBonus) {\r\n  if (isBonus) return Math.max(240, 180 - Math.floor(level * 0.6))\r\n  return Math.max(360, 360 - level * 2)\r\n}\r\nfunction gravityForLevel(level) {\r\n  const base = 900 // ms\r\n  const step = 18 // per level faster\r\n  return Math.max(120, base - (level - 1) * step)\r\n}\r\nconst bossNames = [\r\n  \"Bitcrusher\",\r\n  \"Latency Lord\",\r\n  \"Null Pointer\",\r\n  \"Stack Smasher\",\r\n  \"Garbage Colossus\",\r\n  \"Packet Phantom\",\r\n  \"Heisen-Bug\",\r\n  \"Kernel Kraken\",\r\n  \"Cache Minotaur\",\r\n  \"Daemon Duke\",\r\n]\r\nconst bossTaunts = [\r\n  \"Feel the overclock!\",\r\n  \"I throttle time itself.\",\r\n  \"Your stack will overflow.\",\r\n  \"My speed is inevitable.\",\r\n  \"I'll fragment your hopes.\",\r\n  \"Packets lost, dreams gone.\",\r\n  \"Observe non-determinism!\",\r\n  \"Segfaulting your plans.\",\r\n  \"Cache this L.\",\r\n  \"Daemon time!\",\r\n]\r\nconst bossNameFor = (lvl) =>\r\n  `${bossNames[(lvl - 1) % bossNames.length]} v${lvl}`\r\nconst bossTauntFor = (lvl) => bossTaunts[(lvl - 1) % bossTaunts.length]\r\n\r\n// ——————————— Component ———————————\r\nexport default function TetrisBossRush() {\r\n  // board + pieces\r\n  const [board, setBoard] = useState(makeEmptyBoard())\r\n  const [bag, setBag] = useState(randomBag())\r\n  const [nextBag, setNextBag] = useState(randomBag())\r\n  const [queue, setQueue] = useState(() => {\r\n    const b = randomBag()\r\n    return b\r\n  })\r\n  const [current, setCurrent] = useState(() => spawnPiece(queue[0]))\r\n  const [hold, setHold] = useState(null)\r\n  const [canHold, setCanHold] = useState(true)\r\n\r\n  // meta\r\n  const [level, setLevel] = useState(1)\r\n  const [linesThisLevel, setLinesThisLevel] = useState(0)\r\n  const [score, setScore] = useState(0)\r\n  const [timeLeft, setTimeLeft] = useState(levelTimeLimit(1, false))\r\n  const [paused, setPaused] = useState(false)\r\n  const [gameOver, setGameOver] = useState(false)\r\n  const [medal, setMedal] = useState(false)\r\n  const [isBonus, setIsBonus] = useState(false)\r\n  const [bonusAchieved, setBonusAchieved] = useState(false)\r\n  const [bossRage, setBossRage] = useState(false)\r\n\r\n  // difficulty\r\n  const gravityMs = useMemo(\r\n    () => gravityForLevel(level) * (bossRage ? 0.5 : 1),\r\n    [level, bossRage]\r\n  )\r\n  const goalLines = isBonus ? 6 : 10\r\n\r\n  // ——— queue helpers\r\n  function shiftQueue() {\r\n    let q = [...queue]\r\n    let b = [...bag]\r\n    let nb = [...nextBag]\r\n\r\n    let key = q.shift()\r\n    if (q.length < 3) {\r\n      if (b.length === 0) {\r\n        b = nb\r\n        nb = randomBag()\r\n      }\r\n      q = [...q, ...b.splice(0, Math.min(7, b.length))]\r\n    }\r\n\r\n    setQueue(q)\r\n    setBag(b)\r\n    setNextBag(nb)\r\n    return key\r\n  }\r\n\r\n  function startLevel(lvl) {\r\n    const bonus = lvl % 5 === 0\r\n    setIsBonus(bonus)\r\n    setBonusAchieved(false)\r\n    setLinesThisLevel(0)\r\n    setBoard(makeEmptyBoard())\r\n    const nextKey = shiftQueue()\r\n    setCurrent(spawnPiece(nextKey))\r\n    setTimeLeft(levelTimeLimit(lvl, bonus))\r\n    setPaused(false)\r\n    setGameOver(false)\r\n    setCanHold(true)\r\n  }\r\n\r\n  // init\r\n  useEffect(() => {\r\n    startLevel(1)\r\n  }, [])\r\n\r\n  // gravity loop\r\n  useEffect(() => {\r\n    if (paused || gameOver || medal) return\r\n    const id = setInterval(() => {\r\n      setCurrent((cur) => {\r\n        if (!cur) return cur\r\n        const ny = cur.y + 1\r\n        if (canPlace(board, cur.shape, cur.x, ny)) return { ...cur, y: ny }\r\n        // lock\r\n        const placed = placePiece(board, cur.shape, cur.x, cur.y, cur.color)\r\n        const { board: clearedBoard, cleared } = clearLines(placed)\r\n\r\n        if (cleared > 0) {\r\n          const base = [0, 100, 300, 500, 800][cleared]\r\n          const timeGain = [0, 2, 5, 8, 12][cleared]\r\n          const mult = isBonus && bonusAchieved ? 2 : 1\r\n          setScore((s) => s + base * level * mult)\r\n          setLinesThisLevel((n) => n + cleared)\r\n          setTimeLeft((t) =>\r\n            Math.min(levelTimeLimit(level, isBonus), t + timeGain)\r\n          )\r\n        }\r\n\r\n        setBoard(clearedBoard)\r\n        setCanHold(true)\r\n\r\n        const nextKey = shiftQueue()\r\n        const next = spawnPiece(nextKey)\r\n        if (!canPlace(clearedBoard, next.shape, next.x, next.y)) {\r\n          setGameOver(true)\r\n          return cur\r\n        }\r\n        return next\r\n      })\r\n    }, gravityMs)\r\n    return () => clearInterval(id)\r\n  }, [board, gravityMs, paused, gameOver, medal, isBonus, bonusAchieved, level])\r\n\r\n  // boss rage pulses\r\n  useEffect(() => {\r\n    if (paused || gameOver || medal) return\r\n    const rageInterval = setInterval(() => {\r\n      setBossRage(true)\r\n      const calm = setTimeout(() => setBossRage(false), 4000)\r\n      return () => clearTimeout(calm)\r\n    }, 12000)\r\n    return () => clearInterval(rageInterval)\r\n  }, [paused, gameOver, medal, level])\r\n\r\n  // countdown\r\n  useEffect(() => {\r\n    if (paused || gameOver || medal) return\r\n    const tid = setInterval(() => {\r\n      setTimeLeft((t) => {\r\n        if (t <= 1) {\r\n          setGameOver(true)\r\n          return 0\r\n        }\r\n        return t - 1\r\n      })\r\n    }, 1000)\r\n    return () => clearInterval(tid)\r\n  }, [paused, gameOver, medal])\r\n\r\n  // progression\r\n  useEffect(() => {\r\n    if (gameOver || medal) return\r\n    if (linesThisLevel >= goalLines) {\r\n      if (isBonus) setBonusAchieved(true)\r\n      const next = level + 1\r\n      if (next > MAX_LEVEL) {\r\n        setMedal(true)\r\n        setPaused(true)\r\n        return\r\n      }\r\n      setLevel(next)\r\n      startLevel(next)\r\n    }\r\n  }, [linesThisLevel])\r\n\r\n  // controls\r\n  useEffect(() => {\r\n    function onKey(e) {\r\n      if (e.repeat) return\r\n      if (e.key === \"p\" || e.key === \"P\") {\r\n        setPaused((v) => !v)\r\n        return\r\n      }\r\n      if (e.key === \"r\" || e.key === \"R\") {\r\n        setLevel(1)\r\n        setScore(0)\r\n        setMedal(false)\r\n        startLevel(1)\r\n        return\r\n      }\r\n      if (paused || gameOver || medal) return\r\n\r\n      setCurrent((cur) => {\r\n        if (!cur) return cur\r\n        const tryMove = (nx, ny, nshape = cur.shape) =>\r\n          canPlace(board, nshape, nx, ny)\r\n            ? { ...cur, x: nx, y: ny, shape: nshape }\r\n            : cur\r\n        switch (e.key) {\r\n          case \"ArrowLeft\":\r\n          case \"a\":\r\n          case \"A\":\r\n            return tryMove(cur.x - 1, cur.y)\r\n          case \"ArrowRight\":\r\n          case \"d\":\r\n          case \"D\":\r\n            return tryMove(cur.x + 1, cur.y)\r\n          case \"ArrowDown\":\r\n          case \"s\":\r\n          case \"S\":\r\n            return tryMove(cur.x, cur.y + 1)\r\n          case \"ArrowUp\":\r\n          case \"w\":\r\n          case \"W\": {\r\n            let rotated = rotate(cur.shape, 1)\r\n            const kicks = [\r\n              [0, 0],\r\n              [-1, 0],\r\n              [1, 0],\r\n              [0, -1],\r\n              [-2, 0],\r\n              [2, 0],\r\n            ]\r\n            for (const [dx, dy] of kicks)\r\n              if (canPlace(board, rotated, cur.x + dx, cur.y + dy))\r\n                return { ...cur, shape: rotated, x: cur.x + dx, y: cur.y + dy }\r\n            return cur\r\n          }\r\n          case \"z\":\r\n          case \"Z\": {\r\n            const rotated = rotate(cur.shape, -1)\r\n            if (canPlace(board, rotated, cur.x, cur.y))\r\n              return { ...cur, shape: rotated }\r\n            return cur\r\n          }\r\n          case \"x\":\r\n          case \"X\": {\r\n            const rotated = rotate(cur.shape, 1)\r\n            if (canPlace(board, rotated, cur.x, cur.y))\r\n              return { ...cur, shape: rotated }\r\n            return cur\r\n          }\r\n          case \"c\":\r\n          case \"C\": {\r\n            // hold\r\n            if (!canHold) return cur\r\n            setCanHold(false)\r\n            if (!hold) {\r\n              setHold({ key: cur.key, color: cur.color, shape: cur.shape })\r\n              const nextKey = shiftQueue()\r\n              return spawnPiece(nextKey)\r\n            } else {\r\n              const swapKey = hold.key\r\n              setHold({ key: cur.key, color: cur.color, shape: cur.shape })\r\n              const swapped = spawnPiece(swapKey)\r\n              if (canPlace(board, swapped.shape, swapped.x, swapped.y))\r\n                return swapped\r\n              return cur\r\n            }\r\n          }\r\n          case \" \": {\r\n            let ny = cur.y\r\n            while (canPlace(board, cur.shape, cur.x, ny + 1)) ny++\r\n            return { ...cur, y: ny }\r\n          }\r\n          default:\r\n            return cur\r\n        }\r\n      })\r\n    }\r\n    window.addEventListener(\"keydown\", onKey)\r\n    return () => window.removeEventListener(\"keydown\", onKey)\r\n  }, [board, paused, gameOver, medal, canHold, hold])\r\n\r\n  // derived\r\n  const ghostY = useMemo(() => {\r\n    if (!current) return 0\r\n    let ny = current.y\r\n    while (canPlace(board, current.shape, current.x, ny + 1)) ny++\r\n    return ny\r\n  }, [board, current])\r\n\r\n  const upcoming = useMemo(() => queue.slice(0, 5), [queue])\r\n\r\n  const cellsToRender = useMemo(() => {\r\n    const temp = cloneBoard(board)\r\n    // ghost\r\n    if (current) {\r\n      for (let y = 0; y < current.shape.length; y++) {\r\n        for (let x = 0; x < current.shape[y].length; x++) {\r\n          if (!current.shape[y][x]) continue\r\n          const gx = current.x + x\r\n          const gy = ghostY + y\r\n          if (gy >= 0 && temp[gy][gx] === EMPTY) temp[gy][gx] = \"ghost\"\r\n        }\r\n      }\r\n      // active\r\n      for (let y = 0; y < current.shape.length; y++) {\r\n        for (let x = 0; x < current.shape[y].length; x++) {\r\n          if (!current.shape[y][x]) continue\r\n          const ax = current.x + x\r\n          const ay = current.y + y\r\n          if (ay >= 0) temp[ay][ax] = current.color\r\n        }\r\n      }\r\n    }\r\n    return temp\r\n  }, [board, current, ghostY])\r\n\r\n  // ——————————— Render ———————————\r\n  const bossName = bossNameFor(level)\r\n  const bossTaunt = bossTauntFor(level)\r\n\r\n  const Cell = ({ val }) => (\r\n    <div\r\n      className={`${styles.cell} ${\r\n        val === EMPTY\r\n          ? styles.empty\r\n          : val === \"ghost\"\r\n          ? styles.ghost\r\n          : styles.filled\r\n      }`}\r\n      style={val && val !== \"ghost\" ? { backgroundColor: val } : {}}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.header}>\r\n        <div className={styles.title}>Tetris: Boss Rush</div>\r\n        <div className={styles.controls}>\r\n          <span>\r\n            Controls: ← → move • ↓ soft drop • ↑/Z/X rotate • Space hard drop •\r\n            C hold • P pause • R restart\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.hud}>\r\n        <div className={styles.stat}>\r\n          <span>Level</span>\r\n          <strong>{level}</strong>\r\n        </div>\r\n        <div className={styles.stat}>\r\n          <span>Score</span>\r\n          <strong>{score}</strong>\r\n        </div>\r\n        <div className={styles.stat}>\r\n          <span>Lines</span>\r\n          <strong>\r\n            {linesThisLevel}/{goalLines}\r\n          </strong>\r\n        </div>\r\n        <div className={styles.timerBar}>\r\n          <div\r\n            className={styles.timerFill}\r\n            style={{\r\n              width: `${(timeLeft / levelTimeLimit(level, isBonus)) * 100}%`,\r\n            }}\r\n          />\r\n          <div className={styles.timerText}>{timeLeft}s</div>\r\n        </div>\r\n        <div className={styles.bossBox} data-rage={bossRage ? \"1\" : \"0\"}>\r\n          <div className={styles.bossName}>{bossName}</div>\r\n          <div className={styles.bossTaunt}>{bossTaunt}</div>\r\n        </div>\r\n        {isBonus && (\r\n          <div className={styles.bonusPill}>\r\n            {bonusAchieved ? \"2x Active!\" : \"Bonus Stage\"}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className={styles.stage}>\r\n        <div className={styles.board}>\r\n          {cellsToRender.map((row, y) => (\r\n            <div key={y} className={styles.row}>\r\n              {row.map((v, x) => (\r\n                <Cell key={`${x}-${y}`} val={v} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <aside className={styles.sidebar}>\r\n          <div className={styles.panel}>\r\n            <div className={styles.panelTitle}>Next</div>\r\n            <div className={styles.nextList}>\r\n              {upcoming.map((k, i) => (\r\n                <div key={i} className={styles.miniPiece}>\r\n                  {TETROMINOES[k].shapes[0].map((r, ry) => (\r\n                    <div key={ry} className={styles.miniRow}>\r\n                      {r.map((c, rx) => (\r\n                        <div\r\n                          key={rx}\r\n                          className={`${styles.miniCell} ${\r\n                            c ? styles.miniFilled : styles.miniEmpty\r\n                          }`}\r\n                          style={\r\n                            c ? { backgroundColor: TETROMINOES[k].color } : {}\r\n                          }\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.panel}>\r\n            <div className={styles.panelTitle}>Hold</div>\r\n            <div className={styles.holdBox}>\r\n              {hold ? (\r\n                TETROMINOES[hold.key].shapes[0].map((r, ry) => (\r\n                  <div key={ry} className={styles.miniRow}>\r\n                    {r.map((c, rx) => (\r\n                      <div\r\n                        key={rx}\r\n                        className={`${styles.miniCell} ${\r\n                          c ? styles.miniFilled : styles.miniEmpty\r\n                        }`}\r\n                        style={\r\n                          c\r\n                            ? { backgroundColor: TETROMINOES[hold.key].color }\r\n                            : {}\r\n                        }\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className={styles.holdEmpty}>—</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.panel}>\r\n            <div className={styles.panelTitle}>Boss</div>\r\n            <div className={styles.panelBody}>\r\n              <div>\r\n                <strong>{bossName}</strong>\r\n              </div>\r\n              <div className={styles.tauntSm}>{bossTaunt}</div>\r\n              <div className={styles.metaRow}>\r\n                <span>Rage</span>\r\n                <span>{bossRage ? \"ON\" : \"off\"}</span>\r\n              </div>\r\n              <div className={styles.metaRow}>\r\n                <span>Stage</span>\r\n                <span>{isBonus ? \"Bonus\" : \"Normal\"}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {gameOver && (\r\n            <div className={styles.gameOver}>\r\n              ⏳ Time&apos;s up! Press R to retry\r\n            </div>\r\n          )}\r\n          {medal && (\r\n            <div className={styles.victory}>\r\n              🏅 You cleared {MAX_LEVEL} bosses! Medal unlocked!\r\n            </div>\r\n          )}\r\n        </aside>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["TETROMINOES","I","color","shapes","J","L","O","S","T","Z","BAG_KEYS","Object","keys","makeEmptyBoard","Array","from","length","fill","randomBag","bag","i","j","Math","floor","random","rotate","shape","dir","arguments","undefined","N","res","y","x","cloneBoard","b","map","r","canPlace","board","px","py","nx","ny","spawnPiece","key","def","size","rotationIndex","levelTimeLimit","level","isBonus","max","bossNames","bossTaunts","TetrisBossRush","setBoard","useState","setBag","nextBag","setNextBag","queue","setQueue","current","setCurrent","hold","setHold","canHold","setCanHold","setLevel","linesThisLevel","setLinesThisLevel","score","setScore","timeLeft","setTimeLeft","paused","setPaused","gameOver","setGameOver","medal","setMedal","setIsBonus","bonusAchieved","setBonusAchieved","bossRage","setBossRage","gravityMs","useMemo","gravityForLevel","goalLines","shiftQueue","q","nb","shift","splice","min","startLevel","lvl","bonus","nextKey","useEffect","id","setInterval","cur","placed","out","placePiece","clearedBoard","cleared","remaining","filter","row","some","c","clearLines","base","timeGain","mult","s","n","t","next","clearInterval","rageInterval","calm","setTimeout","clearTimeout","tid","onKey","e","repeat","tryMove","nshape","rotated","kicks","dx","dy","swapKey","swapped","v","window","addEventListener","removeEventListener","ghostY","upcoming","slice","cellsToRender","temp","gx","gy","ax","ay","bossName","bossTaunt","bossTauntFor","Cell","_ref","val","_jsx","className","styles","style","backgroundColor","_jsxs","children","width","k","ry","rx"],"sourceRoot":""}