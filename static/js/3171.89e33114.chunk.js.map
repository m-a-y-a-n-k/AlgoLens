{"version":3,"file":"static/js/3171.89e33114.chunk.js","mappings":"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","sources":["routing/site/math/components/3DEquationPlotter/EquationInput.jsx","routing/site/math/components/3DEquationPlotter/generatePoints.worker.js","routing/site/math/components/3DEquationPlotter/Plot3D.jsx","routing/site/math/components/3DEquationPlotter/index.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\"\nimport { evaluate } from \"mathjs\"\n\nconst EquationInput = ({ onEquationChange }) => {\n  const [input, setInput] = useState(\"\")\n  const [error, setError] = useState(\"\")\n\n  const handleChange = (e) => {\n    setInput(e.target.value)\n  }\n\n  const debounce = (func, delay) => {\n    let timeoutId\n    return (...args) => {\n      if (timeoutId) clearTimeout(timeoutId)\n      timeoutId = setTimeout(() => func(...args), delay)\n    }\n  }\n\n  const debouncedEquationChange = useCallback(debounce(onEquationChange, 500), [\n    onEquationChange,\n  ])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    try {\n      evaluate(input.replace(/x|y/g, \"0\"))\n      setError(\"\")\n      debouncedEquationChange(input)\n    } catch (err) {\n      setError(\"Invalid equation. Please enter a valid equation.\")\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"equation-input\">\n      <input\n        type=\"text\"\n        value={input}\n        onChange={handleChange}\n        placeholder=\"Enter equation (e.g., z = x^2 + y^2)\"\n      />\n      <button type=\"submit\">Plot</button>\n      <button\n        type=\"reset\"\n        onClick={() => {\n          setInput(\"\")\n          debouncedEquationChange(\"\")\n        }}\n      >\n        Clear\n      </button>\n      {error && <p className=\"error-message\">{error}</p>}\n    </form>\n  )\n}\n\nexport default EquationInput\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/generatePoints.worker.d55d9a9d.worker.js\");\n}\n","import React, { useState, useEffect, useRef } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { OrbitControls } from \"@react-three/drei\"\nimport * as THREE from \"three\"\nimport Worker from \"worker-loader!./generatePoints.worker\"\n\nconst Plot3D = ({ equation, precision = 0.5 }) => {\n  const [points, setPoints] = useState([])\n  const meshRef = useRef()\n  const ambientLightRef = useRef()\n  const pointLightRef = useRef()\n  const gridHelperRef = useRef()\n  const axesHelperRef = useRef()\n  const cameraRef = useRef()\n  const sphereMeshRef = useRef()\n  const sphereGeometryRef = useRef()\n\n  useEffect(() => {\n    const worker = new Worker()\n\n    worker.onmessage = (e) => {\n      const pointsArray = e.data.map(\n        ({ x, y, z }) => new THREE.Vector3(x, y, z)\n      )\n      setPoints(pointsArray)\n    }\n\n    worker.postMessage({ equation, precision })\n\n    return () => worker.terminate()\n  }, [equation, precision])\n\n  useEffect(() => {\n    if (meshRef.current && points.length > 0) {\n      ambientLightRef.current.intensity = 0.8\n      pointLightRef.current.position.set(0, 0, 0)\n      gridHelperRef.current.args = [0, 0]\n      axesHelperRef.current.args = [0]\n      sphereMeshRef.current.position.set(0, 0, 0)\n      sphereGeometryRef.current.args = [0, 0, 0]\n      const positions = new Float32Array(points.length * 3)\n      points.forEach((point, i) => {\n        positions[i * 3] = point.x\n        positions[i * 3 + 1] = point.y\n        positions[i * 3 + 2] = point.z\n      })\n\n      meshRef.current.geometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(positions, 3)\n      )\n      meshRef.current.geometry.attributes.position.needsUpdate = true\n    }\n  }, [points])\n\n  return (\n    <Canvas>\n      <ambientLight ref={ambientLightRef} />\n      <pointLight ref={pointLightRef} />\n      <points ref={meshRef}>\n        <bufferGeometry />\n        <pointsMaterial color=\"red\" size={0.5} />\n      </points>\n      <gridHelper ref={gridHelperRef} />\n      <axesHelper ref={axesHelperRef} />\n      <OrbitControls enableZoom={false} enablePan={false} ref={cameraRef} />\n      <mesh ref={sphereMeshRef}>\n        <sphereGeometry ref={sphereGeometryRef} />\n        <meshBasicMaterial color=\"blue\" />\n      </mesh>\n    </Canvas>\n  )\n}\n\nexport default Plot3D\n","import React, { Suspense, useState } from \"react\"\nimport \"./Plotter.css\"\nimport EquationInput from \"./EquationInput\"\nimport Plot3D from \"./Plot3D\"\n\nconst App = () => {\n  const [equation, setEquation] = useState(\"\")\n\n  const handleEquationChange = (newEquation) => {\n    setEquation(newEquation)\n  }\n\n  return (\n    <div className=\"Plotter\">\n      <h1>3D Equation Plotter in x , y and z</h1>\n      <EquationInput onEquationChange={handleEquationChange} />\n      {equation && (\n        <Suspense fallback={<div>Loading plot...</div>}>\n          <Plot3D equation={equation} />\n        </Suspense>\n      )}\n    </div>\n  )\n}\n\nexport default App\n"],"names":["_ref","onEquationChange","input","setInput","useState","error","setError","debouncedEquationChange","useCallback","debounce","func","delay","timeoutId","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","_jsxs","onSubmit","e","preventDefault","evaluate","replace","err","className","children","_jsx","type","value","onChange","target","placeholder","onClick","Worker_fn","Worker","equation","precision","points","setPoints","meshRef","useRef","ambientLightRef","pointLightRef","gridHelperRef","axesHelperRef","cameraRef","sphereMeshRef","sphereGeometryRef","useEffect","worker","onmessage","pointsArray","data","map","_ref2","x","y","z","THREE","postMessage","terminate","current","intensity","position","set","positions","Float32Array","forEach","point","i","geometry","setAttribute","attributes","needsUpdate","Canvas","ref","color","size","OrbitControls","enableZoom","enablePan","App","setEquation","EquationInput","newEquation","Suspense","fallback","Plot3D"],"sourceRoot":""}