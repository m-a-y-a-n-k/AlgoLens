{"version":3,"file":"static/js/9627.8b015e55.chunk.js","mappings":"8JAIA,MAAMA,EACD,OADCA,EAED,SAiGL,EA9FaC,KACX,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,IAC1CC,EAAMC,IAAWF,EAAAA,EAAAA,UACtBG,MAAMC,KAAK,CAAEC,OAAQ,IAAK,IAAMF,MAAM,GAAGG,KAAKV,OAEzCW,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,MAC7BS,EAAUR,EAAKS,KAAKC,GACxBA,EAAID,KAAI,CAACE,EAAMC,KACb,IAAIC,EAAS,EAQb,OAPIF,IAAShB,GACXkB,GAAUH,EAAII,QAAQC,GAAMA,IAAMpB,IAAUS,OAAS,EACrDS,GAAUb,EAAKS,KAAKO,GAAMA,EAAEJ,KAAIE,QAAQC,GAAMA,IAAMpB,IAAUS,OAAS,IAEvES,GAAUH,EAAII,QAAQC,GAAMA,IAAMpB,IAAUS,OAC5CS,GAAUb,EAAKS,KAAKO,GAAMA,EAAEJ,KAAIE,QAAQC,GAAMA,IAAMpB,IAAUS,QAEzDS,CAAM,MAIXI,GAA2BC,EAAAA,EAAAA,cAAaC,IAC5C,MAAMC,EAAQC,SAASF,EAAEG,OAAOF,OAC5BA,EAAQ,GAAKA,EAAQ,EACvBb,EAAS,CACPgB,KAAM,8CACNC,KAAM,YAIV1B,EAAgBsB,GAChBnB,EAAQC,MAAMC,KAAK,CAAEC,OAAQgB,IAAS,IAAMlB,MAAMkB,GAAOf,KAAKV,MAAW,GACxE,IAEG8B,GAAaP,EAAAA,EAAAA,cACjB,CAACN,EAAGc,KACF,MAAMC,EAAU3B,EAAKS,KAAI,CAACC,EAAKkB,IAC7BlB,EAAID,KAAI,CAACE,EAAMkB,IACTD,IAAaF,GAAKG,IAAajB,EAC1BD,IAAShB,EAAWA,EAAWA,EAEjCgB,MAGXV,EAAQ0B,EAAQ,GAElB,CAAC3B,IAGH,OACE8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,gCACyB,KAC9BC,EAAAA,EAAAA,KAAA,SACET,KAAK,SACLJ,MAAOvB,EACPqC,SAAUjB,EACVkB,IAAI,IACJC,IAAI,UAGRH,EAAAA,EAAAA,KAAA,OACEF,UAAU,OACVM,MAAO,CACLC,oBAAsB,UAASzC,yBAC/BmC,SAEDhC,EAAKS,KAAI,CAACC,EAAKgB,KACdO,EAAAA,EAAAA,KAAA,OAAaF,UAAU,MAAKC,SACzBtB,EAAID,KAAI,CAACE,EAAMC,KACdkB,EAAAA,EAAAA,MAAA,OAEEC,UAAY,SAAOpB,IAAShB,EAAW,IAAM,KAC7C4C,QAASA,IAAMd,EAAWb,EAAGc,GAAGM,SAAA,CAE/BrB,EAAK,KAAGH,EAAQkB,GAAGd,GAAG,MAJjB,GAAEA,KAAKc,QAHTA,OAabpB,IACC2B,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACJhB,KAAMlB,EAAMkB,KACZiB,SAAUnC,EAAMiB,KAChBmB,OAAQA,IAAMnC,EAAS,MAAMyB,SAE5B1B,EAAMiB,SAGP,C","sources":["routing/site/games/components/PrisonerDilemma/index.jsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\"\r\nimport { Alert } from \"reactstrap\"\r\nimport \"./Game.css\"\r\n\r\nconst Choice = {\r\n  C: \"HELP\",\r\n  D: \"BETRAY\",\r\n}\r\n\r\nconst Game = () => {\r\n  const [numPrisoners, setNumPrisoners] = useState(2)\r\n  const [grid, setGrid] = useState(\r\n    Array.from({ length: 2 }, () => Array(2).fill(Choice.C))\r\n  )\r\n  const [alert, setAlert] = useState(null)\r\n  const payoffs = grid.map((row) =>\r\n    row.map((cell, x) => {\r\n      let payoff = 0\r\n      if (cell === Choice.C) {\r\n        payoff += row.filter((c) => c === Choice.C).length - 1 // Coop with row members\r\n        payoff += grid.map((r) => r[x]).filter((c) => c === Choice.C).length - 1 // Coop with col members\r\n      } else {\r\n        payoff += row.filter((c) => c === Choice.D).length // Defect with row members\r\n        payoff += grid.map((r) => r[x]).filter((c) => c === Choice.D).length // Defect with col members\r\n      }\r\n      return payoff\r\n    })\r\n  )\r\n\r\n  const handleNumPrisonersChange = useCallback((e) => {\r\n    const value = parseInt(e.target.value)\r\n    if (value < 2 || value > 8) {\r\n      setAlert({\r\n        text: \"Number of prisoners must be between 2 and 8\",\r\n        type: \"danger\",\r\n      })\r\n      return\r\n    }\r\n    setNumPrisoners(value)\r\n    setGrid(Array.from({ length: value }, () => Array(value).fill(Choice.C)))\r\n  }, [])\r\n\r\n  const toggleCell = useCallback(\r\n    (x, y) => {\r\n      const newGrid = grid.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (rowIndex === y && colIndex === x) {\r\n            return cell === Choice.C ? Choice.D : Choice.C\r\n          }\r\n          return cell\r\n        })\r\n      )\r\n      setGrid(newGrid)\r\n    },\r\n    [grid]\r\n  )\r\n\r\n  return (\r\n    <div className=\"game-prisoners-dilemma\">\r\n      <h1>Prisoner&apos;s Dilemma</h1>\r\n      <label>\r\n        Number of Prisoners and Turns{\" \"}\r\n        <input\r\n          type=\"number\"\r\n          value={numPrisoners}\r\n          onChange={handleNumPrisonersChange}\r\n          min=\"2\"\r\n          max=\"8\"\r\n        />\r\n      </label>\r\n      <div\r\n        className=\"grid\"\r\n        style={{\r\n          gridTemplateColumns: `repeat(${numPrisoners}, minmax(48px, 1fr))`,\r\n        }}\r\n      >\r\n        {grid.map((row, y) => (\r\n          <div key={y} className=\"row\">\r\n            {row.map((cell, x) => (\r\n              <div\r\n                key={`${x}-${y}`}\r\n                className={`cell ${cell === Choice.C ? \"C\" : \"D\"}`}\r\n                onClick={() => toggleCell(x, y)}\r\n              >\r\n                {cell} ({payoffs[y][x]})\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {alert && (\r\n        <Alert\r\n          type={alert.type}\r\n          isOpen={!!alert.text}\r\n          toggle={() => setAlert(null)}\r\n        >\r\n          {alert.text}\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n"],"names":["Choice","Game","numPrisoners","setNumPrisoners","useState","grid","setGrid","Array","from","length","fill","alert","setAlert","payoffs","map","row","cell","x","payoff","filter","c","r","handleNumPrisonersChange","useCallback","e","value","parseInt","target","text","type","toggleCell","y","newGrid","rowIndex","colIndex","_jsxs","className","children","_jsx","onChange","min","max","style","gridTemplateColumns","onClick","Alert","isOpen","toggle"],"sourceRoot":""}