{"version":3,"file":"static/js/1035.7b9efa21.chunk.js","mappings":"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","sources":["webpack://AlgoLens/./src/routing/site/games/components/MatchTiles/MatchTiles.module.css?2a6f","routing/site/games/components/MatchTiles/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MatchTiles_container__3XT8A\",\"controls\":\"MatchTiles_controls__9hhA+\",\"grid\":\"MatchTiles_grid__E7NVI\",\"tile\":\"MatchTiles_tile__QsMrz\",\"flipped\":\"MatchTiles_flipped__wK+k9\",\"inner\":\"MatchTiles_inner__9FDjx\",\"front\":\"MatchTiles_front__dDuzp\",\"back\":\"MatchTiles_back__22+Nx\"};","import React, { useEffect, useState } from \"react\"\nimport styles from \"./MatchTiles.module.css\"\n\n// Utility: generate pairs and shuffle\nconst generateTiles = (n) => {\n  const totalTiles = n * n\n  // Ensure even total (we should only allow even totals). If odd, throw to catch bugs.\n  if (totalTiles % 2 !== 0) {\n    throw new Error(\n      \"Grid must have an even number of tiles to form pairs. Choose an even N.\"\n    )\n  }\n\n  const values = []\n  for (let i = 1; i <= totalTiles / 2; i++) {\n    values.push(i)\n    values.push(i)\n  }\n\n  // Fisher-Yates shuffle\n  for (let i = values.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[values[i], values[j]] = [values[j], values[i]]\n  }\n\n  return values.map((val, idx) => ({\n    id: idx,\n    value: val,\n    flipped: false,\n    matched: false,\n  }))\n}\n\nconst sanitizeN = (val) => {\n  let num = Number(val) || 2\n  if (num < 2) num = 2\n  if (num > 8) num = 8\n  // ensure an even grid (n must be even so n*n is even)\n  if (num % 2 !== 0) num = num + 1\n  return num\n}\n\nexport default function MatchTiles() {\n  const [n, setN] = useState(4)\n  const [tiles, setTiles] = useState(() => generateTiles(4))\n  const [busy, setBusy] = useState(false)\n\n  // regenerate tiles whenever n changes\n  useEffect(() => {\n    setTiles(generateTiles(n))\n    setBusy(false)\n  }, [n])\n\n  const handleTileClick = (id) => {\n    if (busy) return // ignore clicks while resolving a pair\n\n    setTiles((prev) => {\n      const clicked = prev.find((t) => t.id === id)\n      if (!clicked || clicked.flipped || clicked.matched) return prev\n\n      const newTiles = prev.map((t) =>\n        t.id === id ? { ...t, flipped: true } : t\n      )\n\n      const open = newTiles.filter((t) => t.flipped && !t.matched)\n      if (open.length === 2) {\n        setBusy(true)\n        if (open[0].value === open[1].value) {\n          // matched\n          setTimeout(() => {\n            setTiles((curr) =>\n              curr.map((t) =>\n                t.id === open[0].id || t.id === open[1].id\n                  ? { ...t, matched: true }\n                  : t\n              )\n            )\n            setBusy(false)\n          }, 500)\n        } else {\n          // not a match\n          setTimeout(() => {\n            setTiles((curr) =>\n              curr.map((t) =>\n                t.id === open[0].id || t.id === open[1].id\n                  ? { ...t, flipped: false }\n                  : t\n              )\n            )\n            setBusy(false)\n          }, 800)\n        }\n      }\n\n      return newTiles\n    })\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.controls}>\n        <label htmlFor=\"grid-size\">Grid Size (N):</label>\n        <input\n          id=\"grid-size\"\n          type=\"number\"\n          min=\"2\"\n          max=\"8\"\n          value={n}\n          onChange={(e) => setN(sanitizeN(e.target.value))}\n        />\n      </div>\n\n      <div\n        className={styles.grid}\n        style={{ gridTemplateColumns: `repeat(${n}, 1fr)` }}\n      >\n        {tiles.map((tile) => (\n          <div\n            key={tile.id}\n            className={`${styles.tile} ${\n              tile.flipped || tile.matched ? styles.flipped : \"\"\n            }`}\n          >\n            {/* Use a button that perfectly covers the tile area so clicks don't \"fall through\" to other elements */}\n            <button\n              type=\"button\"\n              className={styles.inner}\n              onClick={() => handleTileClick(tile.id)}\n              aria-pressed={tile.flipped || tile.matched}\n            >\n              <div className={styles.front}>?</div>\n              <div className={styles.back}>{tile.value}</div>\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n"],"names":["generateTiles","n","totalTiles","Error","values","i","push","length","j","Math","floor","random","map","val","idx","id","value","flipped","matched","MatchTiles","setN","useState","tiles","setTiles","busy","setBusy","useEffect","_jsxs","className","styles","children","_jsx","htmlFor","type","min","max","onChange","e","num","Number","sanitizeN","target","style","gridTemplateColumns","tile","onClick","handleTileClick","prev","clicked","find","t","newTiles","open","filter","setTimeout","curr"],"sourceRoot":""}