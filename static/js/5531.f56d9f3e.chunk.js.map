{"version":3,"file":"static/js/5531.f56d9f3e.chunk.js","mappings":"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","sources":["routing/site/algo/components/Palindrome/Input.jsx","routing/site/algo/components/Palindrome/index.jsx","../node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js","../node_modules/@material-ui/core/esm/TextField/TextField.js"],"sourcesContent":["import React, { useState } from \"react\"\r\nimport { makeStyles, fade } from \"@material-ui/core/styles\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardActions from \"@material-ui/core/CardActions\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { FormControl } from \"@material-ui/core\"\r\n\r\n//Card component styling\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 180,\r\n  },\r\n})\r\n\r\n//text input field styling\r\nconst useStylesReddit = makeStyles((theme) => ({\r\n  root: {\r\n    border: \"1px solid #e2e2e1\",\r\n    overflow: \"hidden\",\r\n    borderRadius: 4,\r\n    backgroundColor: \"#fcfcfb\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    \"&:hover\": {\r\n      backgroundColor: \"#fff\",\r\n    },\r\n    \"&$focused\": {\r\n      backgroundColor: \"#fff\",\r\n      boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}))\r\nfunction RedditTextField(props) {\r\n  const classes = useStylesReddit()\r\n\r\n  return (\r\n    <TextField InputProps={{ classes, disableUnderline: true }} {...props} />\r\n  )\r\n}\r\n\r\nconst styleforform = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst stylefortext = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst styleforbutton = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst Input = React.memo(({ disabled, checkPalindrome }) => {\r\n  const [input, setInput] = useState(null)\r\n  const classes = useStyles()\r\n  const inputstyle = stylefortext()\r\n  const buttonstyle = styleforbutton()\r\n  const formstyle = styleforform()\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <h2 className=\"bg-success text-white p-2\">\r\n        Check whether string is Palindrome\r\n      </h2>\r\n      <h4 className=\"text-primary p-2\">\r\n        A Palindrome reads the same from left to right and right to left\r\n      </h4>\r\n      <CardActions>\r\n        <FormControl className={`pb-3 pr-0 pl-2 pt-1 ${formstyle.root}`}>\r\n          <RedditTextField\r\n            label=\"String\"\r\n            className={inputstyle.root}\r\n            variant=\"filled\"\r\n            id=\"reddit-input-base\"\r\n            onChange={(event) => {\r\n              setInput(event.target.value)\r\n            }}\r\n            value={input ? input : \"\"}\r\n            disabled={disabled}\r\n          />\r\n          <Button\r\n            className={buttonstyle.root}\r\n            disabled={disabled}\r\n            onClick={() => {\r\n              checkPalindrome(input)\r\n              setInput(null)\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </FormControl>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n})\r\n\r\nInput.displayName = \"Palindrome.Input\"\r\n\r\nexport default Input\r\n","import React, { Suspense, lazy, useCallback, useState } from \"react\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { Alert } from \"reactstrap\"\r\nimport Input from \"./Input\"\r\nimport { FixedSizeList as List } from \"react-window\"\r\n\r\nconst LazyElement = lazy(() => import(\"common/components/Element\"))\r\n\r\nconst Palindrome = () => {\r\n  const [characters, setCharacters] = useState([])\r\n  const [alert, setAlert] = useState(null)\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  const updateCharacters = (start, end) => {\r\n    setCharacters((prevCharacters) => {\r\n      return prevCharacters.map(({ char, highlight }, idx) => {\r\n        if (idx === start || idx === end) {\r\n          return {\r\n            char,\r\n            highlight: true,\r\n          }\r\n        }\r\n        return {\r\n          char,\r\n          highlight,\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  const checkPalindrome = useCallback((input) => {\r\n    let start = 0,\r\n      end = input.length - 1,\r\n      isPalin = true\r\n\r\n    setCharacters(\r\n      input.split(\"\").map((char) => ({\r\n        char,\r\n        highlight: false,\r\n      }))\r\n    )\r\n    setDisabled(true)\r\n    while (start <= end) {\r\n      if (input[start] !== input[end]) {\r\n        setAlert({\r\n          type: \"danger\",\r\n          text: \"Input string is not a Palindrome\",\r\n        })\r\n        setDisabled(false)\r\n        isPalin = false\r\n        break\r\n      } else {\r\n        updateCharacters(start, end)\r\n        start++\r\n        end--\r\n      }\r\n    }\r\n    if (isPalin) {\r\n      setAlert({\r\n        type: \"success\",\r\n        text: \"Input string is a Palindrome\",\r\n      })\r\n      setDisabled(false)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Grid container>\r\n      {alert && (\r\n        <Grid item xs={12}>\r\n          <Alert\r\n            color={alert.type}\r\n            isOpen={!!alert.text}\r\n            toggle={() => setAlert(null)}\r\n          >\r\n            {alert.text}\r\n          </Alert>\r\n        </Grid>\r\n      )}\r\n      <Grid container className=\"text-center\">\r\n        <Grid item xs={12}>\r\n          <Input checkPalindrome={checkPalindrome} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container className=\"mt-4 mb-4 text-center\">\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <LazyList characters={characters} />\r\n        </Suspense>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst LazyList = ({ characters }) => {\r\n  return (\r\n    <List\r\n      height={80}\r\n      itemCount={characters.length}\r\n      itemSize={200}\r\n      width={window.innerWidth || 800}\r\n      direction=\"horizontal\"\r\n    >\r\n      {({ index, style }) => (\r\n        <Grid item xs={12} style={style}>\r\n          <LazyElement\r\n            highlight={characters[index].highlight}\r\n            data={{ value: characters[index].char, index }}\r\n            type=\"array\"\r\n          />\r\n        </Grid>\r\n      )}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Palindrome\r\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 3,\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      marginLeft: 14,\n      marginRight: 14\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), children === ' ' ?\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : children);\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = /*#__PURE__*/React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    if (label) {\n      var _InputLabelProps$requ;\n\n      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;\n      InputMore.label = /*#__PURE__*/React.createElement(React.Fragment, null, label, displayRequired && \"\\xA0*\");\n    }\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = /*#__PURE__*/React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && /*#__PURE__*/React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? /*#__PURE__*/React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);"],"names":["useStyles","makeStyles","root","minWidth","useStylesReddit","theme","border","overflow","borderRadius","backgroundColor","transition","transitions","create","boxShadow","concat","fade","palette","primary","main","borderColor","focused","RedditTextField","props","classes","_jsx","TextField","InputProps","disableUnderline","styleforform","width","margin","spacing","stylefortext","styleforbutton","Input","React","_ref","disabled","checkPalindrome","input","setInput","useState","inputstyle","buttonstyle","formstyle","_jsxs","Card","className","variant","children","CardActions","FormControl","label","id","onChange","event","target","value","Button","onClick","color","size","displayName","LazyElement","lazy","LazyList","_ref2","characters","List","height","itemCount","length","itemSize","window","innerWidth","direction","_ref3","index","style","Grid","item","xs","highlight","data","char","type","Palindrome","setCharacters","alert","setAlert","setDisabled","updateCharacters","start","end","prevCharacters","map","idx","useCallback","isPalin","split","text","container","Alert","isOpen","toggle","Suspense","fallback","FormHelperText","ref","_props$component","component","Component","other","error","filled","required","_objectWithoutProperties","muiFormControl","useFormControl","fcs","formControlState","states","_extends","clsx","contained","marginDense","dangerouslySetInnerHTML","__html","withStyles","secondary","typography","caption","textAlign","marginTop","marginLeft","marginRight","name","variantComponent","standard","FilledInput","outlined","OutlinedInput","autoComplete","_props$autoFocus","autoFocus","_props$color","defaultValue","_props$disabled","_props$error","FormHelperTextProps","_props$fullWidth","fullWidth","helperText","hiddenLabel","InputLabelProps","inputProps","inputRef","_props$multiline","multiline","onBlur","onFocus","placeholder","_props$required","rows","rowsMax","_props$select","select","SelectProps","_props$variant","InputMore","shrink","notched","_InputLabelProps$requ","displayRequired","native","undefined","helperTextId","inputLabelId","InputComponent","InputElement","InputLabel","htmlFor","Select","labelId"],"sourceRoot":""}