{"version":3,"file":"static/js/5910.7903f4ec.chunk.js","mappings":"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","sources":["webpack://AlgoLens/./src/routing/site/ds/components/BPlusTree/BPlusTree.module.css?686c","routing/site/ds/components/BPlusTree/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"BPlusTree_container__igsUJ\",\"title\":\"BPlusTree_title__0Pz9C\",\"description\":\"BPlusTree_description__1za5n\",\"section\":\"BPlusTree_section__9oC6S\",\"initGroup\":\"BPlusTree_initGroup__1BCM1\",\"info\":\"BPlusTree_info__I16zB\",\"operations\":\"BPlusTree_operations__JHxyO\",\"operationCard\":\"BPlusTree_operationCard__3+ECm\",\"inputGroup\":\"BPlusTree_inputGroup__z+YxJ\",\"input\":\"BPlusTree_input__MLbGM\",\"btnPrimary\":\"BPlusTree_btnPrimary__9Kq2V\",\"btnSecondary\":\"BPlusTree_btnSecondary__uReDK\",\"btnOperation\":\"BPlusTree_btnOperation__5peao\",\"lastOperation\":\"BPlusTree_lastOperation__09vFt\",\"slideDown\":\"BPlusTree_slideDown__hVqYs\",\"treeContainer\":\"BPlusTree_treeContainer__JTNoj\",\"treeSvg\":\"BPlusTree_treeSvg__RKt5Z\",\"internalNodeBox\":\"BPlusTree_internalNodeBox__XQdTZ\",\"leafNodeBox\":\"BPlusTree_leafNodeBox__BERtV\",\"edge\":\"BPlusTree_edge__CU-3X\",\"separator\":\"BPlusTree_separator__Jc5GE\",\"keyText\":\"BPlusTree_keyText__VtYRW\",\"highlighted\":\"BPlusTree_highlighted__UPr17\",\"pulse\":\"BPlusTree_pulse__sezao\",\"leafLabel\":\"BPlusTree_leafLabel__ZyoEA\",\"internalLabel\":\"BPlusTree_internalLabel__kCvKa\",\"leafLink\":\"BPlusTree_leafLink__mgsiN\",\"dashAnimation\":\"BPlusTree_dashAnimation__vrd3t\",\"treeNote\":\"BPlusTree_treeNote__MzyLG\",\"comparisonGrid\":\"BPlusTree_comparisonGrid__80+OQ\",\"comparisonCard\":\"BPlusTree_comparisonCard__aCPYc\",\"bplus\":\"BPlusTree_bplus__COhu-\",\"btree\":\"BPlusTree_btree__lA5C4\",\"complexityGrid\":\"BPlusTree_complexityGrid__BPP5x\",\"complexityCard\":\"BPlusTree_complexityCard__Jrjgl\",\"complexity\":\"BPlusTree_complexity__Y8+jH\",\"note\":\"BPlusTree_note__T0xI1\",\"explanation\":\"BPlusTree_explanation__XlCp8\"};","import React, { useState } from \"react\"\nimport styles from \"./BPlusTree.module.css\"\n\nclass BPlusTreeNode {\n  constructor(isLeaf = true) {\n    this.keys = []\n    this.children = [] // For internal nodes\n    this.values = [] // For leaf nodes (data)\n    this.isLeaf = isLeaf\n    this.next = null // Link to next leaf (for range queries)\n  }\n}\n\nclass BPlusTree {\n  constructor(order = 4) {\n    this.root = new BPlusTreeNode(true)\n    this.order = order\n    this.maxKeys = order - 1\n    this.minKeys = Math.ceil(order / 2) - 1\n  }\n\n  search(key) {\n    return this.searchNode(this.root, key)\n  }\n\n  searchNode(node, key) {\n    if (node.isLeaf) {\n      const index = node.keys.indexOf(key)\n      return index !== -1 ? node.values[index] : null\n    }\n\n    // Find appropriate child\n    let i = 0\n    while (i < node.keys.length && key >= node.keys[i]) {\n      i++\n    }\n    return this.searchNode(node.children[i], key)\n  }\n\n  insert(key, value = key) {\n    const root = this.root\n\n    if (root.keys.length === this.maxKeys) {\n      // Root is full, split it\n      const newRoot = new BPlusTreeNode(false)\n      newRoot.children.push(this.root)\n      this.splitChild(newRoot, 0)\n      this.root = newRoot\n    }\n\n    this.insertNonFull(this.root, key, value)\n  }\n\n  insertNonFull(node, key, value) {\n    if (node.isLeaf) {\n      // Insert in leaf node\n      let i = 0\n      while (i < node.keys.length && key > node.keys[i]) {\n        i++\n      }\n      node.keys.splice(i, 0, key)\n      node.values.splice(i, 0, value)\n    } else {\n      // Find child to insert\n      let i = 0\n      while (i < node.keys.length && key >= node.keys[i]) {\n        i++\n      }\n\n      if (node.children[i].keys.length === this.maxKeys) {\n        // Child is full, split it\n        this.splitChild(node, i)\n\n        if (key >= node.keys[i]) {\n          i++\n        }\n      }\n\n      this.insertNonFull(node.children[i], key, value)\n    }\n  }\n\n  splitChild(parent, index) {\n    const fullChild = parent.children[index]\n    const newChild = new BPlusTreeNode(fullChild.isLeaf)\n\n    const midIndex = Math.ceil(this.maxKeys / 2)\n\n    if (fullChild.isLeaf) {\n      // Split leaf node - copy up\n      const midKey = fullChild.keys[midIndex]\n\n      newChild.keys = fullChild.keys.slice(midIndex)\n      newChild.values = fullChild.values.slice(midIndex)\n      fullChild.keys = fullChild.keys.slice(0, midIndex)\n      fullChild.values = fullChild.values.slice(0, midIndex)\n\n      // Link leaves\n      newChild.next = fullChild.next\n      fullChild.next = newChild\n\n      // Insert middle key into parent\n      parent.keys.splice(index, 0, midKey)\n    } else {\n      // Split internal node - push up\n      const midKey = fullChild.keys[midIndex - 1]\n\n      newChild.keys = fullChild.keys.slice(midIndex)\n      newChild.children = fullChild.children.slice(midIndex)\n      fullChild.keys = fullChild.keys.slice(0, midIndex - 1)\n      fullChild.children = fullChild.children.slice(0, midIndex)\n\n      parent.keys.splice(index, 0, midKey)\n    }\n\n    parent.children.splice(index + 1, 0, newChild)\n  }\n\n  getHeight(node = this.root) {\n    if (node.isLeaf) return 1\n    return 1 + this.getHeight(node.children[0])\n  }\n\n  getAllLeaves() {\n    const leaves = []\n    let current = this.getFirstLeaf(this.root)\n    while (current) {\n      leaves.push(current)\n      current = current.next\n    }\n    return leaves\n  }\n\n  getFirstLeaf(node) {\n    if (node.isLeaf) return node\n    return this.getFirstLeaf(node.children[0])\n  }\n\n  clone() {\n    const newTree = new BPlusTree(this.order)\n    const { clonedRoot, leafMap } = this.cloneNode(this.root)\n    newTree.root = clonedRoot\n\n    // Restore leaf links\n    const leaves = Object.keys(leafMap).sort(\n      (a, b) => parseInt(a) - parseInt(b)\n    )\n    for (let i = 0; i < leaves.length - 1; i++) {\n      leafMap[leaves[i]].next = leafMap[leaves[i + 1]]\n    }\n\n    return newTree\n  }\n\n  cloneNode(node, leafMap = {}) {\n    if (!node) return { clonedRoot: null, leafMap }\n\n    const newNode = new BPlusTreeNode(node.isLeaf)\n    newNode.keys = [...node.keys]\n    newNode.values = [...node.values]\n\n    if (node.isLeaf) {\n      // Track leaves for linking\n      const leafId = node.keys.join(\"-\")\n      leafMap[leafId] = newNode\n    } else {\n      node.children.forEach((child) => {\n        const { clonedRoot: clonedChild } = this.cloneNode(child, leafMap)\n        newNode.children.push(clonedChild)\n      })\n    }\n\n    return { clonedRoot: newNode, leafMap }\n  }\n}\n\nconst BPlusTreeVisualizer = () => {\n  const [tree, setTree] = useState(new BPlusTree(4))\n  const [order, setOrder] = useState(4)\n  const [inputValue, setInputValue] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(\"\")\n  const [highlightedNodes, setHighlightedNodes] = useState([])\n  const [lastOperation, setLastOperation] = useState(\"\")\n\n  const handleInitialize = () => {\n    const newOrder = parseInt(order, 10)\n    if (isNaN(newOrder) || newOrder < 3 || newOrder > 7) {\n      alert(\"Please enter order between 3 and 7\")\n      return\n    }\n    setTree(new BPlusTree(newOrder))\n    setLastOperation(`Initialized B+ Tree of order ${newOrder}`)\n    setHighlightedNodes([])\n  }\n\n  const handleInsert = () => {\n    const value = parseInt(inputValue, 10)\n    if (isNaN(value)) {\n      alert(\"Please enter a valid number\")\n      return\n    }\n\n    const newTree = tree.clone()\n    newTree.insert(value)\n    setTree(newTree)\n    setInputValue(\"\")\n    setLastOperation(`Inserted ${value}`)\n    setHighlightedNodes([value])\n\n    setTimeout(() => setHighlightedNodes([]), 2000)\n  }\n\n  const handleSearch = () => {\n    const value = parseInt(searchValue, 10)\n    if (isNaN(value)) {\n      alert(\"Please enter a valid number\")\n      return\n    }\n\n    const found = tree.search(value)\n    setSearchValue(\"\")\n    setLastOperation(\n      `Search for ${value}: ${found !== null ? \"Found ✓\" : \"Not Found ✗\"}`\n    )\n\n    if (found !== null) {\n      setHighlightedNodes([value])\n      setTimeout(() => setHighlightedNodes([]), 2000)\n    }\n  }\n\n  const handleLoadExample = () => {\n    const newTree = new BPlusTree(4)\n    const values = [10, 20, 5, 15, 25, 30, 35, 40, 45, 12]\n    values.forEach((val) => newTree.insert(val))\n    setTree(newTree)\n    setLastOperation(\"Loaded example B+ Tree\")\n    setHighlightedNodes([])\n  }\n\n  const renderNode = (node, x, y, width, level) => {\n    if (!node) return []\n\n    const elements = []\n    const nodeHeight = 50\n    const keyWidth = 50\n    const nodeWidth = Math.max(node.keys.length * keyWidth + 10, 60)\n    const verticalSpacing = 100\n\n    // Determine node color\n    const nodeClass = node.isLeaf ? styles.leafNodeBox : styles.internalNodeBox\n\n    // Draw node box\n    elements.push(\n      <rect\n        key={`box-${x}-${y}`}\n        x={x - nodeWidth / 2}\n        y={y}\n        width={nodeWidth}\n        height={nodeHeight}\n        className={nodeClass}\n      />\n    )\n\n    // Draw keys\n    node.keys.forEach((key, i) => {\n      const keyX = x - nodeWidth / 2 + (i + 0.5) * keyWidth + 5\n      const isHighlighted = highlightedNodes.includes(key)\n\n      // Key separator\n      if (i > 0) {\n        elements.push(\n          <line\n            key={`sep-${x}-${y}-${i}`}\n            x1={x - nodeWidth / 2 + i * keyWidth + 5}\n            y1={y}\n            x2={x - nodeWidth / 2 + i * keyWidth + 5}\n            y2={y + nodeHeight}\n            className={styles.separator}\n          />\n        )\n      }\n\n      // Key text\n      elements.push(\n        <text\n          key={`key-${x}-${y}-${i}`}\n          x={keyX}\n          y={y + nodeHeight / 2 + 6}\n          textAnchor=\"middle\"\n          className={`${styles.keyText} ${\n            isHighlighted ? styles.highlighted : \"\"\n          }`}\n        >\n          {key}\n        </text>\n      )\n    })\n\n    // Draw children for internal nodes\n    if (!node.isLeaf && node.children.length > 0) {\n      const childWidth = width / node.children.length\n      node.children.forEach((child, i) => {\n        const childX = x - width / 2 + (i + 0.5) * childWidth\n\n        // Draw edge\n        const parentConnectionX =\n          x - nodeWidth / 2 + ((i + 0.5) * nodeWidth) / node.children.length\n\n        elements.push(\n          <line\n            key={`edge-${x}-${y}-${i}`}\n            x1={parentConnectionX}\n            y1={y + nodeHeight}\n            x2={childX}\n            y2={y + verticalSpacing}\n            className={styles.edge}\n          />\n        )\n\n        // Recursively render child\n        elements.push(\n          ...renderNode(\n            child,\n            childX,\n            y + verticalSpacing,\n            childWidth,\n            level + 1\n          )\n        )\n      })\n    }\n\n    // Node type label\n    if (node.isLeaf) {\n      elements.push(\n        <text\n          key={`label-${x}-${y}`}\n          x={x}\n          y={y + nodeHeight + 15}\n          textAnchor=\"middle\"\n          className={styles.leafLabel}\n        >\n          Leaf (Data)\n        </text>\n      )\n    } else {\n      elements.push(\n        <text\n          key={`label-${x}-${y}`}\n          x={x}\n          y={y - 10}\n          textAnchor=\"middle\"\n          className={styles.internalLabel}\n        >\n          Internal\n        </text>\n      )\n    }\n\n    return elements\n  }\n\n  const renderLeafLinks = () => {\n    const leaves = tree.getAllLeaves()\n    const elements = []\n    const leafY = tree.getHeight() * 100 + 25 // Middle of leaf nodes\n\n    leaves.forEach((leaf, index) => {\n      if (index < leaves.length - 1) {\n        const startX = 500 - 450 + (index + 1) * (900 / (leaves.length + 1))\n        const endX = 500 - 450 + (index + 2) * (900 / (leaves.length + 1))\n\n        elements.push(\n          <path\n            key={`link-${index}`}\n            d={`M ${startX + 30} ${leafY} Q ${(startX + endX) / 2} ${\n              leafY + 30\n            } ${endX - 30} ${leafY}`}\n            className={styles.leafLink}\n            fill=\"none\"\n            markerEnd=\"url(#arrowhead)\"\n          />\n        )\n      }\n    })\n\n    return elements\n  }\n\n  const treeHeight = tree.getHeight()\n  const svgHeight = Math.max(450, treeHeight * 120 + 150)\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>B+ Tree Visualization 🌲➕</h1>\n\n      {/* Description */}\n      <div className={styles.description}>\n        <p>\n          A B+ Tree is a variation of B-Tree where all data is stored in leaf\n          nodes. Internal nodes only contain keys for navigation. Leaves are\n          linked for efficient range queries.\n        </p>\n      </div>\n\n      {/* Initialize */}\n      <div className={styles.section}>\n        <h3>Initialize B+ Tree</h3>\n        <div className={styles.initGroup}>\n          <label>Order (m):</label>\n          <input\n            type=\"number\"\n            value={order}\n            onChange={(e) => setOrder(e.target.value)}\n            className={styles.input}\n            min=\"3\"\n            max=\"7\"\n          />\n          <button onClick={handleInitialize} className={styles.btnPrimary}>\n            Initialize\n          </button>\n          <button onClick={handleLoadExample} className={styles.btnSecondary}>\n            Load Example\n          </button>\n          <span className={styles.info}>\n            Current: Order {tree.order} | Max keys per node: {tree.maxKeys}\n          </span>\n        </div>\n      </div>\n\n      {/* Operations */}\n      <div className={styles.operations}>\n        <div className={styles.operationCard}>\n          <h4>Insert Key</h4>\n          <div className={styles.inputGroup}>\n            <input\n              type=\"number\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              placeholder=\"Enter value\"\n              className={styles.input}\n              onKeyPress={(e) => e.key === \"Enter\" && handleInsert()}\n            />\n            <button onClick={handleInsert} className={styles.btnOperation}>\n              Insert\n            </button>\n          </div>\n        </div>\n\n        <div className={styles.operationCard}>\n          <h4>Search Key</h4>\n          <div className={styles.inputGroup}>\n            <input\n              type=\"number\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Enter value\"\n              className={styles.input}\n              onKeyPress={(e) => e.key === \"Enter\" && handleSearch()}\n            />\n            <button onClick={handleSearch} className={styles.btnOperation}>\n              Search\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Last Operation */}\n      {lastOperation && (\n        <div className={styles.lastOperation}>{lastOperation}</div>\n      )}\n\n      {/* Tree Visualization */}\n      <div className={styles.section}>\n        <h3>Tree Structure (Height: {treeHeight})</h3>\n        <div className={styles.treeContainer}>\n          <svg width=\"1000\" height={svgHeight} className={styles.treeSvg}>\n            <defs>\n              <marker\n                id=\"arrowhead\"\n                markerWidth=\"10\"\n                markerHeight=\"10\"\n                refX=\"9\"\n                refY=\"3\"\n                orient=\"auto\"\n              >\n                <polygon points=\"0 0, 10 3, 0 6\" fill=\"#10b981\" />\n              </marker>\n            </defs>\n            {renderNode(tree.root, 500, 50, 900, 0)}\n            {renderLeafLinks()}\n          </svg>\n        </div>\n        <p className={styles.treeNote}>\n          Green arrows show linked leaf nodes for range queries\n        </p>\n      </div>\n\n      {/* Key Differences */}\n      <div className={styles.section}>\n        <h3>B+ Tree vs B-Tree</h3>\n        <div className={styles.comparisonGrid}>\n          <div className={styles.comparisonCard}>\n            <h4>Data Storage</h4>\n            <p className={styles.bplus}>✓ All data in leaf nodes only</p>\n            <p className={styles.btree}>✗ Data in all nodes</p>\n          </div>\n          <div className={styles.comparisonCard}>\n            <h4>Internal Nodes</h4>\n            <p className={styles.bplus}>✓ Only keys for navigation</p>\n            <p className={styles.btree}>✗ Contains data too</p>\n          </div>\n          <div className={styles.comparisonCard}>\n            <h4>Leaf Links</h4>\n            <p className={styles.bplus}>✓ Leaves are linked</p>\n            <p className={styles.btree}>✗ No leaf links</p>\n          </div>\n          <div className={styles.comparisonCard}>\n            <h4>Range Queries</h4>\n            <p className={styles.bplus}>✓ Very efficient</p>\n            <p className={styles.btree}>✗ Requires tree traversal</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Complexity */}\n      <div className={styles.section}>\n        <h3>Time Complexity</h3>\n        <div className={styles.complexityGrid}>\n          <div className={styles.complexityCard}>\n            <h4>Search</h4>\n            <p className={styles.complexity}>O(log n)</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Insert</h4>\n            <p className={styles.complexity}>O(log n)</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Delete</h4>\n            <p className={styles.complexity}>O(log n)</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Range Query</h4>\n            <p className={styles.complexity}>O(log n + k)</p>\n            <p className={styles.note}>k = number of results</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Applications */}\n      <div className={styles.explanation}>\n        <h3>Real-World Applications:</h3>\n        <ul>\n          <li>\n            <strong>Database Indexing:</strong> MySQL, PostgreSQL use B+ Trees\n            extensively\n          </li>\n          <li>\n            <strong>File Systems:</strong> NTFS, ReiserFS, XFS use B+ Trees\n          </li>\n          <li>\n            <strong>Range Queries:</strong> Excellent for SQL BETWEEN, &lt;,\n            &gt; operations\n          </li>\n          <li>\n            <strong>Sequential Access:</strong> Linked leaves enable efficient\n            scans\n          </li>\n        </ul>\n        <div className={styles.note}>\n          <strong>Why B+ Trees in Databases?</strong> Leaf linking makes range\n          queries and sequential scans very efficient. All data at leaf level\n          means internal nodes can hold more keys, reducing tree height. Fewer\n          disk I/O operations!\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default BPlusTreeVisualizer\n"],"names":["BPlusTreeNode","constructor","isLeaf","arguments","length","undefined","this","keys","children","values","next","BPlusTree","order","root","maxKeys","minKeys","Math","ceil","search","key","searchNode","node","index","indexOf","i","insert","value","newRoot","push","splitChild","insertNonFull","splice","parent","fullChild","newChild","midIndex","midKey","slice","getHeight","getAllLeaves","leaves","current","getFirstLeaf","clone","newTree","clonedRoot","leafMap","cloneNode","Object","sort","a","b","parseInt","newNode","leafId","join","forEach","child","clonedChild","BPlusTreeVisualizer","tree","setTree","useState","setOrder","inputValue","setInputValue","searchValue","setSearchValue","highlightedNodes","setHighlightedNodes","lastOperation","setLastOperation","handleInsert","isNaN","alert","concat","setTimeout","handleSearch","found","renderNode","x","y","width","level","elements","nodeWidth","max","nodeClass","styles","_jsx","height","className","keyX","isHighlighted","includes","x1","y1","x2","y2","nodeHeight","textAnchor","childWidth","childX","parentConnectionX","treeHeight","svgHeight","_jsxs","type","onChange","e","target","min","onClick","handleInitialize","newOrder","handleLoadExample","val","placeholder","onKeyPress","id","markerWidth","markerHeight","refX","refY","orient","points","fill","renderLeafLinks","leafY","leaf","startX","endX","d","markerEnd"],"sourceRoot":""}