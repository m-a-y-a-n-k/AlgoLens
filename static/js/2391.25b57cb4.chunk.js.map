{"version":3,"file":"static/js/2391.25b57cb4.chunk.js","mappings":"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","sources":["routing/site/algo/components/FloodFill/index.jsx"],"sourcesContent":["import React from \"react\"\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  InputGroup,\n  Input,\n  Alert,\n} from \"reactstrap\"\nimport SketchPicker from \"react-color\"\n\nclass CanvasImage extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps !== this.props || nextState !== this.state\n  }\n\n  captureMousePixel(event) {\n    let image = document.getElementById(\"cusImage\"),\n      details = document.getElementById(\"detailsPane\")\n    let imageData = image\n      .getContext(\"2d\")\n      .getImageData(\n        event.nativeEvent.offsetX,\n        event.nativeEvent.offsetY,\n        image.width,\n        image.height\n      )\n    let pixelData = imageData.data\n    details.innerHTML =\n      \"R: \" +\n      pixelData[0] +\n      \"<br>G: \" +\n      pixelData[1] +\n      \"<br>B: \" +\n      pixelData[2] +\n      \"<br>A: \" +\n      pixelData[3]\n  }\n\n  hexToRgb = (hex) =>\n    hex\n      .replace(\n        /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,\n        (m, r, g, b) => \"#\" + r + r + g + g + b + b\n      )\n      .substring(1)\n      .match(/.{2}/g)\n      .map((x) => parseInt(x, 16))\n\n  fillPixel(fillColor, xPos, yPos, firstRgb, image) {\n    if (xPos < 0 || xPos > image.width || yPos < 0 || yPos > image.width) {\n      return\n    }\n\n    let pixelData = image\n      .getContext(\"2d\")\n      .getImageData(xPos, yPos, image.width, image.height).data\n\n    if (\n      pixelData[0] !== firstRgb[0] ||\n      pixelData[1] !== firstRgb[1] ||\n      pixelData[2] !== firstRgb[2]\n    ) {\n      return\n    }\n\n    let rgb = this.hexToRgb(fillColor)\n    let imageData = image.getContext(\"2d\").createImageData(1, 1)\n\n    pixelData = imageData.data\n    pixelData[0] = rgb[0]\n    pixelData[1] = rgb[1]\n    pixelData[2] = rgb[2]\n    pixelData[3] = 255\n\n    image.getContext(\"2d\").putImageData(imageData, xPos, yPos)\n\n    // Flood fill recursion\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos + 1, yPos, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos + 1, yPos - 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos + 1, yPos + 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos, yPos - 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos, yPos + 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos - 1, yPos, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos - 1, yPos + 1, firstRgb, image)\n    }, 20)\n    setTimeout(() => {\n      this.fillPixel(fillColor, xPos - 1, yPos - 1, firstRgb, image)\n    }, 20)\n  }\n\n  render() {\n    return (\n      <canvas\n        id=\"cusImage\"\n        width=\"360\"\n        height=\"360\"\n        style={{\n          cursor: \"crosshair\",\n          margin: \"5% auto\",\n          border: \"1px solid #bbb\",\n        }}\n        onMouseMove={(event) => {\n          this.captureMousePixel(event)\n        }}\n        onClick={(event) => {\n          let xPos = event.nativeEvent.offsetX\n          let yPos = event.nativeEvent.offsetY\n\n          let image = document.getElementById(\"cusImage\")\n          let imageData = image\n            .getContext(\"2d\")\n            .getImageData(xPos, yPos, image.width, image.height)\n          let originalRgb = imageData.data\n\n          this.fillPixel(this.props.fill, xPos, yPos, originalRgb, image)\n        }}\n      ></canvas>\n    )\n  }\n}\n\nclass DetailsPane extends React.Component {\n  render() {\n    return (\n      <div\n        id=\"detailsPane\"\n        style={{\n          position: \"relative\",\n          top: \"50%\",\n          margin: \"auto\",\n          height: \"100px\",\n          width: \"200px\",\n          border: \"1px solid #bbb\",\n        }}\n      ></div>\n    )\n  }\n}\n\nexport default class FloodFill extends React.Component {\n  constructor(props) {\n    super(props)\n    this.getCustomImage = this.getCustomImage.bind(this)\n    this.handleChangeComplete = this.handleChangeComplete.bind(this)\n    this.state = {\n      hasImage: false,\n      alert: null,\n      background: \"#fff\",\n    }\n  }\n\n  handleChangeComplete = (color) => {\n    this.setState({ background: color.hex })\n  }\n\n  getCustomImage(event) {\n    var self = this\n    var URL = window.URL,\n      img = new Image()\n    let file = event.target.files[0]\n\n    if (file.type.indexOf(\"image\") === -1) {\n      self.setState(\n        { hasImage: false, alert: \"Please upload an image\" },\n        () => {\n          setTimeout(() => {\n            self.setState({ alert: null })\n          }, 5000)\n        }\n      )\n      return\n    }\n    var url = URL.createObjectURL(file)\n    img.onload = function () {\n      self.setState(\n        {\n          hasImage: true,\n          alert:\n            \"Click at position in image to start flood fill with color of choice\",\n        },\n        () => {\n          var canvas = document.getElementById(\"cusImage\")\n          var ctx = canvas.getContext(\"2d\")\n          ctx.clearRect(0, 0, canvas.width, canvas.height)\n          ctx.drawImage(img, 0, 0, 360, 360)\n\n          setTimeout(() => {\n            self.setState({ alert: null })\n          }, 5000)\n        }\n      )\n    }\n    img.src = url\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col sm={12}>\n            {this.state.alert && (\n              <Alert color=\"primary\">{this.state.alert}</Alert>\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={6}>\n            <Card style={{ border: \"1px solid rgba(22,45,167,0.9)\" }}>\n              <CardHeader>Flood Fill Algorithm on Custom Image</CardHeader>\n              <CardBody className=\"text-center\">\n                <CardTitle>Choose Custom Image</CardTitle>\n                <InputGroup>\n                  <Input\n                    id=\"getCustomImage\"\n                    type=\"file\"\n                    placeholder=\"Custom Image\"\n                    onChange={this.getCustomImage}\n                  />\n                </InputGroup>\n              </CardBody>\n            </Card>\n          </Col>\n          {this.state.hasImage && (\n            <Col sm={6}>\n              <SketchPicker\n                color={this.state.background}\n                onChangeComplete={this.handleChangeComplete}\n              />\n            </Col>\n          )}\n        </Row>\n        <Row>\n          <Col sm={6}>\n            {this.state.hasImage && (\n              <CanvasImage fill={this.state.background} />\n            )}\n          </Col>\n          <Col sm={6}>\n            <DetailsPane />\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n"],"names":["CanvasImage","hexToRgb","hex","replace","m","r","g","b","substring","match","map","x","parseInt","nextProps","nextState","this","props","state","event","image","document","getElementById","details","pixelData","getContext","getImageData","nativeEvent","offsetX","offsetY","width","height","data","innerHTML","fillColor","xPos","yPos","firstRgb","rgb","imageData","createImageData","putImageData","setTimeout","fillPixel","id","style","cursor","margin","border","onMouseMove","captureMousePixel","onClick","originalRgb","fill","React","DetailsPane","position","top","FloodFill","handleChangeComplete","color","setState","background","getCustomImage","bind","hasImage","alert","self","URL","window","img","Image","file","target","files","type","indexOf","url","createObjectURL","onload","canvas","ctx","clearRect","drawImage","src","sm","className","placeholder","onChange","onChangeComplete"],"sourceRoot":""}