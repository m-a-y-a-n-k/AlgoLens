{"version":3,"file":"static/js/6940.fbacc8dd.chunk.js","mappings":"yJAGA,MAAMA,EAAQC,EAAAA,EAAU;;;;EAMlBC,EAAYC,EAAAA,GAAAA,GAAW;;;;;;;;EAUvBC,EAAkBD,EAAAA,GAAAA,GAAW;;;EAK7BE,EAAMF,EAAAA,GAAAA,GAAW;;YAEVG,GAAUA,EAAMC;;;;;;eAMdP,KAAUM,GAAUA,EAAME;EAGnCC,EAAMN,EAAAA,GAAAA,GAAW;;;;;;;;;EAWjBO,EAAQP,EAAAA,GAAAA,GAAW;;;;EA8BzB,EAxBiBQ,IAAwB,IAAvB,MAAEH,EAAK,OAAED,GAAQI,EACjC,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,GACzCC,GAAcC,EAAAA,EAAAA,QAAO,MAU3B,OARAC,EAAAA,EAAAA,YAAU,KACRF,EAAYG,QAAUC,aAAY,KAChCN,GAAgBO,GAASA,EAAO,GAAE,GACjC,KAEI,IAAMC,cAAcN,EAAYG,WACtC,KAGDI,EAAAA,EAAAA,MAACpB,EAAS,CAAAqB,SAAA,EACRC,EAAAA,EAAAA,KAACpB,EAAe,CAAAmB,UACdC,EAAAA,EAAAA,KAACnB,EAAG,CAACE,OAAQA,EAAQC,MAAOA,EAAMe,UAChCC,EAAAA,EAAAA,KAACf,EAAG,SAGRa,EAAAA,EAAAA,MAACZ,EAAK,CAAAa,SAAA,CAAC,iBAAeX,EAAY,UACxB,ECpEVV,EAAYC,EAAAA,GAAAA,GAAW;;;;;;;;EAUvBsB,EAAiBtB,EAAAA,GAAAA,GAAW;;;;;;;;;;;EAa5BuB,EAAQvB,EAAAA,GAAAA,KAAa;;;;EAMrBwB,EAAQxB,EAAAA,GAAAA,KAAa;;;;;;;EASrByB,EAAQzB,EAAAA,GAAAA,EAAU;;;;EAuDxB,EAjDa0B,KACX,MAAOrB,EAAOsB,IAAYhB,EAAAA,EAAAA,UAAS,IAC5BP,EAAQwB,IAAajB,EAAAA,EAAAA,UAAS,KAgBrC,OACEQ,EAAAA,EAAAA,MAACpB,EAAS,CAAAqB,SAAA,EACRC,EAAAA,EAAAA,KAACI,EAAK,CAAAL,SAAC,gCACPD,EAAAA,EAAAA,MAACG,EAAc,CAAAF,SAAA,EACbD,EAAAA,EAAAA,MAACI,EAAK,CAAAH,SAAA,CAAC,sCAELC,EAAAA,EAAAA,KAACG,EAAK,CACJK,KAAK,SACLC,MAAOzB,EACP0B,SAvBiBC,IACzB,MAAMC,EAAeC,WAAWF,EAAEG,OAAOL,OAAS,GAC9CG,GAAgB,GAAKA,GAAgB,IACvCN,EAASM,EACX,EAoBQG,IAAI,MACJC,KAAK,MACLC,IAAI,WAGRnB,EAAAA,EAAAA,MAACI,EAAK,CAAAH,SAAA,CAAC,iCAELC,EAAAA,EAAAA,KAACG,EAAK,CACJK,KAAK,SACLC,MAAO1B,EACP2B,SA3BkBC,IAC1B,MAAMO,EAAgBC,SAASR,EAAEG,OAAOL,OAAS,EAAG,IAChDS,GAAiB,GAAKA,GAAiB,KACzCX,EAAUW,EACZ,EAwBQH,IAAI,KACJE,IAAI,eAIVjB,EAAAA,EAAAA,KAACoB,EAAQ,CAACpC,MAAOA,EAAOD,OAAQA,MACtB,C","sources":["routing/site/physics/components/SimplePendulum/Pendulum.jsx","routing/site/physics/components/SimplePendulum/index.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\r\nimport styled, { keyframes } from \"styled-components\"\r\n\r\nconst swing = keyframes`\r\n  0% { transform: rotate(-45deg); }\r\n  50% { transform: rotate(45deg); }\r\n  100% { transform: rotate(-45deg); }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #f0f0f0;\r\n`\r\n\r\nconst PendulumWrapper = styled.div`\r\n  position: relative;\r\n  height: 300px;\r\n`\r\n\r\nconst Rod = styled.div`\r\n  width: 2px;\r\n  height: ${(props) => props.length}px;\r\n  background: #333;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  transform-origin: top;\r\n  animation: ${swing} ${(props) => props.speed}s infinite ease-in-out;\r\n`\r\n\r\nconst Bob = styled.div`\r\n  width: 30px;\r\n  height: 30px;\r\n  background: #3498db;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n`\r\n\r\nconst Timer = styled.div`\r\n  margin-top: 20px;\r\n  font-size: 1.5rem;\r\n  color: #333;\r\n`\r\n\r\nconst Pendulum = ({ speed, length }) => {\r\n  const [timeElapsed, setTimeElapsed] = useState(0)\r\n  const intervalRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    intervalRef.current = setInterval(() => {\r\n      setTimeElapsed((prev) => prev + 1)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(intervalRef.current)\r\n  }, [])\r\n\r\n  return (\r\n    <Container>\r\n      <PendulumWrapper>\r\n        <Rod length={length} speed={speed}>\r\n          <Bob />\r\n        </Rod>\r\n      </PendulumWrapper>\r\n      <Timer>Time Elapsed: {timeElapsed} s</Timer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Pendulum\r\n","import React, { useState } from \"react\"\r\nimport Pendulum from \"./Pendulum\"\r\nimport styled from \"styled-components\"\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: #e0e0e0;\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  padding: 20px;\r\n  background: #fff;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  margin: 10px 0;\r\n  font-size: 1rem;\r\n  width: 100%;\r\n`\r\n\r\nconst Input = styled.input`\r\n  padding: 10px;\r\n  font-size: 1rem;\r\n  width: 100%;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst Title = styled.h1`\r\n  margin-bottom: 20px;\r\n  font-size: 2rem;\r\n  color: #333;\r\n`\r\n\r\nconst Main = () => {\r\n  const [speed, setSpeed] = useState(2)\r\n  const [length, setLength] = useState(200)\r\n\r\n  const handleSpeedChange = (e) => {\r\n    const updatedSpeed = parseFloat(e.target.value || 0)\r\n    if (updatedSpeed >= 0 && updatedSpeed <= 10) {\r\n      setSpeed(updatedSpeed)\r\n    }\r\n  }\r\n\r\n  const handleLengthChange = (e) => {\r\n    const updatedLength = parseInt(e.target.value || 0, 10)\r\n    if (updatedLength >= 0 && updatedLength <= 250) {\r\n      setLength(updatedLength)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Simple Pendulum Simulation</Title>\r\n      <InputContainer>\r\n        <Label>\r\n          Speed (0 to 10 seconds per cycle):\r\n          <Input\r\n            type=\"number\"\r\n            value={speed}\r\n            onChange={handleSpeedChange}\r\n            min=\"0.1\"\r\n            step=\"0.1\"\r\n            max=\"10\"\r\n          />\r\n        </Label>\r\n        <Label>\r\n          Rod Length (0 to 250 pixels):\r\n          <Input\r\n            type=\"number\"\r\n            value={length}\r\n            onChange={handleLengthChange}\r\n            min=\"50\"\r\n            max=\"250\"\r\n          />\r\n        </Label>\r\n      </InputContainer>\r\n      <Pendulum speed={speed} length={length} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Main\r\n"],"names":["swing","keyframes","Container","styled","PendulumWrapper","Rod","props","length","speed","Bob","Timer","_ref","timeElapsed","setTimeElapsed","useState","intervalRef","useRef","useEffect","current","setInterval","prev","clearInterval","_jsxs","children","_jsx","InputContainer","Label","Input","Title","Main","setSpeed","setLength","type","value","onChange","e","updatedSpeed","parseFloat","target","min","step","max","updatedLength","parseInt","Pendulum"],"sourceRoot":""}