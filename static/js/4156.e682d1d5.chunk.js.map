{"version":3,"file":"static/js/4156.e682d1d5.chunk.js","mappings":"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","sources":["routing/site/algo/components/Factorial/Input.jsx","routing/site/algo/components/Factorial/index.jsx"],"sourcesContent":["import React, { useState } from \"react\"\nimport \"./Input.css\"\n\nconst Input = React.memo(({ disabled, fact, setResult }) => {\n  const [input, setInput] = useState(\"\")\n\n  const handleSubmit = () => {\n    if (input) {\n      fact(parseInt(input))\n      setInput(\"\")\n      setResult(null)\n    }\n  }\n\n  return (\n    <div className=\"factorial-input-card\">\n      <h2 className=\"factorial-input-header\">\n        Compute Factorial of a whole number N → N!\n      </h2>\n      <h4 className=\"factorial-input-subheader\">\n        Finds the product 1 x 2 x 3 x .... upto a number N\n      </h4>\n      <div className=\"factorial-input-form\">\n        <div className=\"factorial-input-group\">\n          <label\n            htmlFor=\"factorial-number-input\"\n            className=\"factorial-input-label\"\n          >\n            Number\n          </label>\n          <input\n            type=\"number\"\n            id=\"factorial-number-input\"\n            className=\"factorial-input-field\"\n            onChange={(event) => setInput(event.target.value)}\n            value={input}\n            disabled={disabled}\n            placeholder=\"Enter a number\"\n          />\n        </div>\n        <button\n          className=\"factorial-submit-btn\"\n          disabled={disabled || !input}\n          onClick={handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  )\n})\n\nInput.displayName = \"Factorial.Input\"\n\nexport default Input\n","import React, { useState, lazy, useEffect } from \"react\"\nimport { FaEquals, FaTimes } from \"react-icons/fa\"\nimport Input from \"routing/site/algo/components/Factorial/Input\"\nimport \"./Factorial.css\"\n\nconst Element = lazy(() => import(\"common/components/Element\"))\n\nconst Factorial = () => {\n  const [input, setInput] = useState(null)\n  const [result, setResult] = useState(null)\n  const [processed, setProcessed] = useState(null)\n  const [rest, setRest] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n  const [alert, setAlert] = useState(null)\n\n  const computeFactorial = (currentValue) => {\n    if (currentValue <= 0) {\n      setTimeout(() => {\n        setDisabled(false)\n        setAlert({\n          text: \"Factorial successfully computed\",\n          type: \"success\",\n        })\n        setInput(null)\n        setProcessed(null)\n        setRest(null)\n      }, 500)\n      return\n    }\n    setTimeout(() => {\n      setProcessed((prevProcessed) => `${prevProcessed} X ${currentValue}`)\n      setProcessed((prevProcessed) => {\n        const processedNumbers = prevProcessed.split(\" X \").map(Number)\n        if (processedNumbers.length === 2) {\n          const [a, b] = processedNumbers\n          return (a * b).toString()\n        }\n        return prevProcessed\n      })\n      setRest(currentValue - 1)\n      computeFactorial(currentValue - 1)\n    }, 500)\n  }\n\n  const fact = (input) => {\n    if (input >= 0 && input <= 1) {\n      setAlert({\n        text: \"Factorial is 1\",\n        type: \"success\",\n      })\n    } else if (input >= 2 && input <= 50) {\n      setInput(input)\n      setDisabled(true)\n      setProcessed(input > 1 ? `${input}` : `1`)\n      setRest(input >= 2 ? input - 1 : 1)\n      setAlert(null)\n      computeFactorial(input - 1)\n    } else {\n      setAlert({\n        text: \"Factorial does not exist or too large\",\n        type: \"danger\",\n      })\n    }\n  }\n\n  useEffect(() => {\n    const updateResult = () => {\n      if (processed) {\n        const processedNumbers = processed.split(\" X \").map(Number)\n        if (processedNumbers.length <= 2) {\n          const [a = 1, b = 1] = processedNumbers\n          if (b === 1) setResult((a * b).toString())\n        }\n      }\n    }\n    updateResult()\n  }, [processed])\n\n  return (\n    <div className=\"factorial-container\">\n      {alert && (\n        <div className=\"factorial-row\">\n          <div className=\"factorial-col-full\">\n            <div className={`factorial-alert factorial-alert-${alert.type}`}>\n              <span>{alert.text}</span>\n              <button\n                className=\"factorial-alert-close\"\n                onClick={() => setAlert(null)}\n              >\n                ×\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"factorial-row text-center\">\n        <div className=\"factorial-col-full\">\n          <Input fact={fact} setResult={setResult} disabled={disabled} />\n        </div>\n      </div>\n\n      {parseInt(input) >= 0 && (\n        <div className=\"factorial-row text-center factorial-computation\">\n          <div className=\"factorial-col-2\">\n            <Element\n              highlight={true}\n              data={{ value: `${input}!` }}\n              type=\"array\"\n            />\n          </div>\n          <div className=\"factorial-col-2 factorial-icon\">\n            <FaEquals style={{ margin: \"auto 5px\" }} />\n          </div>\n          <div className=\"factorial-col-3\">\n            <Element data={{ value: processed }} type=\"array\" />\n          </div>\n          <div className=\"factorial-col-2 factorial-icon\">\n            <FaTimes style={{ margin: \"auto 5px\" }} />\n          </div>\n          <div className=\"factorial-col-3\">\n            <Element data={{ value: `${rest}!` }} type=\"array\" />\n          </div>\n        </div>\n      )}\n      {parseInt(result) >= 0 && (\n        <div className=\"factorial-row text-center factorial-result\">\n          <div className=\"factorial-col-full\">\n            <Element\n              highlight={true}\n              data={{ value: `${result}` }}\n              type=\"array\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Factorial\n"],"names":["Input","React","_ref","disabled","fact","setResult","input","setInput","useState","_jsxs","className","children","_jsx","htmlFor","type","id","onChange","event","target","value","placeholder","onClick","handleSubmit","parseInt","displayName","Element","lazy","Factorial","result","processed","setProcessed","rest","setRest","setDisabled","alert","setAlert","computeFactorial","currentValue","setTimeout","text","prevProcessed","processedNumbers","split","map","Number","length","a","b","toString","useEffect","updateResult","highlight","data","FaEquals","style","margin","FaTimes"],"sourceRoot":""}