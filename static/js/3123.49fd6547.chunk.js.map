{"version":3,"file":"static/js/3123.49fd6547.chunk.js","mappings":"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","sources":["routing/site/algo/components/Primes/Input.jsx","routing/site/algo/components/Primes/index.jsx"],"sourcesContent":["import React, { useState } from \"react\"\nimport \"./Input.css\"\n\nconst Input = React.memo(({ checkPrime }) => {\n  const [input, setInput] = useState(\"\")\n\n  const handleSubmit = () => {\n    if (input) {\n      checkPrime(parseInt(input))\n      setInput(\"\")\n    }\n  }\n\n  return (\n    <div className=\"primes-input-card\">\n      <h2 className=\"primes-input-header\">\n        Check whether input number is prime or composite\n      </h2>\n      <h4 className=\"primes-input-subheader\">\n        A prime number is only divisible by 1 and itself and has no other\n        factors\n      </h4>\n      <div className=\"primes-input-form\">\n        <div className=\"primes-input-group\">\n          <label htmlFor=\"primes-number-input\" className=\"primes-input-label\">\n            Number\n          </label>\n          <input\n            type=\"number\"\n            id=\"primes-number-input\"\n            className=\"primes-input-field\"\n            placeholder=\"Enter a number\"\n            onChange={(event) => setInput(event.target.value)}\n            value={input}\n          />\n        </div>\n        <button\n          className=\"primes-submit-btn\"\n          disabled={!input}\n          onClick={handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  )\n})\n\nInput.displayName = \"Primes.Input\"\n\nexport default Input\n","import React, { useCallback, useState } from \"react\"\nimport Input from \"./Input\"\nimport \"./Primes.css\"\n\nconst Primes = () => {\n  const [alert, setAlert] = useState(null)\n  const [testFactor, setTestFactor] = useState(null)\n\n  const checkPrime = useCallback((number) => {\n    setAlert(null)\n    if (number > 1000000 || number < 0) {\n      setAlert({\n        text: \"Number is not supported yet. Enter in range 0 to 1000000\",\n        type: \"danger\",\n      })\n      return\n    }\n\n    if (number <= 1) {\n      setAlert({\n        text: `${number} is not a valid prime`,\n        type: \"danger\",\n      })\n      return\n    }\n\n    if (number <= 3) {\n      setAlert({\n        text: `${number} is a valid prime`,\n        type: \"success\",\n      })\n      return\n    }\n\n    if (number % 2 === 0) {\n      setAlert({\n        text: `${number} is composite since it is divisible by 2`,\n        type: \"success\",\n      })\n      return\n    }\n\n    if (number % 3 === 0) {\n      setAlert({\n        text: `${number} is composite since it is divisible by 3`,\n        type: \"success\",\n      })\n      return\n    }\n\n    let delay = 1000\n\n    for (let factor = 5; factor * factor <= number; factor += 6) {\n      delay = delay + 100\n\n      if (number % factor === 0) {\n        setAlert({\n          text: `${number} is composite and has a factor ${factor}`,\n          type: \"success\",\n        })\n        setTimeout(() => {\n          setTestFactor(null)\n        }, delay)\n        return\n      } else if (number % (factor + 2) === 0) {\n        setAlert({\n          text: `${number} is composite and has a factor ${factor + 2}`,\n          type: \"success\",\n        })\n        setTimeout(() => {\n          setTestFactor(null)\n        }, delay)\n        return\n      } else {\n        setTimeout(() => {\n          setTestFactor(factor)\n        }, delay)\n      }\n    }\n    delay = delay + 1000\n    setTimeout(() => {\n      setTestFactor(null)\n      setAlert({\n        text: `${number} is a valid prime`,\n        type: \"success\",\n      })\n    }, delay)\n  }, [])\n\n  return (\n    <div className=\"primes-container\">\n      <div className=\"primes-row text-center\">\n        <div className=\"primes-col-full\">\n          <Input checkPrime={checkPrime} />\n        </div>\n        <div className=\"primes-col-full\">\n          {testFactor !== null && (\n            <div className=\"primes-alert primes-alert-info\">\n              <span>\n                {`Number is not divisible by ${testFactor} or ${\n                  testFactor + 2\n                }. Testing further ....`}\n              </span>\n            </div>\n          )}\n          {alert && (\n            <div className={`primes-alert primes-alert-${alert.type}`}>\n              <span>{alert.text}</span>\n              <button\n                className=\"primes-alert-close\"\n                onClick={() => setAlert(null)}\n              >\n                Ã—\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Primes\n"],"names":["Input","React","_ref","checkPrime","input","setInput","useState","_jsxs","className","children","_jsx","htmlFor","type","id","placeholder","onChange","event","target","value","disabled","onClick","handleSubmit","parseInt","displayName","Primes","alert","setAlert","testFactor","setTestFactor","useCallback","number","text","delay","factor","setTimeout"],"sourceRoot":""}