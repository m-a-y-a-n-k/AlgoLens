{"version":3,"file":"static/js/8817.563e91a2.chunk.js","mappings":"wLAGA,MAEMA,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4KAStBC,EAAWH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uKAWrBG,EAAQL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,mKAYpBK,EAAaP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,wQAgBvBO,EAAST,EAAAA,GAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,+JASnBS,EAAOX,EAAAA,GAAAA,IAAUY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,wKAiFvB,EAlEuBW,KACrB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAC5BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,MAC9BG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,IAEnCK,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BH,GACGI,GACCA,EAnF6B,GAmFhBV,EAA0C,KAC1D,GApFgC,IAuFnC,MAAO,IAAMW,cAAcH,EAAS,GACnC,CAACR,IAEJ,MAAMY,EAAkBT,EAASH,EAEjC,OACEa,EAAAA,EAAAA,MAAC5B,EAAS,CAAA6B,SAAA,EACRC,EAAAA,EAAAA,KAAClB,EAAI,CAAAiB,UACHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBAEND,EAAAA,EAAAA,MAACxB,EAAQ,CAAAyB,SAAA,EACPD,EAAAA,EAAAA,MAACtB,EAAK,CAAAuB,SAAA,CAAC,0BAELC,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,MAAOjB,EACPkB,SAAWC,IACT,MAAMC,EAAeC,OAAOF,EAAEG,OAAOL,OACjCG,GAAgB,GAAKA,GAAgB,IACvCnB,EAASmB,EAAa,QAI9BP,EAAAA,EAAAA,MAACtB,EAAK,CAAAuB,SAAA,CAAC,6BAELC,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,MAAOd,EACPe,SAAWC,IACT,MAAMI,EAAgBF,OAAOF,EAAEG,OAAOL,OAClCM,GAAiB,GAAKA,GAAiB,KACzCnB,EAAUmB,EAAc,WAKlCR,EAAAA,EAAAA,KAACtB,EAAU,CAAAqB,UACTC,EAAAA,EAAAA,KAACpB,EAAM,CACL6B,MAAO,CACLC,UAAU,aAADC,OAAevB,EAASwB,KAAKC,IAAIvB,GAAM,QAAAqB,OAC9CvB,EAASwB,KAAKE,IAAIxB,GAAM,aAKhCQ,EAAAA,EAAAA,MAAChB,EAAI,CAAAiB,SAAA,EACHD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,qBAAmBF,EAAgBkB,QAAQ,OAC9CjB,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,2BAAyBT,GAAS,EAAIsB,KAAKI,KAAKD,QAAQ,WAEnD,C","sources":["routing/site/physics/components/CircularMotion/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\n\nconst ROTATION_INTERVAL_MILLISECONDS = 16\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #f0f0f0;\n  font-family: Arial, sans-serif;\n`\n\nconst Controls = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`\n\nconst Label = styled.label`\n  margin: 10px;\n  font-size: 1.1em;\n\n  input {\n    margin-left: 10px;\n    padding: 5px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n  }\n`\n\nconst Visualizer = styled.div`\n  width: 300px;\n  height: 300px;\n  border: 2px dashed #ccc;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n\n  @media (min-width: 768px) {\n    width: 400px;\n    height: 400px;\n  }\n`\n\nconst Circle = styled.div`\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background-color: #3498db;\n  border-radius: 50%;\n  transition: transform 0.016s linear;\n`\n\nconst Info = styled.div`\n  margin-top: 20px;\n  text-align: center;\n\n  h4 {\n    padding: 8px;\n    font-size: 1.5em;\n  }\n\n  p {\n    margin: 5px 0;\n    font-size: 1.1em;\n  }\n`\n\nconst CircularMotion = () => {\n  const [speed, setSpeed] = useState(1) // radians per second\n  const [radius, setRadius] = useState(100) // pixels\n  const [angle, setAngle] = useState(0) // current angle in radians\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAngle(\n        (prevAngle) =>\n          prevAngle + (speed * ROTATION_INTERVAL_MILLISECONDS) / 1000\n      )\n    }, ROTATION_INTERVAL_MILLISECONDS)\n\n    return () => clearInterval(interval)\n  }, [speed])\n\n  const angularMomentum = radius * speed\n\n  return (\n    <Container>\n      <Info>\n        <h4>Circular Motion</h4>\n      </Info>\n      <Controls>\n        <Label>\n          Speed (0 to 16 rad/s):\n          <input\n            type=\"number\"\n            value={speed}\n            onChange={(e) => {\n              const updatedSpeed = Number(e.target.value)\n              if (updatedSpeed >= 0 && updatedSpeed <= 16)\n                setSpeed(updatedSpeed)\n            }}\n          />\n        </Label>\n        <Label>\n          Radius (0 to 120 pixels):\n          <input\n            type=\"number\"\n            value={radius}\n            onChange={(e) => {\n              const updatedRadius = Number(e.target.value)\n              if (updatedRadius >= 0 && updatedRadius <= 120)\n                setRadius(updatedRadius)\n            }}\n          />\n        </Label>\n      </Controls>\n      <Visualizer>\n        <Circle\n          style={{\n            transform: `translate(${radius * Math.cos(angle)}px, ${\n              radius * Math.sin(angle)\n            }px)`,\n          }}\n        />\n      </Visualizer>\n      <Info>\n        <p>Angular Momentum: {angularMomentum.toFixed(2)}</p>\n        <p>Number of Revolutions: {(angle / (2 * Math.PI)).toFixed(2)}</p>\n      </Info>\n    </Container>\n  )\n}\n\nexport default CircularMotion\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Controls","_templateObject2","Label","_templateObject3","Visualizer","_templateObject4","Circle","_templateObject5","Info","_templateObject6","CircularMotion","speed","setSpeed","useState","radius","setRadius","angle","setAngle","useEffect","interval","setInterval","prevAngle","clearInterval","angularMomentum","_jsxs","children","_jsx","type","value","onChange","e","updatedSpeed","Number","target","updatedRadius","style","transform","concat","Math","cos","sin","toFixed","PI"],"sourceRoot":""}