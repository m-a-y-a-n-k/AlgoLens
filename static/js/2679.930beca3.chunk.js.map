{"version":3,"file":"static/js/2679.930beca3.chunk.js","mappings":"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","sources":["webpack://AlgoLens/./src/routing/site/games/components/Tetris/Tetris.module.css?75d5","routing/site/games/components/Tetris/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Tetris_wrapper__tyoUR\",\"header\":\"Tetris_header__kD4CI\",\"title\":\"Tetris_title__PkIlj\",\"controls\":\"Tetris_controls__W9mJQ\",\"hud\":\"Tetris_hud__PSxWK\",\"stat\":\"Tetris_stat__+DQ84\",\"timerBar\":\"Tetris_timerBar__0Ag8C\",\"timerFill\":\"Tetris_timerFill__nD-BO\",\"timerText\":\"Tetris_timerText__EzvEJ\",\"bossBox\":\"Tetris_bossBox__-H5xz\",\"bossName\":\"Tetris_bossName__Aai1I\",\"bossTaunt\":\"Tetris_bossTaunt__WmmWl\",\"bonusPill\":\"Tetris_bonusPill__2fCAm\",\"stage\":\"Tetris_stage__AhbU8\",\"board\":\"Tetris_board__atPc4\",\"row\":\"Tetris_row__oLaNW\",\"cell\":\"Tetris_cell__w-NJA\",\"empty\":\"Tetris_empty__uM6wR\",\"ghost\":\"Tetris_ghost__4yHN0\",\"filled\":\"Tetris_filled__5zTmd\",\"sidebar\":\"Tetris_sidebar__hK+mX\",\"panel\":\"Tetris_panel__Ds7pd\",\"panelTitle\":\"Tetris_panelTitle__CkUU0\",\"panelBody\":\"Tetris_panelBody__s2xo9\",\"tauntSm\":\"Tetris_tauntSm__6+Rfc\",\"metaRow\":\"Tetris_metaRow__9AFuO\",\"nextList\":\"Tetris_nextList__g9jAi\",\"miniPiece\":\"Tetris_miniPiece__pvoxa\",\"miniRow\":\"Tetris_miniRow__-p93T\",\"miniCell\":\"Tetris_miniCell__5jYLo\",\"miniEmpty\":\"Tetris_miniEmpty__M-iIQ\",\"miniFilled\":\"Tetris_miniFilled__VGPn6\",\"holdBox\":\"Tetris_holdBox__oe6jD\",\"holdEmpty\":\"Tetris_holdEmpty__EkU5W\",\"gameOver\":\"Tetris_gameOver__xeJah\",\"victory\":\"Tetris_victory__CzU6I\"};","import React, { useEffect, useMemo, useState } from \"react\"\nimport styles from \"./Tetris.module.css\"\n\nconst COLS = 10\nconst ROWS = 20\nconst EMPTY = 0 // empty marker\nconst MAX_LEVEL = 50\n\nconst TETROMINOES = {\n  I: {\n    color: \"#5ab3ff\",\n    shapes: [\n      [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n      [\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n      ],\n    ],\n  },\n  J: {\n    color: \"#7fb4ff\",\n    shapes: [\n      [\n        [1, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0],\n      ],\n      [\n        [0, 1, 1],\n        [0, 1, 0],\n        [0, 1, 0],\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 0, 1],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 0],\n        [1, 1, 0],\n      ],\n    ],\n  },\n  L: {\n    color: \"#ffc857\",\n    shapes: [\n      [\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 0],\n        [0, 1, 1],\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [1, 0, 0],\n      ],\n      [\n        [1, 1, 0],\n        [0, 1, 0],\n        [0, 1, 0],\n      ],\n    ],\n  },\n  O: {\n    color: \"#ffb02e\",\n    shapes: [\n      [\n        [1, 1],\n        [1, 1],\n      ],\n    ],\n  },\n  S: {\n    color: \"#4ad6a7\",\n    shapes: [\n      [\n        [0, 1, 1],\n        [1, 1, 0],\n        [0, 0, 0],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 0, 1],\n      ],\n    ],\n  },\n  T: {\n    color: \"#b694ff\",\n    shapes: [\n      [\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 0, 0],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 1, 0],\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 1, 0],\n      ],\n      [\n        [0, 1, 0],\n        [1, 1, 0],\n        [0, 1, 0],\n      ],\n    ],\n  },\n  Z: {\n    color: \"#ff6b6b\",\n    shapes: [\n      [\n        [1, 1, 0],\n        [0, 1, 1],\n        [0, 0, 0],\n      ],\n      [\n        [0, 0, 1],\n        [0, 1, 1],\n        [0, 1, 0],\n      ],\n    ],\n  },\n}\nconst BAG_KEYS = Object.keys(TETROMINOES)\n\n// ——————————— Utility helpers ———————————\nconst makeEmptyBoard = () =>\n  Array.from({ length: ROWS }, () => Array(COLS).fill(EMPTY))\n\nfunction randomBag() {\n  const bag = [...BAG_KEYS]\n  for (let i = bag.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[bag[i], bag[j]] = [bag[j], bag[i]]\n  }\n  return bag\n}\n\nfunction rotate(shape, dir = 1) {\n  const N = shape.length\n  const res = Array.from({ length: N }, () => Array(N).fill(0))\n  for (let y = 0; y < N; y++) {\n    for (let x = 0; x < N; x++) {\n      if (dir > 0) res[x][N - 1 - y] = shape[y][x]\n      else res[N - 1 - x][y] = shape[y][x]\n    }\n  }\n  return res\n}\n\nconst cloneBoard = (b) => b.map((r) => [...r])\n\nfunction canPlace(board, shape, px, py) {\n  for (let y = 0; y < shape.length; y++) {\n    for (let x = 0; x < shape[y].length; x++) {\n      if (!shape[y][x]) continue\n      const nx = px + x\n      const ny = py + y\n      if (nx < 0 || nx >= COLS || ny >= ROWS) return false\n      if (ny >= 0 && board[ny][nx] !== EMPTY) return false\n    }\n  }\n  return true\n}\n\nfunction placePiece(board, shape, px, py, color) {\n  const out = cloneBoard(board)\n  for (let y = 0; y < shape.length; y++) {\n    for (let x = 0; x < shape[y].length; x++) {\n      if (!shape[y][x]) continue\n      const nx = px + x\n      const ny = py + y\n      if (ny >= 0) out[ny][nx] = color\n    }\n  }\n  return out\n}\n\nfunction clearLines(board) {\n  const remaining = board.filter((row) => row.some((c) => c === EMPTY))\n  const cleared = ROWS - remaining.length\n  const newRows = Array.from({ length: cleared }, () => Array(COLS).fill(EMPTY))\n  return { board: [...newRows, ...remaining], cleared }\n}\n\nfunction spawnPiece(key) {\n  const def = TETROMINOES[key]\n  const shape = def.shapes[0].map((r) => [...r])\n  const size = shape[0].length\n  return {\n    key,\n    color: def.color,\n    rotationIndex: 0,\n    shape,\n    x: Math.floor((COLS - size) / 2),\n    y: -2,\n  }\n}\n\n// Boss + difficulty\nfunction levelTimeLimit(level, isBonus) {\n  if (isBonus) return Math.max(240, 180 - Math.floor(level * 0.6))\n  return Math.max(360, 360 - level * 2)\n}\nfunction gravityForLevel(level) {\n  const base = 900 // ms\n  const step = 18 // per level faster\n  return Math.max(120, base - (level - 1) * step)\n}\nconst bossNames = [\n  \"Bitcrusher\",\n  \"Latency Lord\",\n  \"Null Pointer\",\n  \"Stack Smasher\",\n  \"Garbage Colossus\",\n  \"Packet Phantom\",\n  \"Heisen-Bug\",\n  \"Kernel Kraken\",\n  \"Cache Minotaur\",\n  \"Daemon Duke\",\n]\nconst bossTaunts = [\n  \"Feel the overclock!\",\n  \"I throttle time itself.\",\n  \"Your stack will overflow.\",\n  \"My speed is inevitable.\",\n  \"I'll fragment your hopes.\",\n  \"Packets lost, dreams gone.\",\n  \"Observe non-determinism!\",\n  \"Segfaulting your plans.\",\n  \"Cache this L.\",\n  \"Daemon time!\",\n]\nconst bossNameFor = (lvl) =>\n  `${bossNames[(lvl - 1) % bossNames.length]} v${lvl}`\nconst bossTauntFor = (lvl) => bossTaunts[(lvl - 1) % bossTaunts.length]\n\n// ——————————— Component ———————————\nexport default function TetrisBossRush() {\n  // board + pieces\n  const [board, setBoard] = useState(makeEmptyBoard())\n  const [bag, setBag] = useState(randomBag())\n  const [nextBag, setNextBag] = useState(randomBag())\n  const [queue, setQueue] = useState(() => {\n    const b = randomBag()\n    return b\n  })\n  const [current, setCurrent] = useState(() => spawnPiece(queue[0]))\n  const [hold, setHold] = useState(null)\n  const [canHold, setCanHold] = useState(true)\n\n  // meta\n  const [level, setLevel] = useState(1)\n  const [linesThisLevel, setLinesThisLevel] = useState(0)\n  const [score, setScore] = useState(0)\n  const [timeLeft, setTimeLeft] = useState(levelTimeLimit(1, false))\n  const [paused, setPaused] = useState(false)\n  const [gameOver, setGameOver] = useState(false)\n  const [medal, setMedal] = useState(false)\n  const [isBonus, setIsBonus] = useState(false)\n  const [bonusAchieved, setBonusAchieved] = useState(false)\n  const [bossRage, setBossRage] = useState(false)\n\n  // difficulty\n  const gravityMs = useMemo(\n    () => gravityForLevel(level) * (bossRage ? 0.5 : 1),\n    [level, bossRage]\n  )\n  const goalLines = isBonus ? 6 : 10\n\n  // ——— queue helpers\n  function shiftQueue() {\n    let q = [...queue]\n    let b = [...bag]\n    let nb = [...nextBag]\n\n    let key = q.shift()\n    if (q.length < 3) {\n      if (b.length === 0) {\n        b = nb\n        nb = randomBag()\n      }\n      q = [...q, ...b.splice(0, Math.min(7, b.length))]\n    }\n\n    setQueue(q)\n    setBag(b)\n    setNextBag(nb)\n    return key\n  }\n\n  function startLevel(lvl) {\n    const bonus = lvl % 5 === 0\n    setIsBonus(bonus)\n    setBonusAchieved(false)\n    setLinesThisLevel(0)\n    setBoard(makeEmptyBoard())\n    const nextKey = shiftQueue()\n    setCurrent(spawnPiece(nextKey))\n    setTimeLeft(levelTimeLimit(lvl, bonus))\n    setPaused(false)\n    setGameOver(false)\n    setCanHold(true)\n  }\n\n  // init\n  useEffect(() => {\n    startLevel(1)\n  }, [])\n\n  // gravity loop\n  useEffect(() => {\n    if (paused || gameOver || medal) return\n    const id = setInterval(() => {\n      setCurrent((cur) => {\n        if (!cur) return cur\n        const ny = cur.y + 1\n        if (canPlace(board, cur.shape, cur.x, ny)) return { ...cur, y: ny }\n        // lock\n        const placed = placePiece(board, cur.shape, cur.x, cur.y, cur.color)\n        const { board: clearedBoard, cleared } = clearLines(placed)\n\n        if (cleared > 0) {\n          const base = [0, 100, 300, 500, 800][cleared]\n          const timeGain = [0, 2, 5, 8, 12][cleared]\n          const mult = isBonus && bonusAchieved ? 2 : 1\n          setScore((s) => s + base * level * mult)\n          setLinesThisLevel((n) => n + cleared)\n          setTimeLeft((t) =>\n            Math.min(levelTimeLimit(level, isBonus), t + timeGain)\n          )\n        }\n\n        setBoard(clearedBoard)\n        setCanHold(true)\n\n        const nextKey = shiftQueue()\n        const next = spawnPiece(nextKey)\n        if (!canPlace(clearedBoard, next.shape, next.x, next.y)) {\n          setGameOver(true)\n          return cur\n        }\n        return next\n      })\n    }, gravityMs)\n    return () => clearInterval(id)\n  }, [board, gravityMs, paused, gameOver, medal, isBonus, bonusAchieved, level])\n\n  // boss rage pulses\n  useEffect(() => {\n    if (paused || gameOver || medal) return\n    const rageInterval = setInterval(() => {\n      setBossRage(true)\n      const calm = setTimeout(() => setBossRage(false), 4000)\n      return () => clearTimeout(calm)\n    }, 12000)\n    return () => clearInterval(rageInterval)\n  }, [paused, gameOver, medal, level])\n\n  // countdown\n  useEffect(() => {\n    if (paused || gameOver || medal) return\n    const tid = setInterval(() => {\n      setTimeLeft((t) => {\n        if (t <= 1) {\n          setGameOver(true)\n          return 0\n        }\n        return t - 1\n      })\n    }, 1000)\n    return () => clearInterval(tid)\n  }, [paused, gameOver, medal])\n\n  // progression\n  useEffect(() => {\n    if (gameOver || medal) return\n    if (linesThisLevel >= goalLines) {\n      if (isBonus) setBonusAchieved(true)\n      const next = level + 1\n      if (next > MAX_LEVEL) {\n        setMedal(true)\n        setPaused(true)\n        return\n      }\n      setLevel(next)\n      startLevel(next)\n    }\n  }, [linesThisLevel])\n\n  // controls\n  useEffect(() => {\n    function onKey(e) {\n      if (e.repeat) return\n      if (e.key === \"p\" || e.key === \"P\") {\n        setPaused((v) => !v)\n        return\n      }\n      if (e.key === \"r\" || e.key === \"R\") {\n        setLevel(1)\n        setScore(0)\n        setMedal(false)\n        startLevel(1)\n        return\n      }\n      if (paused || gameOver || medal) return\n\n      setCurrent((cur) => {\n        if (!cur) return cur\n        const tryMove = (nx, ny, nshape = cur.shape) =>\n          canPlace(board, nshape, nx, ny)\n            ? { ...cur, x: nx, y: ny, shape: nshape }\n            : cur\n        switch (e.key) {\n          case \"ArrowLeft\":\n          case \"a\":\n          case \"A\":\n            return tryMove(cur.x - 1, cur.y)\n          case \"ArrowRight\":\n          case \"d\":\n          case \"D\":\n            return tryMove(cur.x + 1, cur.y)\n          case \"ArrowDown\":\n          case \"s\":\n          case \"S\":\n            return tryMove(cur.x, cur.y + 1)\n          case \"ArrowUp\":\n          case \"w\":\n          case \"W\": {\n            let rotated = rotate(cur.shape, 1)\n            const kicks = [\n              [0, 0],\n              [-1, 0],\n              [1, 0],\n              [0, -1],\n              [-2, 0],\n              [2, 0],\n            ]\n            for (const [dx, dy] of kicks)\n              if (canPlace(board, rotated, cur.x + dx, cur.y + dy))\n                return { ...cur, shape: rotated, x: cur.x + dx, y: cur.y + dy }\n            return cur\n          }\n          case \"z\":\n          case \"Z\": {\n            const rotated = rotate(cur.shape, -1)\n            if (canPlace(board, rotated, cur.x, cur.y))\n              return { ...cur, shape: rotated }\n            return cur\n          }\n          case \"x\":\n          case \"X\": {\n            const rotated = rotate(cur.shape, 1)\n            if (canPlace(board, rotated, cur.x, cur.y))\n              return { ...cur, shape: rotated }\n            return cur\n          }\n          case \"c\":\n          case \"C\": {\n            // hold\n            if (!canHold) return cur\n            setCanHold(false)\n            if (!hold) {\n              setHold({ key: cur.key, color: cur.color, shape: cur.shape })\n              const nextKey = shiftQueue()\n              return spawnPiece(nextKey)\n            } else {\n              const swapKey = hold.key\n              setHold({ key: cur.key, color: cur.color, shape: cur.shape })\n              const swapped = spawnPiece(swapKey)\n              if (canPlace(board, swapped.shape, swapped.x, swapped.y))\n                return swapped\n              return cur\n            }\n          }\n          case \" \": {\n            let ny = cur.y\n            while (canPlace(board, cur.shape, cur.x, ny + 1)) ny++\n            return { ...cur, y: ny }\n          }\n          default:\n            return cur\n        }\n      })\n    }\n    window.addEventListener(\"keydown\", onKey)\n    return () => window.removeEventListener(\"keydown\", onKey)\n  }, [board, paused, gameOver, medal, canHold, hold])\n\n  // derived\n  const ghostY = useMemo(() => {\n    if (!current) return 0\n    let ny = current.y\n    while (canPlace(board, current.shape, current.x, ny + 1)) ny++\n    return ny\n  }, [board, current])\n\n  const upcoming = useMemo(() => queue.slice(0, 5), [queue])\n\n  const cellsToRender = useMemo(() => {\n    const temp = cloneBoard(board)\n    // ghost\n    if (current) {\n      for (let y = 0; y < current.shape.length; y++) {\n        for (let x = 0; x < current.shape[y].length; x++) {\n          if (!current.shape[y][x]) continue\n          const gx = current.x + x\n          const gy = ghostY + y\n          if (gy >= 0 && temp[gy][gx] === EMPTY) temp[gy][gx] = \"ghost\"\n        }\n      }\n      // active\n      for (let y = 0; y < current.shape.length; y++) {\n        for (let x = 0; x < current.shape[y].length; x++) {\n          if (!current.shape[y][x]) continue\n          const ax = current.x + x\n          const ay = current.y + y\n          if (ay >= 0) temp[ay][ax] = current.color\n        }\n      }\n    }\n    return temp\n  }, [board, current, ghostY])\n\n  // ——————————— Render ———————————\n  const bossName = bossNameFor(level)\n  const bossTaunt = bossTauntFor(level)\n\n  const Cell = ({ val }) => (\n    <div\n      className={`${styles.cell} ${\n        val === EMPTY\n          ? styles.empty\n          : val === \"ghost\"\n          ? styles.ghost\n          : styles.filled\n      }`}\n      style={val && val !== \"ghost\" ? { backgroundColor: val } : {}}\n    />\n  )\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.title}>Tetris: Boss Rush</div>\n        <div className={styles.controls}>\n          <span>\n            Controls: ← → move • ↓ soft drop • ↑/Z/X rotate • Space hard drop •\n            C hold • P pause • R restart\n          </span>\n        </div>\n      </div>\n\n      <div className={styles.hud}>\n        <div className={styles.stat}>\n          <span>Level</span>\n          <strong>{level}</strong>\n        </div>\n        <div className={styles.stat}>\n          <span>Score</span>\n          <strong>{score}</strong>\n        </div>\n        <div className={styles.stat}>\n          <span>Lines</span>\n          <strong>\n            {linesThisLevel}/{goalLines}\n          </strong>\n        </div>\n        <div className={styles.timerBar}>\n          <div\n            className={styles.timerFill}\n            style={{\n              width: `${(timeLeft / levelTimeLimit(level, isBonus)) * 100}%`,\n            }}\n          />\n          <div className={styles.timerText}>{timeLeft}s</div>\n        </div>\n        <div className={styles.bossBox} data-rage={bossRage ? \"1\" : \"0\"}>\n          <div className={styles.bossName}>{bossName}</div>\n          <div className={styles.bossTaunt}>{bossTaunt}</div>\n        </div>\n        {isBonus && (\n          <div className={styles.bonusPill}>\n            {bonusAchieved ? \"2x Active!\" : \"Bonus Stage\"}\n          </div>\n        )}\n      </div>\n\n      <div className={styles.stage}>\n        <div className={styles.board}>\n          {cellsToRender.map((row, y) => (\n            <div key={y} className={styles.row}>\n              {row.map((v, x) => (\n                <Cell key={`${x}-${y}`} val={v} />\n              ))}\n            </div>\n          ))}\n        </div>\n\n        <aside className={styles.sidebar}>\n          <div className={styles.panel}>\n            <div className={styles.panelTitle}>Next</div>\n            <div className={styles.nextList}>\n              {upcoming.map((k, i) => (\n                <div key={i} className={styles.miniPiece}>\n                  {TETROMINOES[k].shapes[0].map((r, ry) => (\n                    <div key={ry} className={styles.miniRow}>\n                      {r.map((c, rx) => (\n                        <div\n                          key={rx}\n                          className={`${styles.miniCell} ${\n                            c ? styles.miniFilled : styles.miniEmpty\n                          }`}\n                          style={\n                            c ? { backgroundColor: TETROMINOES[k].color } : {}\n                          }\n                        />\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className={styles.panel}>\n            <div className={styles.panelTitle}>Hold</div>\n            <div className={styles.holdBox}>\n              {hold ? (\n                TETROMINOES[hold.key].shapes[0].map((r, ry) => (\n                  <div key={ry} className={styles.miniRow}>\n                    {r.map((c, rx) => (\n                      <div\n                        key={rx}\n                        className={`${styles.miniCell} ${\n                          c ? styles.miniFilled : styles.miniEmpty\n                        }`}\n                        style={\n                          c\n                            ? { backgroundColor: TETROMINOES[hold.key].color }\n                            : {}\n                        }\n                      />\n                    ))}\n                  </div>\n                ))\n              ) : (\n                <div className={styles.holdEmpty}>—</div>\n              )}\n            </div>\n          </div>\n\n          <div className={styles.panel}>\n            <div className={styles.panelTitle}>Boss</div>\n            <div className={styles.panelBody}>\n              <div>\n                <strong>{bossName}</strong>\n              </div>\n              <div className={styles.tauntSm}>{bossTaunt}</div>\n              <div className={styles.metaRow}>\n                <span>Rage</span>\n                <span>{bossRage ? \"ON\" : \"off\"}</span>\n              </div>\n              <div className={styles.metaRow}>\n                <span>Stage</span>\n                <span>{isBonus ? \"Bonus\" : \"Normal\"}</span>\n              </div>\n            </div>\n          </div>\n\n          {gameOver && (\n            <div className={styles.gameOver}>\n              ⏳ Time&apos;s up! Press R to retry\n            </div>\n          )}\n          {medal && (\n            <div className={styles.victory}>\n              🏅 You cleared {MAX_LEVEL} bosses! Medal unlocked!\n            </div>\n          )}\n        </aside>\n      </div>\n    </div>\n  )\n}\n"],"names":["TETROMINOES","I","color","shapes","J","L","O","S","T","Z","BAG_KEYS","Object","keys","makeEmptyBoard","Array","from","length","fill","randomBag","bag","i","j","Math","floor","random","rotate","shape","dir","arguments","undefined","N","res","y","x","cloneBoard","b","map","r","canPlace","board","px","py","nx","ny","spawnPiece","key","def","size","rotationIndex","levelTimeLimit","level","isBonus","max","bossNames","bossTaunts","TetrisBossRush","setBoard","useState","setBag","nextBag","setNextBag","queue","setQueue","current","setCurrent","hold","setHold","canHold","setCanHold","setLevel","linesThisLevel","setLinesThisLevel","score","setScore","timeLeft","setTimeLeft","paused","setPaused","gameOver","setGameOver","medal","setMedal","setIsBonus","bonusAchieved","setBonusAchieved","bossRage","setBossRage","gravityMs","useMemo","gravityForLevel","goalLines","shiftQueue","q","nb","shift","splice","min","startLevel","lvl","bonus","nextKey","useEffect","id","setInterval","cur","_objectSpread","placed","out","placePiece","clearedBoard","cleared","remaining","filter","row","some","c","clearLines","base","timeGain","mult","s","n","t","next","clearInterval","rageInterval","calm","setTimeout","clearTimeout","tid","onKey","e","repeat","tryMove","nshape","rotated","kicks","dx","dy","swapKey","swapped","v","window","addEventListener","removeEventListener","ghostY","upcoming","slice","cellsToRender","temp","gx","gy","ax","ay","bossName","concat","bossTaunt","bossTauntFor","Cell","_ref","val","_jsx","className","styles","style","backgroundColor","_jsxs","children","width","k","ry","rx"],"sourceRoot":""}