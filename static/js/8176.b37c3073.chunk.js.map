{"version":3,"file":"static/js/8176.b37c3073.chunk.js","mappings":"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","sources":["routing/site/math/components/NumberSystems/NumberVisualizer.jsx","routing/site/math/components/NumberSystems/index.jsx"],"sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\nconst VisualizerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`\n\nconst NumberBlock = styled.div`\n  margin: 5px;\n  padding: 10px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n  font-size: 1.2em;\n  color: #333;\n  animation: fadeIn 0.5s ease-in-out;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  &:hover {\n    background-color: #ddd;\n    transform: scale(1.1);\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @media (max-width: 600px) {\n    font-size: 1em;\n    padding: 8px;\n  }\n`\n\nconst BaseLabel = styled.div`\n  margin-top: 20px;\n  font-size: 1.5em;\n  color: #61dafb;\n`\n\nconst NumberVisualizer = ({ number, base }) => {\n  const baseLabels = {\n    2: \"Binary\",\n    8: \"Octal\",\n    10: \"Decimal\",\n    16: \"Hexadecimal\",\n  }\n\n  const getSymbols = (num) => {\n    if (!num) return []\n\n    return num.split(\"\").map((digit, index) => (\n      <NumberBlock\n        key={index}\n        title={`Position: ${num.length - index - 1}, Value: ${digit}`}\n      >\n        {digit}\n      </NumberBlock>\n    ))\n  }\n\n  return (\n    <div>\n      <VisualizerContainer>{getSymbols(number, base)}</VisualizerContainer>\n      {number && (\n        <BaseLabel>{`Base: ${base} (${\n          baseLabels[base] || \"Custom Base\"\n        })`}</BaseLabel>\n      )}\n    </div>\n  )\n}\n\nexport default NumberVisualizer\n","import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport NumberVisualizer from \"./NumberVisualizer\"\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  background-color: #f8f8f8;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n`\n\nconst Title = styled.h1`\n  color: #333;\n  font-size: 2em;\n  margin-bottom: 20px;\n`\n\nconst Label = styled.label`\n  color: #555;\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`\n\nconst Input = styled.input`\n  margin: 10px;\n  padding: 10px;\n  font-size: 1.2em;\n  border: 2px solid #61dafb;\n  border-radius: 5px;\n  transition: border-color 0.3s ease;\n\n  &:focus {\n    border-color: #21a1f1;\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(33, 161, 241, 0.5);\n  }\n`\n\nconst Select = styled.select`\n  margin: 10px;\n  padding: 10px;\n  font-size: 1.2em;\n  border: 2px solid #61dafb;\n  border-radius: 5px;\n  transition: border-color 0.3s ease;\n\n  &:focus {\n    border-color: #21a1f1;\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(33, 161, 241, 0.5);\n  }\n`\n\nconst NumberConverter = () => {\n  const [number, setNumber] = useState(\"\")\n  const [baseFrom, setBaseFrom] = useState(10)\n  const [baseTo, setBaseTo] = useState(10)\n  const [convertedNumber, setConvertedNumber] = useState(\"\")\n\n  useEffect(() => {\n    const convertNumber = () => {\n      if (number === \"\") return \"\"\n      try {\n        const num = parseInt(number, baseFrom)\n        setConvertedNumber(num.toString(baseTo))\n      } catch (error) {\n        setConvertedNumber(\"Invalid Number\")\n      }\n    }\n    convertNumber()\n  }, [number, baseFrom, baseTo])\n\n  return (\n    <Container>\n      <Title>Number System Visualizer</Title>\n      <Label>\n        Input Number:\n        <Input\n          type=\"text\"\n          value={number}\n          onChange={(e) => setNumber(e.target.value)}\n          placeholder=\"Enter number\"\n        />\n      </Label>\n      <Label>\n        Source Base:\n        <Select\n          value={baseFrom}\n          onChange={(e) => setBaseFrom(parseInt(e.target.value))}\n        >\n          {[...Array(15).keys()].map((i) => (\n            <option key={i + 2} value={i + 2}>\n              {i + 2}\n            </option>\n          ))}\n        </Select>\n      </Label>\n      <Label>\n        Target Base:\n        <Select\n          value={baseTo}\n          onChange={(e) => setBaseTo(parseInt(e.target.value))}\n        >\n          {[...Array(15).keys()].map((i) => (\n            <option key={i + 2} value={i + 2}>\n              {i + 2}\n            </option>\n          ))}\n        </Select>\n      </Label>\n      <Label>Converted Number:</Label>\n      <NumberVisualizer number={convertedNumber} base={baseTo} />\n    </Container>\n  )\n}\n\nexport default NumberConverter\n"],"names":["VisualizerContainer","styled","_templateObject","_taggedTemplateLiteral","NumberBlock","_templateObject2","BaseLabel","_templateObject3","_ref","number","base","_jsxs","children","_jsx","num","split","map","digit","index","title","concat","length","Container","Title","Label","Input","_templateObject4","Select","_templateObject5","NumberConverter","setNumber","useState","baseFrom","setBaseFrom","baseTo","setBaseTo","convertedNumber","setConvertedNumber","useEffect","convertNumber","parseInt","toString","error","type","value","onChange","e","target","placeholder","Array","keys","i","NumberVisualizer"],"sourceRoot":""}