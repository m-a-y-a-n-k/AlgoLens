{"version":3,"file":"static/js/4558.894fd3ed.chunk.js","mappings":"mKAGA,MAAMA,EAAe,CACnBC,MAAO,GACPC,MAAO,IAGHC,EAAeA,CAACC,EAAOC,KAC3B,OAAQA,EAAOC,MACb,IAAK,WACH,MAAO,IAAKF,EAAOH,MAAO,IAAIG,EAAMH,MAAOI,EAAOE,UACpD,IAAK,WACH,MAAO,IAAKH,EAAOF,MAAO,IAAIE,EAAMF,MAAOG,EAAOE,UACpD,IAAK,cACH,OAAOP,EACT,QACE,OAAOI,EACX,EAwDII,EAAYC,EAAAA,GAAAA,GAAW;;;;EAMvBC,EAASD,EAAAA,GAAAA,EAAU;;EAInBE,EAASF,EAAAA,GAAAA,MAAc;;;;;;;;;;;;;;EAgBvBG,EAAcH,EAAAA,GAAAA,GAAW;;;;;EAOzBI,EAAiBJ,EAAAA,GAAAA,GAAW;;;;;;;;;EAW5BK,EAAOL,EAAAA,GAAAA,GAAW;;;;;;;;;;;UAWbM,GAAUA,EAAMC;SACjBD,GAAUA,EAAME;EAGpBC,EAAWC,EAAAA,EAAU;;;;;;;;;EAWrBC,EAAOX,EAAAA,GAAAA,IAAAA,OAAkBM,IAAK,CAClCM,UACEC,EAAAA,EAAAA,KAAA,QACEC,GAAIR,EAAMQ,GACVC,GAAIT,EAAMS,GACVC,GAAIV,EAAMU,GACVC,GAAIX,EAAMW,GACVC,OAAO,aAGT;;;;eAIWT;EAGf,EA5IwBU,KACtB,MAAOxB,EAAOyB,IAAYC,EAAAA,EAAAA,YAAW3B,EAAcH,IAC7C,MAAEC,EAAK,MAAEC,GAAUE,EAuBzB,OACE2B,EAAAA,EAAAA,MAACvB,EAAS,CAAAa,SAAA,EACRC,EAAAA,EAAAA,KAACZ,EAAM,CAAAW,SAAC,iCACRU,EAAAA,EAAAA,MAACnB,EAAW,CAAAS,SAAA,EACVC,EAAAA,EAAAA,KAACX,EAAM,CAACqB,QAzBQC,KACpB,MAAMC,EAAKjC,EAAMkC,OAAS,EACpBnB,EAAI,GAAqB,IAAhBoB,KAAKC,SACdpB,EAAI,GAAqB,IAAhBmB,KAAKC,SACpBR,EAAS,CAAEvB,KAAM,WAAYC,QAAS,CAAE2B,KAAIlB,IAAGC,MAAM,EAqBlBI,SAAC,cAChCC,EAAAA,EAAAA,KAACX,EAAM,CAACqB,QAnBQM,KACpB,GAAIrC,EAAMkC,OAAS,EAAG,OACtB,MAAMI,EAAStC,EAAMmC,KAAKI,MAAMJ,KAAKC,SAAWpC,EAAMkC,SAASD,GAC/D,IAAIO,EACJ,GACEA,EAASxC,EAAMmC,KAAKI,MAAMJ,KAAKC,SAAWpC,EAAMkC,SAASD,SAClDK,IAAWE,GACpBZ,EAAS,CAAEvB,KAAM,WAAYC,QAAS,CAAEgC,SAAQE,WAAW,EAYxBpB,SAAC,cAChCC,EAAAA,EAAAA,KAACX,EAAM,CAACqB,QAVWU,KACvBb,EAAS,CAAEvB,KAAM,eAAgB,EASKe,SAAC,mBACtB,KACfU,EAAAA,EAAAA,MAAClB,EAAc,CAAAQ,SAAA,CACZnB,EAAMyC,KAAI,CAACC,EAAMC,KAChBvB,EAAAA,EAAAA,KAACF,EAAI,CAEHG,GAAItB,EAAM6C,MAAMC,GAASA,EAAKb,KAAOU,EAAKL,SAAQvB,EAClDQ,GAAIvB,EAAM6C,MAAMC,GAASA,EAAKb,KAAOU,EAAKL,SAAQtB,EAClDQ,GAAIxB,EAAM6C,MAAMC,GAASA,EAAKb,KAAOU,EAAKH,SAAQzB,EAClDU,GAAIzB,EAAM6C,MAAMC,GAASA,EAAKb,KAAOU,EAAKH,SAAQxB,GAJ7C4B,KAOR5C,EAAM0C,KAAKI,IACVzB,EAAAA,EAAAA,KAACR,EAAI,CAAeE,EAAG+B,EAAK/B,EAAGC,EAAG8B,EAAK9B,EAAEI,SACtC0B,EAAKb,IADGa,EAAKb,WAKV,C","sources":["routing/site/ds/components/Graph/index.jsx"],"sourcesContent":["import React, { useReducer } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\n\nconst initialState = {\n  nodes: [],\n  edges: [],\n}\n\nconst graphReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_NODE\":\n      return { ...state, nodes: [...state.nodes, action.payload] }\n    case \"ADD_EDGE\":\n      return { ...state, edges: [...state.edges, action.payload] }\n    case \"CLEAR_GRAPH\":\n      return initialState\n    default:\n      return state\n  }\n}\n\nconst GraphVisualizer = () => {\n  const [state, dispatch] = useReducer(graphReducer, initialState)\n  const { nodes, edges } = state\n\n  const handleAddNode = () => {\n    const id = nodes.length + 1\n    const x = 50 + Math.random() * 200\n    const y = 50 + Math.random() * 200\n    dispatch({ type: \"ADD_NODE\", payload: { id, x, y } })\n  }\n\n  const handleAddEdge = () => {\n    if (nodes.length < 2) return\n    const source = nodes[Math.floor(Math.random() * nodes.length)].id\n    let target\n    do {\n      target = nodes[Math.floor(Math.random() * nodes.length)].id\n    } while (source === target)\n    dispatch({ type: \"ADD_EDGE\", payload: { source, target } })\n  }\n\n  const handleClearGraph = () => {\n    dispatch({ type: \"CLEAR_GRAPH\" })\n  }\n\n  return (\n    <Container>\n      <Header>Randomized Graph Visualizer</Header>\n      <ButtonGroup>\n        <Button onClick={handleAddNode}>Add Node</Button>\n        <Button onClick={handleAddEdge}>Add Edge</Button>\n        <Button onClick={handleClearGraph}>Clear Graph</Button>\n      </ButtonGroup>{\" \"}\n      <GraphContainer>\n        {edges.map((edge, index) => (\n          <Edge\n            key={index}\n            x1={nodes.find((node) => node.id === edge.source).x}\n            y1={nodes.find((node) => node.id === edge.source).y}\n            x2={nodes.find((node) => node.id === edge.target).x}\n            y2={nodes.find((node) => node.id === edge.target).y}\n          />\n        ))}\n        {nodes.map((node) => (\n          <Node key={node.id} x={node.x} y={node.y}>\n            {node.id}\n          </Node>\n        ))}\n      </GraphContainer>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Header = styled.h4`\n  color: #1b368d;\n`\n\nconst Button = styled.button`\n  margin: 10px;\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  align-items: center;\n`\n\nconst GraphContainer = styled.div`\n  position: relative;\n  width: 90%;\n  height: 70vh;\n  max-width: 800px;\n  min-width: 300px;\n  min-height: 300px;\n  border: 1px solid #ccc;\n  margin: 20px auto;\n`\n\nconst Node = styled.div`\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  background-color: #007bff;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  left: ${(props) => props.x}px;\n  top: ${(props) => props.y}px;\n`\n\nconst drawLine = keyframes`\n  from {\n    stroke-dasharray: 1000;\n    stroke-dashoffset: 1000;\n  }\n  to {\n    stroke-dasharray: 1000;\n    stroke-dashoffset: 0;\n  }\n`\n\nconst Edge = styled.svg.attrs((props) => ({\n  children: (\n    <line\n      x1={props.x1}\n      y1={props.y1}\n      x2={props.x2}\n      y2={props.y2}\n      stroke=\"black\"\n    />\n  ),\n}))`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  animation: ${drawLine} 1s linear;\n`\n\nexport default GraphVisualizer\n"],"names":["initialState","nodes","edges","graphReducer","state","action","type","payload","Container","styled","Header","Button","ButtonGroup","GraphContainer","Node","props","x","y","drawLine","keyframes","Edge","children","_jsx","x1","y1","x2","y2","stroke","GraphVisualizer","dispatch","useReducer","_jsxs","onClick","handleAddNode","id","length","Math","random","handleAddEdge","source","floor","target","handleClearGraph","map","edge","index","find","node"],"sourceRoot":""}