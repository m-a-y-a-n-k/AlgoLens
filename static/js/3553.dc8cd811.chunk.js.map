{"version":3,"file":"static/js/3553.dc8cd811.chunk.js","mappings":"wIACA,QAA4B,gCAA5B,EAAkE,0BAAlE,EAAmG,2B,eCEnG,MA4FA,EA5FqBA,KACnB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAClCC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,CAAC,GAAI,GAAI,MACnCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,IACpCO,EAAWC,IAAgBR,EAAAA,EAAAA,WAAS,GAErCS,GAAWC,EAAAA,EAAAA,QAAO,OAGxBC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAc,CAAC,GAAI,GAAI,IAC7B,IAAK,IAAIC,EAAIf,EAAUe,GAAK,EAAGA,IAC7BD,EAAY,GAAGE,KAAKD,GAEtBX,EAAQU,GACRN,EAAa,GACbE,GAAa,GAEb,MAAMO,EAAiB,GACjBC,EAAaA,CAACC,EAAGC,EAAMC,EAAIC,KACrB,IAANH,IACJD,EAAWC,EAAI,EAAGC,EAAME,EAAKD,GAC7BJ,EAAeD,KAAK,CAACI,EAAMC,IAC3BH,EAAWC,EAAI,EAAGG,EAAKD,EAAID,GAAK,EAGlCF,EAAWlB,EAAU,EAAG,EAAG,GAC3BM,EAASW,EAAe,GACvB,CAACjB,KAGJa,EAAAA,EAAAA,YAAU,KACR,GAAKJ,KAAaF,GAAaF,EAAMkB,QAarC,OAXAZ,EAASa,QAAUC,YAAW,KAC5B,MAAOL,EAAMC,GAAMhB,EAAME,GACzBH,GAASsB,IACP,MAAMC,EAAUD,EAAKE,KAAKC,GAAQ,IAAIA,KAChCC,EAAOH,EAAQP,GAAMW,MAE3B,OADAJ,EAAQN,GAAIL,KAAKc,GACVH,CAAO,IAEhBnB,EAAaD,EAAY,EAAE,GAC1B,KAEI,IAAMyB,aAAarB,EAASa,QAAQ,GAC1C,CAACjB,EAAWF,EAAOI,IAKtB,OACEwB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEC,aAAc,QAASF,SAAA,EACnCD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,mBACY,KACjBG,EAAAA,EAAAA,KAAA,SACEC,KAAK,SACLC,IAAI,IACJC,IAAI,IACJC,MAAOzC,EACP0C,SAAWC,GAAM1C,EAAY2C,OAAOD,EAAEE,OAAOJ,cAGjDJ,EAAAA,EAAAA,KAAA,UAAQS,QAhBMC,IAAMrC,GAAa,GAgBHyB,MAAO,CAAEa,WAAY,QAASd,SAAC,WAG7DG,EAAAA,EAAAA,KAAA,UAAQS,QAlBKG,IAAMvC,GAAa,GAkBHyB,MAAO,CAAEa,WAAY,OAAQd,SAAC,aAK7DG,EAAAA,EAAAA,KAAA,OAAKa,UAAWC,EAAiBjB,SAC9B/B,EAAKyB,KAAI,CAACwB,EAAKC,KACdhB,EAAAA,EAAAA,KAAA,OAAoBa,UAAWC,EAAWjB,SACvCkB,EAAIxB,KAAI,CAACE,EAAMwB,KACdjB,EAAAA,EAAAA,KAAA,OAEEa,UAAWC,EACXhB,MAAO,CAAEoB,MAAiB,GAAPzB,EAAF,MAAkBI,SAElCJ,GAJIwB,MAHDD,SAaV,C","sources":["webpack://app/./src/routing/site/algo/components/TowerOfHanoi/TowerOfHanoi.module.css?412e","routing/site/algo/components/TowerOfHanoi/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TowerOfHanoi_container__d1uzv\",\"rod\":\"TowerOfHanoi_rod__7Y6bo\",\"disk\":\"TowerOfHanoi_disk__pQo9B\"};","import React, { useState, useEffect, useRef } from \"react\"\r\nimport styles from \"./TowerOfHanoi.module.css\"\r\n\r\nconst TowerOfHanoi = () => {\r\n  const [numDisks, setNumDisks] = useState(3)\r\n  const [rods, setRods] = useState([[], [], []])\r\n  const [moves, setMoves] = useState([])\r\n  const [moveIndex, setMoveIndex] = useState(0)\r\n  const [isRunning, setIsRunning] = useState(false)\r\n\r\n  const timerRef = useRef(null)\r\n\r\n  // Initialize rods and moves whenever numDisks changes\r\n  useEffect(() => {\r\n    const initialRods = [[], [], []]\r\n    for (let i = numDisks; i >= 1; i--) {\r\n      initialRods[0].push(i)\r\n    }\r\n    setRods(initialRods)\r\n    setMoveIndex(0)\r\n    setIsRunning(false)\r\n\r\n    const generatedMoves = []\r\n    const solveHanoi = (n, from, to, aux) => {\r\n      if (n === 0) return\r\n      solveHanoi(n - 1, from, aux, to)\r\n      generatedMoves.push([from, to])\r\n      solveHanoi(n - 1, aux, to, from)\r\n    }\r\n\r\n    solveHanoi(numDisks, 0, 2, 1)\r\n    setMoves(generatedMoves)\r\n  }, [numDisks])\r\n\r\n  // Animate moves\r\n  useEffect(() => {\r\n    if (!isRunning || moveIndex >= moves.length) return\r\n\r\n    timerRef.current = setTimeout(() => {\r\n      const [from, to] = moves[moveIndex]\r\n      setRods((prev) => {\r\n        const newRods = prev.map((arr) => [...arr])\r\n        const disk = newRods[from].pop()\r\n        newRods[to].push(disk)\r\n        return newRods\r\n      })\r\n      setMoveIndex(moveIndex + 1)\r\n    }, 700)\r\n\r\n    return () => clearTimeout(timerRef.current)\r\n  }, [moveIndex, moves, isRunning])\r\n\r\n  const handleStart = () => setIsRunning(true)\r\n  const handleStop = () => setIsRunning(false)\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <label>\r\n          Number of Disks:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            max=\"8\"\r\n            value={numDisks}\r\n            onChange={(e) => setNumDisks(Number(e.target.value))}\r\n          />\r\n        </label>\r\n        <button onClick={handleStart} style={{ marginLeft: \"10px\" }}>\r\n          Start\r\n        </button>\r\n        <button onClick={handleStop} style={{ marginLeft: \"5px\" }}>\r\n          Stop\r\n        </button>\r\n      </div>\r\n\r\n      <div className={styles.container}>\r\n        {rods.map((rod, rodIndex) => (\r\n          <div key={rodIndex} className={styles.rod}>\r\n            {rod.map((disk, diskIndex) => (\r\n              <div\r\n                key={diskIndex}\r\n                className={styles.disk}\r\n                style={{ width: `${disk * 20}px` }}\r\n              >\r\n                {disk}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TowerOfHanoi\r\n"],"names":["TowerOfHanoi","numDisks","setNumDisks","useState","rods","setRods","moves","setMoves","moveIndex","setMoveIndex","isRunning","setIsRunning","timerRef","useRef","useEffect","initialRods","i","push","generatedMoves","solveHanoi","n","from","to","aux","length","current","setTimeout","prev","newRods","map","arr","disk","pop","clearTimeout","_jsxs","children","style","marginBottom","_jsx","type","min","max","value","onChange","e","Number","target","onClick","handleStart","marginLeft","handleStop","className","styles","rod","rodIndex","diskIndex","width"],"sourceRoot":""}