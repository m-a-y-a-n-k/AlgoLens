"use strict";(self.webpackChunkAlgoLens=self.webpackChunkAlgoLens||[]).push([[3649],{3649:(e,s,i)=>{i.r(s),i.d(s,{default:()=>F});var t=i(2791);const r="PrimsMST_container__u80CN",n="PrimsMST_title__CYntt",a="PrimsMST_legend__NEapw",l="PrimsMST_legendItem__XcLkX",d="PrimsMST_legendBox__Qm-F5",m="PrimsMST_legendVisited__CGNRL",c="PrimsMST_legendCurrent__kAk6k",o="PrimsMST_legendMstEdge__DA8db",h="PrimsMST_legendConsidering__Veebh",_="PrimsMST_infoPanel__+zy1A",x="PrimsMST_infoItem__-hUKZ",g="PrimsMST_infoLabel__B+G-x",S="PrimsMST_infoValue__1cd2n",j="PrimsMST_completeMessage__hwruz",u="PrimsMST_controls__9XDyt",T="PrimsMST_btnPrimary__FTnV+",f="PrimsMST_graphContainer__9Hfdq",N="PrimsMST_svg__0WzfH",M="PrimsMST_edge__7C463",w="PrimsMST_mstEdge__loyre",v="PrimsMST_consideringEdge__m2hNt",P="PrimsMST_edgeWeight__DpTxq",y="PrimsMST_mstWeight__hlzWS",p="PrimsMST_node__8qB1O",C="PrimsMST_visitedNode__WRPRi",A="PrimsMST_currentNode__K3FkF",$="PrimsMST_nodeLabel__sFCHv",E="PrimsMST_explanation__8qhFC",k="PrimsMST_complexity__LzBsG";var b=i(184);const F=()=>{const e=[{id:"A",x:150,y:100},{id:"B",x:350,y:100},{id:"C",x:550,y:100},{id:"D",x:150,y:250},{id:"E",x:350,y:250},{id:"F",x:550,y:250},{id:"G",x:250,y:400},{id:"H",x:450,y:400}],s=[{from:"A",to:"B",weight:4},{from:"A",to:"D",weight:2},{from:"B",to:"C",weight:6},{from:"B",to:"E",weight:3},{from:"C",to:"F",weight:1},{from:"D",to:"E",weight:7},{from:"D",to:"G",weight:5},{from:"E",to:"F",weight:8},{from:"E",to:"G",weight:2},{from:"E",to:"H",weight:4},{from:"F",to:"H",weight:3},{from:"G",to:"H",weight:9}],[i,F]=(0,t.useState)([]),[B,H]=(0,t.useState)([]),[W,D]=(0,t.useState)(null),[G,L]=(0,t.useState)(null),[V,z]=(0,t.useState)(0),[R,q]=(0,t.useState)(0),[X,I]=(0,t.useState)(!1),[K,O]=(0,t.useState)(!1);(0,t.useEffect)((()=>{U()}),[]);const Q=e=>new Promise((s=>setTimeout(s,e))),U=async()=>{O(!0);const i=new Set,t=[];let r=0;for(i.add("A"),F(["A"]),D("A"),await Q(1200);i.size<e.length;){z((e=>e+1));let e=null,n=1/0;for(const t of s){const{from:s,to:r,weight:a}=t,l=i.has(s),d=i.has(r);l&&!d?(L({from:s,to:r}),await Q(300),a<n&&(n=a,e={from:s,to:r,weight:a})):d&&!l&&(L({from:r,to:s}),await Q(300),a<n&&(n=a,e={from:r,to:s,weight:a}))}if(L(null),!e)break;t.push(e),i.add(e.to),r+=e.weight,H([...t]),F([...i]),D(e.to),q(r),await Q(1200)}D(null),I(!0),O(!1)},Y=s=>{const i=e.find((e=>e.id===s));return i?{x:i.x,y:i.y}:{x:0,y:0}};return(0,b.jsxs)("div",{className:r,children:[(0,b.jsx)("h1",{className:n,children:"Prim's Minimum Spanning Tree \ud83c\udf33"}),(0,b.jsxs)("div",{className:a,children:[(0,b.jsxs)("div",{className:l,children:[(0,b.jsx)("div",{className:`${d} ${m}`}),(0,b.jsx)("span",{children:"Visited Node"})]}),(0,b.jsxs)("div",{className:l,children:[(0,b.jsx)("div",{className:`${d} ${c}`}),(0,b.jsx)("span",{children:"Current Node"})]}),(0,b.jsxs)("div",{className:l,children:[(0,b.jsx)("div",{className:`${d} ${o}`}),(0,b.jsx)("span",{children:"MST Edge"})]}),(0,b.jsxs)("div",{className:l,children:[(0,b.jsx)("div",{className:`${d} ${h}`}),(0,b.jsx)("span",{children:"Considering"})]})]}),(0,b.jsxs)("div",{className:_,children:[(0,b.jsxs)("div",{className:x,children:[(0,b.jsx)("span",{className:g,children:"Step:"}),(0,b.jsx)("span",{className:S,children:V})]}),(0,b.jsxs)("div",{className:x,children:[(0,b.jsx)("span",{className:g,children:"MST Edges:"}),(0,b.jsx)("span",{className:S,children:B.length})]}),(0,b.jsxs)("div",{className:x,children:[(0,b.jsx)("span",{className:g,children:"Total Weight:"}),(0,b.jsx)("span",{className:S,children:R})]}),X&&(0,b.jsxs)("div",{className:j,children:["\u2713 MST Complete! Minimum weight: ",R]})]}),(0,b.jsx)("div",{className:u,children:(0,b.jsx)("button",{onClick:()=>{K||(F([]),H([]),D(null),L(null),z(0),q(0),I(!1),U())},disabled:K,className:T,children:K?"Running...":"Restart Animation"})}),(0,b.jsx)("div",{className:f,children:(0,b.jsxs)("svg",{width:"700",height:"500",className:N,children:[s.map(((e,s)=>{const i=Y(e.from),t=Y(e.to),r=(n=e.from,a=e.to,B.some((e=>e.from===n&&e.to===a||e.from===a&&e.to===n)));var n,a;const l=((e,s)=>!!G&&(G.from===e&&G.to===s||G.from===s&&G.to===e))(e.from,e.to);return(0,b.jsxs)("g",{children:[(0,b.jsx)("line",{x1:i.x,y1:i.y,x2:t.x,y2:t.y,className:`${M} ${r?w:l?v:""}`,strokeWidth:r?"4":l?"3":"2"}),(0,b.jsx)("text",{x:(i.x+t.x)/2,y:(i.y+t.y)/2,className:`${P} ${r?y:""}`,children:e.weight})]},`edge-${s}`)})),e.map((e=>{const s=i.includes(e.id),t=W===e.id;return(0,b.jsxs)("g",{children:[(0,b.jsx)("circle",{cx:e.x,cy:e.y,r:"28",className:`${p} ${s?C:""} ${t?A:""}`}),(0,b.jsx)("text",{x:e.x,y:e.y,textAnchor:"middle",dy:".35em",className:$,children:e.id})]},e.id)}))]})}),(0,b.jsxs)("div",{className:E,children:[(0,b.jsx)("h3",{children:"How Prim's Algorithm Works:"}),(0,b.jsxs)("ol",{children:[(0,b.jsx)("li",{children:"Start with any vertex (here we start at node A)"}),(0,b.jsx)("li",{children:"Add the minimum weight edge that connects a visited vertex to an unvisited vertex"}),(0,b.jsx)("li",{children:"Mark the newly connected vertex as visited"}),(0,b.jsx)("li",{children:"Repeat step 2-3 until all vertices are included in the MST"}),(0,b.jsx)("li",{children:"The result is a Minimum Spanning Tree - a tree that connects all vertices with minimum total edge weight"})]}),(0,b.jsxs)("p",{className:k,children:[(0,b.jsx)("strong",{children:"Time Complexity:"})," O(E log V) with binary heap, where E = edges, V = vertices"]})]})]})}}}]);
//# sourceMappingURL=3649.9386f99e.chunk.js.map