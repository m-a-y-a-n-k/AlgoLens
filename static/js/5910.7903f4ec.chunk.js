"use strict";(self.webpackChunkAlgoLens=self.webpackChunkAlgoLens||[]).push([[5910],{5910:(e,s,l)=>{l.r(s),l.d(s,{default:()=>G});var n=l(2791);const a="BPlusTree_container__igsUJ",r="BPlusTree_title__0Pz9C",t="BPlusTree_description__1za5n",i="BPlusTree_section__9oC6S",c="BPlusTree_initGroup__1BCM1",o="BPlusTree_info__I16zB",h="BPlusTree_operations__JHxyO",d="BPlusTree_operationCard__3+ECm",u="BPlusTree_inputGroup__z+YxJ",x="BPlusTree_input__MLbGM",_="BPlusTree_btnPrimary__9Kq2V",m="BPlusTree_btnSecondary__uReDK",j="BPlusTree_btnOperation__5peao",p="BPlusTree_lastOperation__09vFt",N="BPlusTree_treeContainer__JTNoj",y="BPlusTree_treeSvg__RKt5Z",f="BPlusTree_internalNodeBox__XQdTZ",g="BPlusTree_leafNodeBox__BERtV",v="BPlusTree_edge__CU-3X",k="BPlusTree_separator__Jc5GE",T="BPlusTree_keyText__VtYRW",B="BPlusTree_highlighted__UPr17",P="BPlusTree_leafLabel__ZyoEA",L="BPlusTree_internalLabel__kCvKa",b="BPlusTree_leafLink__mgsiN",C="BPlusTree_treeNote__MzyLG",S="BPlusTree_comparisonGrid__80+OQ",w="BPlusTree_comparisonCard__aCPYc",E="BPlusTree_bplus__COhu-",I="BPlusTree_btree__lA5C4",O="BPlusTree_complexityGrid__BPP5x",A="BPlusTree_complexityCard__Jrjgl",F="BPlusTree_complexity__Y8+jH",K="BPlusTree_note__T0xI1",M="BPlusTree_explanation__XlCp8";var R=l(184);class z{constructor(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.keys=[],this.children=[],this.values=[],this.isLeaf=e,this.next=null}}class Q{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:4;this.root=new z(!0),this.order=e,this.maxKeys=e-1,this.minKeys=Math.ceil(e/2)-1}search(e){return this.searchNode(this.root,e)}searchNode(e,s){if(e.isLeaf){const l=e.keys.indexOf(s);return-1!==l?e.values[l]:null}let l=0;for(;l<e.keys.length&&s>=e.keys[l];)l++;return this.searchNode(e.children[l],s)}insert(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;if(this.root.keys.length===this.maxKeys){const e=new z(!1);e.children.push(this.root),this.splitChild(e,0),this.root=e}this.insertNonFull(this.root,e,s)}insertNonFull(e,s,l){if(e.isLeaf){let n=0;for(;n<e.keys.length&&s>e.keys[n];)n++;e.keys.splice(n,0,s),e.values.splice(n,0,l)}else{let n=0;for(;n<e.keys.length&&s>=e.keys[n];)n++;e.children[n].keys.length===this.maxKeys&&(this.splitChild(e,n),s>=e.keys[n]&&n++),this.insertNonFull(e.children[n],s,l)}}splitChild(e,s){const l=e.children[s],n=new z(l.isLeaf),a=Math.ceil(this.maxKeys/2);if(l.isLeaf){const r=l.keys[a];n.keys=l.keys.slice(a),n.values=l.values.slice(a),l.keys=l.keys.slice(0,a),l.values=l.values.slice(0,a),n.next=l.next,l.next=n,e.keys.splice(s,0,r)}else{const r=l.keys[a-1];n.keys=l.keys.slice(a),n.children=l.children.slice(a),l.keys=l.keys.slice(0,a-1),l.children=l.children.slice(0,a),e.keys.splice(s,0,r)}e.children.splice(s+1,0,n)}getHeight(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return e.isLeaf?1:1+this.getHeight(e.children[0])}getAllLeaves(){const e=[];let s=this.getFirstLeaf(this.root);for(;s;)e.push(s),s=s.next;return e}getFirstLeaf(e){return e.isLeaf?e:this.getFirstLeaf(e.children[0])}clone(){const e=new Q(this.order),{clonedRoot:s,leafMap:l}=this.cloneNode(this.root);e.root=s;const n=Object.keys(l).sort(((e,s)=>parseInt(e)-parseInt(s)));for(let a=0;a<n.length-1;a++)l[n[a]].next=l[n[a+1]];return e}cloneNode(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e)return{clonedRoot:null,leafMap:s};const l=new z(e.isLeaf);if(l.keys=[...e.keys],l.values=[...e.values],e.isLeaf){const n=e.keys.join("-");s[n]=l}else e.children.forEach((e=>{const{clonedRoot:n}=this.cloneNode(e,s);l.children.push(n)}));return{clonedRoot:l,leafMap:s}}}const G=()=>{const[e,s]=(0,n.useState)(new Q(4)),[l,z]=(0,n.useState)(4),[G,H]=(0,n.useState)(""),[q,D]=(0,n.useState)(""),[J,V]=(0,n.useState)([]),[W,X]=(0,n.useState)(""),Y=()=>{const l=parseInt(G,10);if(isNaN(l))return void alert("Please enter a valid number");const n=e.clone();n.insert(l),s(n),H(""),X("Inserted ".concat(l)),V([l]),setTimeout((()=>V([])),2e3)},U=()=>{const s=parseInt(q,10);if(isNaN(s))return void alert("Please enter a valid number");const l=e.search(s);D(""),X("Search for ".concat(s,": ").concat(null!==l?"Found \u2713":"Not Found \u2717")),null!==l&&(V([s]),setTimeout((()=>V([])),2e3))},Z=(e,s,l,n,a)=>{if(!e)return[];const r=[],t=Math.max(50*e.keys.length+10,60),i=e.isLeaf?g:f;if(r.push((0,R.jsx)("rect",{x:s-t/2,y:l,width:t,height:50,className:i},"box-".concat(s,"-").concat(l))),e.keys.forEach(((e,n)=>{const a=s-t/2+50*(n+.5)+5,i=J.includes(e);n>0&&r.push((0,R.jsx)("line",{x1:s-t/2+50*n+5,y1:l,x2:s-t/2+50*n+5,y2:l+50,className:k},"sep-".concat(s,"-").concat(l,"-").concat(n))),r.push((0,R.jsx)("text",{x:a,y:l+25+6,textAnchor:"middle",className:"".concat(T," ").concat(i?B:""),children:e},"key-".concat(s,"-").concat(l,"-").concat(n)))})),!e.isLeaf&&e.children.length>0){const i=n/e.children.length;e.children.forEach(((c,o)=>{const h=s-n/2+(o+.5)*i,d=s-t/2+(o+.5)*t/e.children.length;r.push((0,R.jsx)("line",{x1:d,y1:l+50,x2:h,y2:l+100,className:v},"edge-".concat(s,"-").concat(l,"-").concat(o))),r.push(...Z(c,h,l+100,i,a+1))}))}return e.isLeaf?r.push((0,R.jsx)("text",{x:s,y:l+50+15,textAnchor:"middle",className:P,children:"Leaf (Data)"},"label-".concat(s,"-").concat(l))):r.push((0,R.jsx)("text",{x:s,y:l-10,textAnchor:"middle",className:L,children:"Internal"},"label-".concat(s,"-").concat(l))),r},$=e.getHeight(),ee=Math.max(450,120*$+150);return(0,R.jsxs)("div",{className:a,children:[(0,R.jsx)("h1",{className:r,children:"B+ Tree Visualization \ud83c\udf32\u2795"}),(0,R.jsx)("div",{className:t,children:(0,R.jsx)("p",{children:"A B+ Tree is a variation of B-Tree where all data is stored in leaf nodes. Internal nodes only contain keys for navigation. Leaves are linked for efficient range queries."})}),(0,R.jsxs)("div",{className:i,children:[(0,R.jsx)("h3",{children:"Initialize B+ Tree"}),(0,R.jsxs)("div",{className:c,children:[(0,R.jsx)("label",{children:"Order (m):"}),(0,R.jsx)("input",{type:"number",value:l,onChange:e=>z(e.target.value),className:x,min:"3",max:"7"}),(0,R.jsx)("button",{onClick:()=>{const e=parseInt(l,10);isNaN(e)||e<3||e>7?alert("Please enter order between 3 and 7"):(s(new Q(e)),X("Initialized B+ Tree of order ".concat(e)),V([]))},className:_,children:"Initialize"}),(0,R.jsx)("button",{onClick:()=>{const e=new Q(4);[10,20,5,15,25,30,35,40,45,12].forEach((s=>e.insert(s))),s(e),X("Loaded example B+ Tree"),V([])},className:m,children:"Load Example"}),(0,R.jsxs)("span",{className:o,children:["Current: Order ",e.order," | Max keys per node: ",e.maxKeys]})]})]}),(0,R.jsxs)("div",{className:h,children:[(0,R.jsxs)("div",{className:d,children:[(0,R.jsx)("h4",{children:"Insert Key"}),(0,R.jsxs)("div",{className:u,children:[(0,R.jsx)("input",{type:"number",value:G,onChange:e=>H(e.target.value),placeholder:"Enter value",className:x,onKeyPress:e=>"Enter"===e.key&&Y()}),(0,R.jsx)("button",{onClick:Y,className:j,children:"Insert"})]})]}),(0,R.jsxs)("div",{className:d,children:[(0,R.jsx)("h4",{children:"Search Key"}),(0,R.jsxs)("div",{className:u,children:[(0,R.jsx)("input",{type:"number",value:q,onChange:e=>D(e.target.value),placeholder:"Enter value",className:x,onKeyPress:e=>"Enter"===e.key&&U()}),(0,R.jsx)("button",{onClick:U,className:j,children:"Search"})]})]})]}),W&&(0,R.jsx)("div",{className:p,children:W}),(0,R.jsxs)("div",{className:i,children:[(0,R.jsxs)("h3",{children:["Tree Structure (Height: ",$,")"]}),(0,R.jsx)("div",{className:N,children:(0,R.jsxs)("svg",{width:"1000",height:ee,className:y,children:[(0,R.jsx)("defs",{children:(0,R.jsx)("marker",{id:"arrowhead",markerWidth:"10",markerHeight:"10",refX:"9",refY:"3",orient:"auto",children:(0,R.jsx)("polygon",{points:"0 0, 10 3, 0 6",fill:"#10b981"})})}),Z(e.root,500,50,900,0),(()=>{const s=e.getAllLeaves(),l=[],n=100*e.getHeight()+25;return s.forEach(((e,a)=>{if(a<s.length-1){const e=50+(a+1)*(900/(s.length+1)),r=50+(a+2)*(900/(s.length+1));l.push((0,R.jsx)("path",{d:"M ".concat(e+30," ").concat(n," Q ").concat((e+r)/2," ").concat(n+30," ").concat(r-30," ").concat(n),className:b,fill:"none",markerEnd:"url(#arrowhead)"},"link-".concat(a)))}})),l})()]})}),(0,R.jsx)("p",{className:C,children:"Green arrows show linked leaf nodes for range queries"})]}),(0,R.jsxs)("div",{className:i,children:[(0,R.jsx)("h3",{children:"B+ Tree vs B-Tree"}),(0,R.jsxs)("div",{className:S,children:[(0,R.jsxs)("div",{className:w,children:[(0,R.jsx)("h4",{children:"Data Storage"}),(0,R.jsx)("p",{className:E,children:"\u2713 All data in leaf nodes only"}),(0,R.jsx)("p",{className:I,children:"\u2717 Data in all nodes"})]}),(0,R.jsxs)("div",{className:w,children:[(0,R.jsx)("h4",{children:"Internal Nodes"}),(0,R.jsx)("p",{className:E,children:"\u2713 Only keys for navigation"}),(0,R.jsx)("p",{className:I,children:"\u2717 Contains data too"})]}),(0,R.jsxs)("div",{className:w,children:[(0,R.jsx)("h4",{children:"Leaf Links"}),(0,R.jsx)("p",{className:E,children:"\u2713 Leaves are linked"}),(0,R.jsx)("p",{className:I,children:"\u2717 No leaf links"})]}),(0,R.jsxs)("div",{className:w,children:[(0,R.jsx)("h4",{children:"Range Queries"}),(0,R.jsx)("p",{className:E,children:"\u2713 Very efficient"}),(0,R.jsx)("p",{className:I,children:"\u2717 Requires tree traversal"})]})]})]}),(0,R.jsxs)("div",{className:i,children:[(0,R.jsx)("h3",{children:"Time Complexity"}),(0,R.jsxs)("div",{className:O,children:[(0,R.jsxs)("div",{className:A,children:[(0,R.jsx)("h4",{children:"Search"}),(0,R.jsx)("p",{className:F,children:"O(log n)"})]}),(0,R.jsxs)("div",{className:A,children:[(0,R.jsx)("h4",{children:"Insert"}),(0,R.jsx)("p",{className:F,children:"O(log n)"})]}),(0,R.jsxs)("div",{className:A,children:[(0,R.jsx)("h4",{children:"Delete"}),(0,R.jsx)("p",{className:F,children:"O(log n)"})]}),(0,R.jsxs)("div",{className:A,children:[(0,R.jsx)("h4",{children:"Range Query"}),(0,R.jsx)("p",{className:F,children:"O(log n + k)"}),(0,R.jsx)("p",{className:K,children:"k = number of results"})]})]})]}),(0,R.jsxs)("div",{className:M,children:[(0,R.jsx)("h3",{children:"Real-World Applications:"}),(0,R.jsxs)("ul",{children:[(0,R.jsxs)("li",{children:[(0,R.jsx)("strong",{children:"Database Indexing:"})," MySQL, PostgreSQL use B+ Trees extensively"]}),(0,R.jsxs)("li",{children:[(0,R.jsx)("strong",{children:"File Systems:"})," NTFS, ReiserFS, XFS use B+ Trees"]}),(0,R.jsxs)("li",{children:[(0,R.jsx)("strong",{children:"Range Queries:"})," Excellent for SQL BETWEEN, <, > operations"]}),(0,R.jsxs)("li",{children:[(0,R.jsx)("strong",{children:"Sequential Access:"})," Linked leaves enable efficient scans"]})]}),(0,R.jsxs)("div",{className:K,children:[(0,R.jsx)("strong",{children:"Why B+ Trees in Databases?"})," Leaf linking makes range queries and sequential scans very efficient. All data at leaf level means internal nodes can hold more keys, reducing tree height. Fewer disk I/O operations!"]})]})]})}}}]);
//# sourceMappingURL=5910.7903f4ec.chunk.js.map