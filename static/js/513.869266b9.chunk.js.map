{"version":3,"file":"static/js/513.869266b9.chunk.js","mappings":"6JAIA,MAAMA,EAAgB,CACpBC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,UAGU,SAASC,IACtB,MAAOC,IAAQC,EAAAA,EAAAA,UAAS,IAAIC,EAAAA,KAErBC,EAAUC,IAAeH,EAAAA,EAAAA,UAAS,OAClCI,EAAUC,IAAeL,EAAAA,EAAAA,UAASD,EAAKO,SAmBxCC,EAAiBA,CAACC,EAAKC,KACnBD,EAAMC,GAAO,IAAM,EAAI,QAAU,OAG3C,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,SACnBR,EAASU,KAAI,CAACN,EAAKO,IAClBP,EAAIM,KAAI,CAACE,EAAOC,KACd,MAAMC,EAASC,OAAOC,aAAa,GAAKH,IAAW,EAAIF,GACvD,OACEF,EAAAA,EAAAA,KAAA,OAEEF,UAAY,UAASJ,EAAeQ,EAAQE,MAC1Cf,IAAagB,EAAS,WAAa,KAErCG,QAASA,IAlCHC,EAACd,EAAKC,KACxB,MAAMS,EAASC,OAAOC,aAAa,GAAKX,IAAQ,EAAID,GAEpD,GAAIN,EACWH,EAAKwB,KAAK,CAAEC,KAAMtB,EAAUuB,GAAIP,EAAQQ,UAAW,OAE9DrB,EAAYN,EAAKO,SAEnBH,EAAY,UACP,CACL,MAAMa,EAAQjB,EAAK4B,IAAIT,GACnBF,GAASA,EAAMY,QAAU7B,EAAK8B,QAChC1B,EAAYe,EAEhB,GAoB2BI,CAAYP,EAAQE,GAAQL,SAE1CI,IACCH,EAAAA,EAAAA,KAAA,QAAMF,UAAU,QAAOC,SAEnB3B,EACE+B,EAAMc,OAASd,EAAMc,KAAKC,cACtBf,EAAMc,KACNd,EAAMc,KAAKE,kBAZjB,GAAEjB,KAAUE,IAiBd,SAKdP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,CACpBb,EAAKkC,gBACJvB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,cAA4B,MAAhBb,EAAK8B,OAAiB,QAAU,QAAQ,WAExD9B,EAAKmC,WAAYrB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,UACpBb,EAAKoC,YAAatB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,YACpBb,EAAKqC,eACL1B,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,SAAuB,MAAhBb,EAAK8B,OAAiB,QAAU,gBAKpD,C","sources":["routing/site/games/components/Chess/index.jsx"],"sourcesContent":["import React, { useState } from \"react\"\r\nimport { Chess } from \"chess.js\"\r\nimport \"./styles.css\"\r\n\r\nconst PIECE_UNICODE = {\r\n  p: \"♟\",\r\n  r: \"♜\",\r\n  n: \"♞\",\r\n  b: \"♝\",\r\n  q: \"♛\",\r\n  k: \"♚\",\r\n  P: \"♙\",\r\n  R: \"♖\",\r\n  N: \"♘\",\r\n  B: \"♗\",\r\n  Q: \"♕\",\r\n  K: \"♔\",\r\n}\r\n\r\nexport default function App() {\r\n  const [game] = useState(new Chess())\r\n\r\n  const [selected, setSelected] = useState(null)\r\n  const [fenBoard, setFenBoard] = useState(game.board())\r\n\r\n  const handleClick = (row, col) => {\r\n    const square = String.fromCharCode(97 + col) + (8 - row)\r\n\r\n    if (selected) {\r\n      const move = game.move({ from: selected, to: square, promotion: \"q\" })\r\n      if (move) {\r\n        setFenBoard(game.board())\r\n      }\r\n      setSelected(null)\r\n    } else {\r\n      const piece = game.get(square)\r\n      if (piece && piece.color === game.turn()) {\r\n        setSelected(square)\r\n      }\r\n    }\r\n  }\r\n\r\n  const getSquareColor = (row, col) => {\r\n    return (row + col) % 2 === 0 ? \"light\" : \"dark\"\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Lets Play Chess</h2>\r\n      <div className=\"board\">\r\n        {fenBoard.map((row, rowIdx) =>\r\n          row.map((piece, colIdx) => {\r\n            const square = String.fromCharCode(97 + colIdx) + (8 - rowIdx)\r\n            return (\r\n              <div\r\n                key={`${rowIdx}-${colIdx}`}\r\n                className={`square ${getSquareColor(rowIdx, colIdx)} ${\r\n                  selected === square ? \"selected\" : \"\"\r\n                }`}\r\n                onClick={() => handleClick(rowIdx, colIdx)}\r\n              >\r\n                {piece && (\r\n                  <span className=\"piece\">\r\n                    {\r\n                      PIECE_UNICODE[\r\n                        piece.type === piece.type.toUpperCase()\r\n                          ? piece.type\r\n                          : piece.type.toLowerCase()\r\n                      ]\r\n                    }\r\n                  </span>\r\n                )}\r\n              </div>\r\n            )\r\n          })\r\n        )}\r\n      </div>\r\n      <div className=\"status\">\r\n        {game.isCheckmate() && (\r\n          <p>Checkmate! {game.turn() === \"w\" ? \"Black\" : \"White\"} wins</p>\r\n        )}\r\n        {game.isDraw() && <p>Draw!</p>}\r\n        {game.inCheck() && <p>Check!</p>}\r\n        {!game.isGameOver() && (\r\n          <p>Turn: {game.turn() === \"w\" ? \"White\" : \"Black\"}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["PIECE_UNICODE","p","r","n","b","q","k","P","R","N","B","Q","K","App","game","useState","Chess","selected","setSelected","fenBoard","setFenBoard","board","getSquareColor","row","col","_jsxs","className","children","_jsx","map","rowIdx","piece","colIdx","square","String","fromCharCode","onClick","handleClick","move","from","to","promotion","get","color","turn","type","toUpperCase","toLowerCase","isCheckmate","isDraw","inCheck","isGameOver"],"sourceRoot":""}