{"version":3,"file":"static/js/3171.1c794eb3.chunk.js","mappings":"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","sources":["routing/site/math/components/3DEquationPlotter/EquationInput.jsx","routing/site/math/components/3DEquationPlotter/generatePoints.worker.js","routing/site/math/components/3DEquationPlotter/Plot3D.jsx","routing/site/math/components/3DEquationPlotter/index.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\"\r\nimport { evaluate } from \"mathjs\"\r\n\r\nconst EquationInput = ({ onEquationChange }) => {\r\n  const [input, setInput] = useState(\"\")\r\n  const [error, setError] = useState(\"\")\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value)\r\n  }\r\n\r\n  const debounce = (func, delay) => {\r\n    let timeoutId\r\n    return (...args) => {\r\n      if (timeoutId) clearTimeout(timeoutId)\r\n      timeoutId = setTimeout(() => func(...args), delay)\r\n    }\r\n  }\r\n\r\n  const debouncedEquationChange = useCallback(debounce(onEquationChange, 500), [\r\n    onEquationChange,\r\n  ])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    try {\r\n      evaluate(input.replace(/x|y/g, \"0\"))\r\n      setError(\"\")\r\n      debouncedEquationChange(input)\r\n    } catch (err) {\r\n      setError(\"Invalid equation. Please enter a valid equation.\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"equation-input\">\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter equation (e.g., z = x^2 + y^2)\"\r\n      />\r\n      <button type=\"submit\">Plot</button>\r\n      <button\r\n        type=\"reset\"\r\n        onClick={() => {\r\n          setInput(\"\")\r\n          debouncedEquationChange(\"\")\r\n        }}\r\n      >\r\n        Clear\r\n      </button>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EquationInput\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/generatePoints.worker.d55d9a9d.worker.js\");\n}\n","import React, { useState, useEffect, useRef } from \"react\"\r\nimport { Canvas } from \"@react-three/fiber\"\r\nimport { OrbitControls } from \"@react-three/drei\"\r\nimport * as THREE from \"three\"\r\nimport Worker from \"worker-loader!./generatePoints.worker\" // Path to your worker file\r\n\r\nconst Plot3D = ({ equation, precision = 0.5 }) => {\r\n  const [points, setPoints] = useState([])\r\n  const meshRef = useRef()\r\n  const ambientLightRef = useRef()\r\n  const pointLightRef = useRef()\r\n  const gridHelperRef = useRef()\r\n  const axesHelperRef = useRef()\r\n  const cameraRef = useRef()\r\n  const sphereMeshRef = useRef()\r\n  const sphereGeometryRef = useRef()\r\n\r\n  useEffect(() => {\r\n    const worker = new Worker()\r\n\r\n    worker.onmessage = (e) => {\r\n      const pointsArray = e.data.map(\r\n        ({ x, y, z }) => new THREE.Vector3(x, y, z)\r\n      )\r\n      setPoints(pointsArray)\r\n    }\r\n\r\n    worker.postMessage({ equation, precision })\r\n\r\n    return () => worker.terminate()\r\n  }, [equation, precision])\r\n\r\n  useEffect(() => {\r\n    if (meshRef.current && points.length > 0) {\r\n      ambientLightRef.current.intensity = 0.8\r\n      pointLightRef.current.position.set(0, 0, 0)\r\n      gridHelperRef.current.args = [0, 0]\r\n      axesHelperRef.current.args = [0]\r\n      sphereMeshRef.current.position.set(0, 0, 0)\r\n      sphereGeometryRef.current.args = [1, 16, 16]\r\n      meshRef.current.geometry.setFromPoints(points)\r\n      meshRef.current.geometry.attributes.position.needsUpdate = true\r\n    }\r\n  }, [points])\r\n\r\n  return (\r\n    <Canvas>\r\n      <ambientLight ref={ambientLightRef} />\r\n      <pointLight ref={pointLightRef} />\r\n      <mesh ref={meshRef}>\r\n        <bufferGeometry />\r\n        <pointsMaterial color=\"red\" size={0.5} />\r\n      </mesh>\r\n      <gridHelper ref={gridHelperRef} />\r\n      <axesHelper ref={axesHelperRef} />\r\n      <OrbitControls enableZoom={false} enablePan={false} ref={cameraRef} />\r\n      <mesh ref={sphereMeshRef}>\r\n        <sphereGeometry ref={sphereGeometryRef} />\r\n        <meshBasicMaterial color=\"blue\" />\r\n      </mesh>\r\n    </Canvas>\r\n  )\r\n}\r\n\r\nexport default Plot3D\r\n","import React, { Suspense, useState } from \"react\"\r\nimport \"./Plotter.css\"\r\nimport EquationInput from \"./EquationInput\"\r\nimport Plot3D from \"./Plot3D\"\r\n\r\nconst App = () => {\r\n  const [equation, setEquation] = useState(\"\")\r\n\r\n  const handleEquationChange = (newEquation) => {\r\n    setEquation(newEquation)\r\n  }\r\n\r\n  return (\r\n    <div className=\"Plotter\">\r\n      <h1>3D Equation Plotter in x , y and z</h1>\r\n      <EquationInput onEquationChange={handleEquationChange} />\r\n      {equation && (\r\n        <Suspense fallback={<div>Loading plot...</div>}>\r\n          <Plot3D equation={equation} />\r\n        </Suspense>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n"],"names":["_ref","onEquationChange","input","setInput","useState","error","setError","debouncedEquationChange","useCallback","debounce","func","delay","timeoutId","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","_jsxs","onSubmit","e","preventDefault","evaluate","replace","err","className","children","_jsx","type","value","onChange","target","placeholder","onClick","Worker_fn","Worker","equation","precision","points","setPoints","meshRef","useRef","ambientLightRef","pointLightRef","gridHelperRef","axesHelperRef","cameraRef","sphereMeshRef","sphereGeometryRef","useEffect","worker","onmessage","pointsArray","data","map","_ref2","x","y","z","THREE","postMessage","terminate","current","intensity","position","set","geometry","setFromPoints","attributes","needsUpdate","Canvas","ref","color","size","OrbitControls","enableZoom","enablePan","App","setEquation","EquationInput","newEquation","Suspense","fallback","Plot3D"],"sourceRoot":""}