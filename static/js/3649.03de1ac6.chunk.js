"use strict";(self.webpackChunkAlgoLens=self.webpackChunkAlgoLens||[]).push([[3649],{3649:(e,s,i)=>{i.r(s),i.d(s,{default:()=>B});var t=i(2791);const n="PrimsMST_container__u80CN",a="PrimsMST_title__CYntt",r="PrimsMST_legend__NEapw",c="PrimsMST_legendItem__XcLkX",l="PrimsMST_legendBox__Qm-F5",d="PrimsMST_legendVisited__CGNRL",o="PrimsMST_legendCurrent__kAk6k",m="PrimsMST_legendMstEdge__DA8db",h="PrimsMST_legendConsidering__Veebh",_="PrimsMST_infoPanel__+zy1A",x="PrimsMST_infoItem__-hUKZ",g="PrimsMST_infoLabel__B+G-x",S="PrimsMST_infoValue__1cd2n",j="PrimsMST_completeMessage__hwruz",u="PrimsMST_controls__9XDyt",T="PrimsMST_btnPrimary__FTnV+",f="PrimsMST_graphContainer__9Hfdq",N="PrimsMST_svg__0WzfH",M="PrimsMST_edge__7C463",w="PrimsMST_mstEdge__loyre",v="PrimsMST_consideringEdge__m2hNt",P="PrimsMST_edgeWeight__DpTxq",y="PrimsMST_mstWeight__hlzWS",p="PrimsMST_node__8qB1O",C="PrimsMST_visitedNode__WRPRi",A="PrimsMST_currentNode__K3FkF",E="PrimsMST_nodeLabel__sFCHv",k="PrimsMST_explanation__8qhFC",b="PrimsMST_complexity__LzBsG";var F=i(184);const B=()=>{const e=[{id:"A",x:150,y:100},{id:"B",x:350,y:100},{id:"C",x:550,y:100},{id:"D",x:150,y:250},{id:"E",x:350,y:250},{id:"F",x:550,y:250},{id:"G",x:250,y:400},{id:"H",x:450,y:400}],s=[{from:"A",to:"B",weight:4},{from:"A",to:"D",weight:2},{from:"B",to:"C",weight:6},{from:"B",to:"E",weight:3},{from:"C",to:"F",weight:1},{from:"D",to:"E",weight:7},{from:"D",to:"G",weight:5},{from:"E",to:"F",weight:8},{from:"E",to:"G",weight:2},{from:"E",to:"H",weight:4},{from:"F",to:"H",weight:3},{from:"G",to:"H",weight:9}],[i,B]=(0,t.useState)([]),[H,W]=(0,t.useState)([]),[D,G]=(0,t.useState)(null),[L,V]=(0,t.useState)(null),[z,R]=(0,t.useState)(0),[q,X]=(0,t.useState)(0),[I,K]=(0,t.useState)(!1),[O,Q]=(0,t.useState)(!1);(0,t.useEffect)((()=>{Y()}),[]);const U=e=>new Promise((s=>setTimeout(s,e))),Y=async()=>{Q(!0);const i=new Set,t=[];let n=0;for(i.add("A"),B(["A"]),G("A"),await U(1200);i.size<e.length;){R((e=>e+1));let e=null,a=1/0;for(const t of s){const{from:s,to:n,weight:r}=t,c=i.has(s),l=i.has(n);c&&!l?(V({from:s,to:n}),await U(300),r<a&&(a=r,e={from:s,to:n,weight:r})):l&&!c&&(V({from:n,to:s}),await U(300),r<a&&(a=r,e={from:n,to:s,weight:r}))}if(V(null),!e)break;t.push(e),i.add(e.to),n+=e.weight,W([...t]),B([...i]),G(e.to),X(n),await U(1200)}G(null),K(!0),Q(!1)},Z=s=>{const i=e.find((e=>e.id===s));return i?{x:i.x,y:i.y}:{x:0,y:0}};return(0,F.jsxs)("div",{className:n,children:[(0,F.jsx)("h1",{className:a,children:"Prim's Minimum Spanning Tree \ud83c\udf33"}),(0,F.jsxs)("div",{className:r,children:[(0,F.jsxs)("div",{className:c,children:[(0,F.jsx)("div",{className:"".concat(l," ").concat(d)}),(0,F.jsx)("span",{children:"Visited Node"})]}),(0,F.jsxs)("div",{className:c,children:[(0,F.jsx)("div",{className:"".concat(l," ").concat(o)}),(0,F.jsx)("span",{children:"Current Node"})]}),(0,F.jsxs)("div",{className:c,children:[(0,F.jsx)("div",{className:"".concat(l," ").concat(m)}),(0,F.jsx)("span",{children:"MST Edge"})]}),(0,F.jsxs)("div",{className:c,children:[(0,F.jsx)("div",{className:"".concat(l," ").concat(h)}),(0,F.jsx)("span",{children:"Considering"})]})]}),(0,F.jsxs)("div",{className:_,children:[(0,F.jsxs)("div",{className:x,children:[(0,F.jsx)("span",{className:g,children:"Step:"}),(0,F.jsx)("span",{className:S,children:z})]}),(0,F.jsxs)("div",{className:x,children:[(0,F.jsx)("span",{className:g,children:"MST Edges:"}),(0,F.jsx)("span",{className:S,children:H.length})]}),(0,F.jsxs)("div",{className:x,children:[(0,F.jsx)("span",{className:g,children:"Total Weight:"}),(0,F.jsx)("span",{className:S,children:q})]}),I&&(0,F.jsxs)("div",{className:j,children:["\u2713 MST Complete! Minimum weight: ",q]})]}),(0,F.jsx)("div",{className:u,children:(0,F.jsx)("button",{onClick:()=>{O||(B([]),W([]),G(null),V(null),R(0),X(0),K(!1),Y())},disabled:O,className:T,children:O?"Running...":"Restart Animation"})}),(0,F.jsx)("div",{className:f,children:(0,F.jsxs)("svg",{width:"700",height:"500",className:N,children:[s.map(((e,s)=>{const i=Z(e.from),t=Z(e.to),n=(a=e.from,r=e.to,H.some((e=>e.from===a&&e.to===r||e.from===r&&e.to===a)));var a,r;const c=((e,s)=>!!L&&(L.from===e&&L.to===s||L.from===s&&L.to===e))(e.from,e.to);return(0,F.jsxs)("g",{children:[(0,F.jsx)("line",{x1:i.x,y1:i.y,x2:t.x,y2:t.y,className:"".concat(M," ").concat(n?w:c?v:""),strokeWidth:n?"4":c?"3":"2"}),(0,F.jsx)("text",{x:(i.x+t.x)/2,y:(i.y+t.y)/2,className:"".concat(P," ").concat(n?y:""),children:e.weight})]},"edge-".concat(s))})),e.map((e=>{const s=i.includes(e.id),t=D===e.id;return(0,F.jsxs)("g",{children:[(0,F.jsx)("circle",{cx:e.x,cy:e.y,r:"28",className:"".concat(p," ").concat(s?C:""," ").concat(t?A:"")}),(0,F.jsx)("text",{x:e.x,y:e.y,textAnchor:"middle",dy:".35em",className:E,children:e.id})]},e.id)}))]})}),(0,F.jsxs)("div",{className:k,children:[(0,F.jsx)("h3",{children:"How Prim's Algorithm Works:"}),(0,F.jsxs)("ol",{children:[(0,F.jsx)("li",{children:"Start with any vertex (here we start at node A)"}),(0,F.jsx)("li",{children:"Add the minimum weight edge that connects a visited vertex to an unvisited vertex"}),(0,F.jsx)("li",{children:"Mark the newly connected vertex as visited"}),(0,F.jsx)("li",{children:"Repeat step 2-3 until all vertices are included in the MST"}),(0,F.jsx)("li",{children:"The result is a Minimum Spanning Tree - a tree that connects all vertices with minimum total edge weight"})]}),(0,F.jsxs)("p",{className:b,children:[(0,F.jsx)("strong",{children:"Time Complexity:"})," O(E log V) with binary heap, where E = edges, V = vertices"]})]})]})}}}]);
//# sourceMappingURL=3649.03de1ac6.chunk.js.map