{"version":3,"file":"static/js/1963.51938971.chunk.js","mappings":"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","sources":["routing/site/ds/components/Trie/dataTypes.js","routing/site/ds/components/Trie/index.jsx"],"sourcesContent":["class TrieNode {\n  constructor() {\n    this.children = {}\n    this.isEndOfWord = false\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode()\n  }\n\n  insert(word) {\n    let node = this.root\n    for (let char of word.toLowerCase()) {\n      if (!node.children[char]) {\n        node.children[char] = new TrieNode()\n      }\n      node = node.children[char]\n    }\n    node.isEndOfWord = true\n  }\n\n  search(word) {\n    let node = this.root\n    const path = []\n    for (let char of word.toLowerCase()) {\n      if (!node.children[char]) {\n        return { found: false, path }\n      }\n      path.push(char)\n      node = node.children[char]\n    }\n    return { found: node.isEndOfWord, path }\n  }\n\n  startsWith(prefix) {\n    let node = this.root\n    const path = []\n    for (let char of prefix.toLowerCase()) {\n      if (!node.children[char]) {\n        return { found: false, path }\n      }\n      path.push(char)\n      node = node.children[char]\n    }\n    return { found: true, path }\n  }\n\n  delete(word) {\n    this.deleteHelper(this.root, word.toLowerCase(), 0)\n  }\n\n  deleteHelper(node, word, index) {\n    if (index === word.length) {\n      if (!node.isEndOfWord) {\n        return false\n      }\n      node.isEndOfWord = false\n      return Object.keys(node.children).length === 0\n    }\n\n    const char = word[index]\n    const childNode = node.children[char]\n\n    if (!childNode) {\n      return false\n    }\n\n    const shouldDeleteChild = this.deleteHelper(childNode, word, index + 1)\n\n    if (shouldDeleteChild) {\n      delete node.children[char]\n      return Object.keys(node.children).length === 0 && !node.isEndOfWord\n    }\n\n    return false\n  }\n\n  getAllWords() {\n    const words = []\n    this.collectWords(this.root, \"\", words)\n    return words\n  }\n\n  collectWords(node, prefix, words) {\n    if (node.isEndOfWord) {\n      words.push(prefix)\n    }\n\n    for (let char in node.children) {\n      this.collectWords(node.children[char], prefix + char, words)\n    }\n  }\n\n  clone() {\n    const newTrie = new Trie()\n    newTrie.root = this.cloneNode(this.root)\n    return newTrie\n  }\n\n  cloneNode(node) {\n    if (!node) return null\n    const newNode = new TrieNode()\n    newNode.isEndOfWord = node.isEndOfWord\n    for (let char in node.children) {\n      newNode.children[char] = this.cloneNode(node.children[char])\n    }\n    return newNode\n  }\n}\n\nexport { TrieNode, Trie }\n","import React, { useState, useCallback, useEffect, useRef } from \"react\"\nimport { Trie } from \"./dataTypes\"\nimport \"./TrieVisualizer.css\"\n\nconst TrieVisualizer = () => {\n  const [trie, setTrie] = useState(new Trie())\n  const [inputValue, setInputValue] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(\"\")\n  const [searchResult, setSearchResult] = useState(null)\n  const [highlightPath, setHighlightPath] = useState([])\n  const canvasRef = useRef(null)\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext(\"2d\")\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    renderTrie()\n  }, [trie, highlightPath])\n\n  const handleInsert = useCallback(() => {\n    if (inputValue.trim()) {\n      setTrie((currentTrie) => {\n        currentTrie.insert(inputValue.trim())\n        return currentTrie.clone()\n      })\n      setInputValue(\"\")\n      setSearchResult(null)\n      setHighlightPath([])\n    }\n  }, [inputValue])\n\n  const handleDelete = useCallback(() => {\n    if (inputValue.trim()) {\n      setTrie((currentTrie) => {\n        currentTrie.delete(inputValue.trim())\n        return currentTrie.clone()\n      })\n      setInputValue(\"\")\n      setSearchResult(null)\n      setHighlightPath([])\n    }\n  }, [inputValue])\n\n  const handleSearch = useCallback(() => {\n    if (searchValue.trim()) {\n      const result = trie.search(searchValue.trim())\n      setSearchResult(result.found ? \"Word found!\" : \"Word not found!\")\n      setHighlightPath(result.path)\n    }\n  }, [trie, searchValue])\n\n  const handleStartsWith = useCallback(() => {\n    if (searchValue.trim()) {\n      const result = trie.startsWith(searchValue.trim())\n      setSearchResult(\n        result.found ? \"Prefix exists in trie!\" : \"Prefix not found in trie!\"\n      )\n      setHighlightPath(result.path)\n    }\n  }, [trie, searchValue])\n\n  const handleClear = useCallback(() => {\n    setTrie(new Trie())\n    setInputValue(\"\")\n    setSearchValue(\"\")\n    setSearchResult(null)\n    setHighlightPath([])\n  }, [])\n\n  const renderTrie = () => {\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext(\"2d\")\n    const startX = canvas.width / 2\n    const startY = 50\n    const levelHeight = 60\n\n    // Render root node\n    ctx.beginPath()\n    ctx.arc(startX, startY, 20, 0, 2 * Math.PI)\n    ctx.fillStyle = \"#8bc34a\"\n    ctx.fill()\n    ctx.strokeStyle = \"#4caf50\"\n    ctx.lineWidth = 2\n    ctx.stroke()\n    ctx.fillStyle = \"white\"\n    ctx.textAlign = \"center\"\n    ctx.textBaseline = \"middle\"\n    ctx.font = \"14px Arial\"\n    ctx.fillText(\"ROOT\", startX, startY)\n\n    // Render children recursively\n    if (trie.root.children) {\n      const children = Object.keys(trie.root.children).sort()\n      renderChildren(\n        ctx,\n        trie.root,\n        children,\n        startX,\n        startY,\n        canvas.width * 0.8,\n        levelHeight,\n        1,\n        []\n      )\n    }\n\n    // Render word list on the right\n    renderWordList(ctx, canvas)\n  }\n\n  const renderChildren = (\n    ctx,\n    node,\n    children,\n    parentX,\n    parentY,\n    totalWidth,\n    levelHeight,\n    level,\n    path\n  ) => {\n    if (children.length === 0) return\n\n    const childWidth = totalWidth / children.length\n    const startX = parentX - totalWidth / 2 + childWidth / 2\n\n    children.forEach((char, index) => {\n      const childX = startX + index * childWidth\n      const childY = parentY + levelHeight\n      const childNode = node.children[char]\n\n      // Draw line\n      ctx.beginPath()\n      ctx.moveTo(parentX, parentY + 20)\n      ctx.lineTo(childX, childY - 20)\n      ctx.strokeStyle = highlightPath.includes(char) ? \"#ff7043\" : \"#ccc\"\n      ctx.lineWidth = highlightPath.includes(char) ? 3 : 2\n      ctx.stroke()\n\n      // Draw node\n      const newPath = [...path, char]\n      const isHighlighted = highlightPath.includes(char)\n\n      ctx.beginPath()\n      ctx.arc(childX, childY, 20, 0, 2 * Math.PI)\n      ctx.fillStyle = isHighlighted\n        ? \"#ff7043\"\n        : childNode.isEndOfWord\n        ? \"#4caf50\"\n        : \"#8bc34a\"\n      ctx.fill()\n      ctx.strokeStyle = childNode.isEndOfWord ? \"#2e7d32\" : \"#4caf50\"\n      ctx.lineWidth = childNode.isEndOfWord ? 3 : 2\n      ctx.stroke()\n\n      // Draw character\n      ctx.fillStyle = \"white\"\n      ctx.textAlign = \"center\"\n      ctx.textBaseline = \"middle\"\n      ctx.font = \"bold 14px Arial\"\n      ctx.fillText(char.toUpperCase(), childX, childY)\n\n      // Recursively render children\n      const grandChildren = Object.keys(childNode.children).sort()\n      if (grandChildren.length > 0) {\n        renderChildren(\n          ctx,\n          childNode,\n          grandChildren,\n          childX,\n          childY,\n          childWidth * 0.9,\n          levelHeight,\n          level + 1,\n          newPath\n        )\n      }\n    })\n  }\n\n  const renderWordList = (ctx, canvas) => {\n    const words = trie.getAllWords()\n    const x = canvas.width - 150\n    const y = 20\n\n    ctx.fillStyle = \"#333\"\n    ctx.font = \"bold 14px Arial\"\n    ctx.textAlign = \"left\"\n    ctx.fillText(\"Words in Trie:\", x, y)\n\n    ctx.font = \"12px Arial\"\n    words.forEach((word, index) => {\n      ctx.fillText(word, x, y + 25 + index * 20)\n    })\n  }\n\n  return (\n    <div className=\"trie-visualizer\">\n      <h4>Trie (Prefix Tree) Visualizer</h4>\n\n      <div className=\"controls-container\">\n        <div className=\"input-group\">\n          <label>Insert/Delete Word:</label>\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter word\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={(e) => e.key === \"Enter\" && handleInsert()}\n            />\n            <button onClick={handleInsert}>Insert</button>\n            <button onClick={handleDelete}>Delete</button>\n          </div>\n        </div>\n\n        <div className=\"input-group\">\n          <label>Search/Prefix Check:</label>\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Search or check prefix\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              onKeyPress={(e) => e.key === \"Enter\" && handleSearch()}\n            />\n            <button onClick={handleSearch}>Search</button>\n            <button onClick={handleStartsWith}>Check Prefix</button>\n          </div>\n        </div>\n\n        <div className=\"input-container\">\n          <button onClick={handleClear} className=\"clear-btn\">\n            Clear Trie\n          </button>\n        </div>\n      </div>\n\n      {searchResult && (\n        <div\n          className={`search-result ${\n            searchResult.includes(\"found\") || searchResult.includes(\"exists\")\n              ? \"success\"\n              : \"error\"\n          }`}\n        >\n          {searchResult}\n        </div>\n      )}\n\n      <div className=\"legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-circle root\"></div>\n          <span>Root Node</span>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-circle regular\"></div>\n          <span>Regular Node</span>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-circle end-word\"></div>\n          <span>End of Word</span>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-circle highlighted\"></div>\n          <span>Highlighted Path</span>\n        </div>\n      </div>\n\n      <div className=\"canvas-container\">\n        <canvas ref={canvasRef} width={1000} height={600}></canvas>\n      </div>\n    </div>\n  )\n}\n\nexport default TrieVisualizer\n"],"names":["TrieNode","constructor","this","children","isEndOfWord","Trie","root","insert","word","node","char","toLowerCase","search","path","found","push","startsWith","prefix","delete","deleteHelper","index","length","Object","keys","childNode","getAllWords","words","collectWords","clone","newTrie","cloneNode","newNode","TrieVisualizer","trie","setTrie","useState","inputValue","setInputValue","searchValue","setSearchValue","searchResult","setSearchResult","highlightPath","setHighlightPath","canvasRef","useRef","useEffect","canvas","current","getContext","clearRect","width","height","renderTrie","handleInsert","useCallback","trim","currentTrie","handleDelete","handleSearch","result","handleStartsWith","handleClear","ctx","startX","beginPath","arc","Math","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","textAlign","textBaseline","font","fillText","sort","renderChildren","renderWordList","parentX","parentY","totalWidth","levelHeight","level","childWidth","forEach","childX","childY","moveTo","lineTo","includes","newPath","isHighlighted","toUpperCase","grandChildren","x","y","_jsxs","className","_jsx","type","placeholder","value","onChange","e","target","onKeyPress","key","onClick","concat","ref"],"sourceRoot":""}