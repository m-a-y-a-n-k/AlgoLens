{"version":3,"file":"static/js/8065.c7676098.chunk.js","mappings":"gJACA,QAA4B,wBAA5B,EAA4D,oBAA5D,EAAgG,4BAAhG,EAA2I,2BAA3I,EAAwL,8BAAxL,EAAiO,uBAAjO,EAAqQ,yBAArQ,EAAsS,oBAAtS,EAAuU,yBAAvU,EAA+W,2BAA/W,EAAsZ,wBAAtZ,EAA0b,wBAA1b,EAA+f,qBAA/f,EAAiiB,yBAAjiB,EAAskB,wBAAtkB,EAA2mB,yBAA3mB,EAAmpB,2BAAnpB,EAAgsB,8BAAhsB,EAAgvB,8BAAhvB,EAAwxB,sBAAxxB,EAA6zB,2BAA7zB,EAAy2B,6BAAz2B,EAAk5B,wBAAl5B,EAAq7B,uBAAr7B,EAAw9B,wBAAx9B,EAAwhC,wBAAxhC,EAA2lC,yBAA3lC,EAAioC,yBAAjoC,EAA0qC,4BAA1qC,EAAstC,4BAAttC,EAA4vC,sBAA5vC,EAA6xC,uBAA7xC,EAA+zC,uBAA/zC,EAAi2C,uBAAj2C,EAAy8C,uBAAz8C,EAA4+C,wBAA5+C,EAAqhD,6BAArhD,EAAikD,2BAAjkD,EAA0mD,0B,aCE1mD,MAycA,EAzcaA,KACX,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,QAClCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,KACtCK,EAAkBC,IAAuBN,EAAAA,EAAAA,UAAS,KAClDO,EAAkBC,IAAuBR,EAAAA,EAAAA,UAAS,KAClDS,EAAeC,IAAoBV,EAAAA,EAAAA,UAAS,KAGnDW,EAAAA,EAAAA,YAAU,KACRZ,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,IAAI,GACjC,IAEH,MACMa,EAAqBC,GAAM,EAAIA,EAAI,EACnCC,GAAsBD,GAAM,EAAIA,EAAI,EAEpCE,GAAaA,CAACC,EAAWC,IACZ,QAAbhB,EACKe,EAAYC,EAEZD,EAAYC,EAIjBC,GAASC,GAAO,IAAIC,SAASC,GAAYC,WAAWD,EAASF,KAgC7DI,GAAaC,MAAOC,EAAKC,KAC7B,IAAIC,EAAeD,EACnB,MAAME,EAASH,EAAIG,OAGnB,OAAa,CACX,MAAMC,EAAiBjB,EAAkBe,GACnCG,EAAkBhB,GAAmBa,GAC3C,IAAII,EAAcJ,EAqBlB,GAlBIE,EAAiBD,IACnBpB,EAAoB,CAACmB,EAAcE,UAC7BX,GAAM,KAERH,GAAWU,EAAIM,GAAcN,EAAII,MACnCE,EAAcF,IAIdC,EAAkBF,IACpBpB,EAAoB,CAACmB,EAAcG,EAAiBC,UAC9Cb,GAAM,KAERH,GAAWU,EAAIM,GAAcN,EAAIK,MACnCC,EAAcD,IAIdC,IAAgBJ,EAClB,MAIFrB,EAAoB,CAACqB,EAAcI,UAC7Bb,GAAM,MACVO,EAAIE,GAAeF,EAAIM,IAAgB,CACvCN,EAAIM,GACJN,EAAIE,IAEN5B,EAAa,IAAI0B,UAEXP,GAAM,KACZS,EAAeI,CACjB,CAEAvB,EAAoB,IACpBF,EAAoB,GAAG,EAGnB0B,GAAeR,UACnB,IAAKrB,EAAW8B,OAAQ,OAExB,MAAMC,EAAQC,SAAShC,EAAY,IACnC,GAAIiC,MAAMF,GAAQ,OAElB,MAAMG,EAAW,IAAIvC,EAAWoC,GAChCnC,EAAasC,GACbjC,EAAc,IACdM,EAAiB,YAAD4B,OAAaJ,UAEvBhB,GAAM,UA3FGM,OAAOC,EAAKC,KAC3B,IAAIC,EAAeD,EAEnB,KAAOC,EAAe,GAAG,CACvB,MAAMY,GAlBc1B,EAkBec,EAlBTa,KAAKC,OAAO5B,EAAI,GAAK,IAuB/C,GAHAL,EAAoB,CAACmB,EAAcY,UAC7BrB,GAAM,MAERH,GAAWU,EAAIc,GAAcd,EAAIE,IAanC,MAXArB,EAAoB,CAACqB,EAAcY,UAC7BrB,GAAM,MACVO,EAAIc,GAAcd,EAAIE,IAAiB,CACvCF,EAAIE,GACJF,EAAIc,IAENxC,EAAa,IAAI0B,UAEXP,GAAM,KACZS,EAAeY,CAInB,CAtCsB1B,MAwCtBL,EAAoB,IACpBF,EAAoB,GAAG,EAiEjBoC,CAASL,EAAUA,EAAST,OAAS,EAAE,EA0DzCe,GAAiBA,CAACjB,EAAOkB,EAAGC,EAAGC,EAAOC,KAC1C,GAAIrB,GAAS5B,EAAU8B,OAAQ,OAAO,KAEtC,MAAMM,EAAQpC,EAAU4B,GAClBG,EAAiBjB,EAAkBc,GACnCI,EAAkBhB,GAAmBY,GAErCsB,EAAa,GAEbC,EAASF,EAAoBP,KAAKU,IAAI,EAAGJ,EAAQ,GAEjDK,EAAW,GACXC,EAAc/C,EAAiBgD,SAAS3B,GACxC4B,EAAc/C,EAAiB8C,SAAS3B,GAG9C,GAAIG,EAAiB/B,EAAU8B,OAAQ,CACrC,MAAM2B,EAASX,EAAIK,EACbO,EAASX,EAVO,GAWtBM,EAASM,MACPC,EAAAA,EAAAA,KAAA,QAEEC,GAAIf,EACJgB,GAAIf,EAAIG,EACRa,GAAIN,EACJO,GAAIN,EAASR,EACbe,UAAWC,EACXC,YAAY,KAAG,aAAA3B,OANGZ,KAStByB,EAASM,QACJd,GACDd,EACA0B,EACAC,EACAV,EAAQ,EACRC,GAGN,CAEA,GAAIjB,EAAkBhC,EAAU8B,OAAQ,CACtC,MAAM2B,EAASX,EAAIK,EACbO,EAASX,EAnCO,GAoCtBM,EAASM,MACPC,EAAAA,EAAAA,KAAA,QAEEC,GAAIf,EACJgB,GAAIf,EAAIG,EACRa,GAAIN,EACJO,GAAIN,EAASR,EACbe,UAAWC,EACXC,YAAY,KAAG,cAAA3B,OANIZ,KASvByB,EAASM,QACJd,GACDb,EACAyB,EACAC,EACAV,EAAQ,EACRC,GAGN,CA6BA,OA1BAI,EAASM,MACPS,EAAAA,EAAAA,MAAA,KAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UACEU,GAAIxB,EACJyB,GAAIxB,EACJyB,EAAGtB,EACHe,UAAS,GAAAzB,OAAK0B,EAAe,KAAA1B,OAC3Bc,EAAcY,EAAmB,GAAE,KAAA1B,OACjCgB,EAAcU,EAAmB,GAAE,KAAA1B,OAC3B,IAAVZ,EAAcsC,EAAkB,OAGpCN,EAAAA,EAAAA,KAAA,QAAMd,EAAGA,EAAGC,EAAGA,EAAI,EAAG0B,WAAW,SAASR,UAAWC,EAAgBG,SAClEjC,KAEHgC,EAAAA,EAAAA,MAAA,QACEtB,EAAGA,EACHC,EAAGA,EAAIG,EAAa,EACpBuB,WAAW,SACXR,UAAWC,EAAiBG,SAAA,CAC7B,IACGzC,EAAM,SACH,QAAAY,OArBOZ,KAyBXyB,CAAQ,EAQXqB,GAAYhC,KAAKiC,IAAI,IAAsB,IAJtB,IAArB3E,EAAU8B,OAAqB,EAC5BY,KAAKC,MAAMD,KAAKkC,KAAK5E,EAAU8B,SAAW,GAGG,IAEtD,OACEsC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAiBG,SAAA,EAC/BD,EAAAA,EAAAA,MAAA,MAAIH,UAAWC,EAAaG,SAAA,CACZ,QAAblE,EAAqB,MAAQ,MAAM,6CAItCiE,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAqBG,SAAA,EACnCD,EAAAA,EAAAA,MAAA,UAAQS,QArHSC,KACrB1E,GAAa2E,GAAmB,QAATA,EAAiB,MAAQ,QAChDnE,EAAiB,eAAD4B,OAA6B,QAAbrC,EAAqB,MAAQ,MAAK,SAAQ,EAmHrC8D,UAAWC,EAAoBG,SAAA,CAAC,aACvC,QAAblE,EAAqB,MAAQ,MAAM,YAEhDyD,EAAAA,EAAAA,KAAA,KAAGK,UAAWC,EAAuBG,SACrB,QAAblE,EACG,4CACA,iDAKRiE,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAgBG,SAAA,EAC9BD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAkBG,SAAA,EAChCT,EAAAA,EAAAA,KAAA,SACEoB,KAAK,SACL5C,MAAO/B,EACP4E,SAAWC,GAAM5E,EAAc4E,EAAEC,OAAO/C,OACxCgD,YAAY,cACZnB,UAAWC,EACXmB,WAAaH,GAAgB,UAAVA,EAAEI,KAAmBpD,QAE1C0B,EAAAA,EAAAA,KAAA,UAAQiB,QAAS3C,GAAc+B,UAAWC,EAAkBG,SAAC,eAI/DD,EAAAA,EAAAA,MAAA,UAAQS,QA/LQnD,UACpB,GAAyB,IAArB1B,EAAU8B,OAAc,OAE5B,MAAMyD,EAAiBvF,EAAU,GAEjC,GAAyB,IAArBA,EAAU8B,OAGZ,OAFA7B,EAAa,SACbW,EAAiB,aAAD4B,OAAc+C,EAAc,yBAK9C,MAAMhD,EAAW,IAAIvC,GACrBuC,EAAS,GAAKA,EAASA,EAAST,OAAS,GACzCS,EAASiD,MACTvF,EAAasC,GACb3B,EAAiB,aAAD4B,OAAc+C,UAExBnE,GAAM,WACNK,GAAWc,EAAU,EAAE,EA4KO0B,UAAWC,EAAoBG,SAAA,CAAC,WACxC,QAAblE,EAAqB,MAAQ,UAExCyD,EAAAA,EAAAA,KAAA,UAAQiB,QA5KUnD,UACtB,MAAMC,EAAM,IAAI3B,GAChBY,EAAiB,+BAGjB,IAAK,IAAIG,EAAI2B,KAAKC,MAAMhB,EAAIG,OAAS,GAAK,EAAGf,GAAK,EAAGA,UAC7CU,GAAWE,EAAKZ,GAGxBH,EAAiB,2BAA2B,EAmKNqD,UAAWC,EAAoBG,SAAC,aAGlET,EAAAA,EAAAA,KAAA,UAAQiB,QA5JUY,KACtB,MAAMC,EAAcC,MAAMC,KAAK,CAAE9D,OAAQ,IAAK,IAC5CY,KAAKC,MAAsB,IAAhBD,KAAKmD,YAElB5F,EAAayF,GACb9E,EAAiB,yBAAyB,EAuJJqD,UAAWC,EAAoBG,SAAC,kBAGlET,EAAAA,EAAAA,KAAA,UAAQiB,QAtKMiB,KAClB7F,EAAa,IACbW,EAAiB,gBACjBJ,EAAoB,IACpBE,EAAoB,GAAG,EAkKWuD,UAAWC,EAAiBG,SAAC,aAM5D1D,IAAiBiD,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAiBG,SAAE1D,KAGrDyD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAcG,SAAA,EAC5BD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAkBG,SAAA,EAChCT,EAAAA,EAAAA,KAAA,OAAKK,UAAS,GAAAzB,OAAK0B,EAAgB,KAAA1B,OAAI0B,MACvCN,EAAAA,EAAAA,KAAA,QAAAS,SAAM,kBAERD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAkBG,SAAA,EAChCT,EAAAA,EAAAA,KAAA,OAAKK,UAAS,GAAAzB,OAAK0B,EAAgB,KAAA1B,OAAI0B,MACvCN,EAAAA,EAAAA,KAAA,QAAAS,SAAM,oBAERD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAkBG,SAAA,EAChCT,EAAAA,EAAAA,KAAA,OAAKK,UAAS,GAAAzB,OAAK0B,EAAgB,KAAA1B,OAAI0B,MACvCN,EAAAA,EAAAA,KAAA,QAAAS,SAAM,kBAERD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAkBG,SAAA,EAChCT,EAAAA,EAAAA,KAAA,OAAKK,UAAS,GAAAzB,OAAK0B,EAAgB,KAAA1B,OAAI0B,MACvCN,EAAAA,EAAAA,KAAA,QAAAS,SAAM,oBAKVD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAeG,SAAA,EAC7BT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,0BACJT,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAsBG,SACd,IAArBrE,EAAU8B,QACT8B,EAAAA,EAAAA,KAAA,KAAGK,UAAWC,EAAoBG,SAAC,kBAEnCrE,EAAU+F,KAAI,CAAC3D,EAAOR,KACpBwC,EAAAA,EAAAA,MAAA,OAEEH,UAAS,GAAAzB,OAAK0B,EAAgB,KAAA1B,OAC5BjC,EAAiBgD,SAAS3B,GAASsC,EAAmB,GAAE,KAAA1B,OACtD/B,EAAiB8C,SAAS3B,GAASsC,EAAmB,GAAE,KAAA1B,OAChD,IAAVZ,EAAcsC,EAAkB,IAC/BG,SAAA,EAEHT,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAkBG,SAAEzC,KACpCgC,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAkBG,SAAEjC,MAR/BR,QAabgC,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAqBG,UACnCD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,YAAgB,eAAWT,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,gBAAoB,YAC7DT,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,iBAAqB,iBAMrCD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAeG,SAAA,EAC7BT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,mBACkB,IAArBrE,EAAU8B,QACT8B,EAAAA,EAAAA,KAAA,KAAGK,UAAWC,EAAoBG,SAAC,kCAEnCT,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAqBG,UACnCT,EAAAA,EAAAA,KAAA,OAAKoC,MAAM,MAAMC,OAAQvB,GAAWT,UAAWC,EAAeG,SAC3DxB,GAAe,EAAG,IAAK,GAAI,EAAG,aAOvCuB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAeG,SAAA,EAC7BT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,kCACJD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAsBG,SAAA,EACpCD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBG,SAAA,EAClCT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,0BACJT,EAAAA,EAAAA,KAAA,KAAAS,SAAG,yEAILD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBG,SAAA,EAClCT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,mBACJT,EAAAA,EAAAA,KAAA,KAAAS,SACgB,QAAblE,EACG,kCACA,wCAGRiE,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBG,SAAA,EAClCT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,uBACJT,EAAAA,EAAAA,KAAA,KAAAS,SAAG,wDAELD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBG,SAAA,EAClCT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,wBACJT,EAAAA,EAAAA,KAAA,KAAAS,SAAG,oDAELD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBG,SAAA,EAClCT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,iBACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,UAAqB,QAAblE,EAAqB,UAAY,UAAU,kBAExDiE,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAoBG,SAAA,EAClCT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,oBACJT,EAAAA,EAAAA,KAAA,KAAAS,SAAG,sDAMTD,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAmBG,SAAA,EACjCT,EAAAA,EAAAA,KAAA,MAAAS,SAAI,8BACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,qBAAyB,gDAGnCD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,eAAmB,8CAE7BD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,gCAAoC,0BAE9CD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,wBAA4B,sCAEtCD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACET,EAAAA,EAAAA,KAAA,UAAAS,SAAQ,sBAA0B,qCAIpC,C","sources":["webpack://AlgoLens/./src/routing/site/ds/components/Heap/Heap.module.css?97d8","routing/site/ds/components/Heap/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Heap_container__-GbyB\",\"title\":\"Heap_title__B5HsH\",\"toggleSection\":\"Heap_toggleSection__PKVyJ\",\"toggleButton\":\"Heap_toggleButton__SGkBn\",\"heapDescription\":\"Heap_heapDescription__p9pR8\",\"controls\":\"Heap_controls__pOSJV\",\"inputGroup\":\"Heap_inputGroup__kBG3n\",\"input\":\"Heap_input__ymSWM\",\"btnPrimary\":\"Heap_btnPrimary__Sqi2J\",\"btnSecondary\":\"Heap_btnSecondary__U0KMw\",\"btnDanger\":\"Heap_btnDanger__p4MPK\",\"operation\":\"Heap_operation__+b1ss\",\"slideDown\":\"Heap_slideDown__6I5uT\",\"legend\":\"Heap_legend__d1CvX\",\"legendItem\":\"Heap_legendItem__IdjgJ\",\"legendBox\":\"Heap_legendBox__97WR7\",\"legendRoot\":\"Heap_legendRoot__EQjVv\",\"legendNormal\":\"Heap_legendNormal__bW5AM\",\"legendComparing\":\"Heap_legendComparing__UeUWD\",\"legendAnimating\":\"Heap_legendAnimating__rxJy9\",\"section\":\"Heap_section__ZN+Ku\",\"emptyMessage\":\"Heap_emptyMessage__wizRU\",\"arrayContainer\":\"Heap_arrayContainer__t4upw\",\"arrayCell\":\"Heap_arrayCell__4eToB\",\"rootCell\":\"Heap_rootCell__PFJX2\",\"comparing\":\"Heap_comparing__oYzAZ\",\"pulse\":\"Heap_pulse__9IpOz\",\"animating\":\"Heap_animating__zzQB5\",\"bounce\":\"Heap_bounce__DZDhz\",\"arrayIndex\":\"Heap_arrayIndex__TOKDO\",\"arrayValue\":\"Heap_arrayValue__W-8zI\",\"arrayFormulas\":\"Heap_arrayFormulas__1vY62\",\"treeContainer\":\"Heap_treeContainer__fiHVt\",\"treeSvg\":\"Heap_treeSvg__z9oVU\",\"treeLine\":\"Heap_treeLine__2268A\",\"heapNode\":\"Heap_heapNode__KT6z4\",\"rootNode\":\"Heap_rootNode__ep+EN\",\"nodePulse\":\"Heap_nodePulse__ENo0h\",\"nodeSwap\":\"Heap_nodeSwap__ebm4E\",\"nodeText\":\"Heap_nodeText__9L-oo\",\"indexText\":\"Heap_indexText__DHBJt\",\"propertiesGrid\":\"Heap_propertiesGrid__SxZLy\",\"propertyCard\":\"Heap_propertyCard__C4zH5\",\"explanation\":\"Heap_explanation__B96ov\"};","import React, { useState, useEffect } from \"react\"\nimport styles from \"./Heap.module.css\"\n\nconst Heap = () => {\n  const [heapArray, setHeapArray] = useState([])\n  const [heapType, setHeapType] = useState(\"min\") // 'min' or 'max'\n  const [inputValue, setInputValue] = useState(\"\")\n  const [animatingIndices, setAnimatingIndices] = useState([])\n  const [comparingIndices, setComparingIndices] = useState([])\n  const [lastOperation, setLastOperation] = useState(\"\")\n\n  // Initialize with sample data\n  useEffect(() => {\n    setHeapArray([10, 15, 20, 17, 25])\n  }, [])\n\n  const getParentIndex = (i) => Math.floor((i - 1) / 2)\n  const getLeftChildIndex = (i) => 2 * i + 1\n  const getRightChildIndex = (i) => 2 * i + 2\n\n  const shouldSwap = (parentVal, childVal) => {\n    if (heapType === \"min\") {\n      return parentVal > childVal\n    } else {\n      return parentVal < childVal\n    }\n  }\n\n  const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms))\n\n  const bubbleUp = async (arr, index) => {\n    let currentIndex = index\n\n    while (currentIndex > 0) {\n      const parentIndex = getParentIndex(currentIndex)\n\n      setComparingIndices([currentIndex, parentIndex])\n      await sleep(600)\n\n      if (shouldSwap(arr[parentIndex], arr[currentIndex])) {\n        // Swap\n        setAnimatingIndices([currentIndex, parentIndex])\n        await sleep(400)\n        ;[arr[parentIndex], arr[currentIndex]] = [\n          arr[currentIndex],\n          arr[parentIndex],\n        ]\n        setHeapArray([...arr])\n\n        await sleep(400)\n        currentIndex = parentIndex\n      } else {\n        break\n      }\n    }\n\n    setComparingIndices([])\n    setAnimatingIndices([])\n  }\n\n  const bubbleDown = async (arr, index) => {\n    let currentIndex = index\n    const length = arr.length\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const leftChildIndex = getLeftChildIndex(currentIndex)\n      const rightChildIndex = getRightChildIndex(currentIndex)\n      let targetIndex = currentIndex\n\n      // Find the target index to swap with\n      if (leftChildIndex < length) {\n        setComparingIndices([currentIndex, leftChildIndex])\n        await sleep(600)\n\n        if (shouldSwap(arr[targetIndex], arr[leftChildIndex])) {\n          targetIndex = leftChildIndex\n        }\n      }\n\n      if (rightChildIndex < length) {\n        setComparingIndices([currentIndex, rightChildIndex, targetIndex])\n        await sleep(600)\n\n        if (shouldSwap(arr[targetIndex], arr[rightChildIndex])) {\n          targetIndex = rightChildIndex\n        }\n      }\n\n      if (targetIndex === currentIndex) {\n        break\n      }\n\n      // Swap\n      setAnimatingIndices([currentIndex, targetIndex])\n      await sleep(400)\n      ;[arr[currentIndex], arr[targetIndex]] = [\n        arr[targetIndex],\n        arr[currentIndex],\n      ]\n      setHeapArray([...arr])\n\n      await sleep(400)\n      currentIndex = targetIndex\n    }\n\n    setComparingIndices([])\n    setAnimatingIndices([])\n  }\n\n  const handleInsert = async () => {\n    if (!inputValue.trim()) return\n\n    const value = parseInt(inputValue, 10)\n    if (isNaN(value)) return\n\n    const newArray = [...heapArray, value]\n    setHeapArray(newArray)\n    setInputValue(\"\")\n    setLastOperation(`Inserted ${value}`)\n\n    await sleep(500)\n    await bubbleUp(newArray, newArray.length - 1)\n  }\n\n  const handleExtract = async () => {\n    if (heapArray.length === 0) return\n\n    const extractedValue = heapArray[0]\n\n    if (heapArray.length === 1) {\n      setHeapArray([])\n      setLastOperation(`Extracted ${extractedValue} (heap is now empty)`)\n      return\n    }\n\n    // Move last element to root\n    const newArray = [...heapArray]\n    newArray[0] = newArray[newArray.length - 1]\n    newArray.pop()\n    setHeapArray(newArray)\n    setLastOperation(`Extracted ${extractedValue}`)\n\n    await sleep(500)\n    await bubbleDown(newArray, 0)\n  }\n\n  const handleBuildHeap = async () => {\n    const arr = [...heapArray]\n    setLastOperation(\"Building heap from array...\")\n\n    // Start from last non-leaf node\n    for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n      await bubbleDown(arr, i)\n    }\n\n    setLastOperation(\"Heap built successfully!\")\n  }\n\n  const handleClear = () => {\n    setHeapArray([])\n    setLastOperation(\"Heap cleared\")\n    setAnimatingIndices([])\n    setComparingIndices([])\n  }\n\n  const handleRandomize = () => {\n    const randomArray = Array.from({ length: 7 }, () =>\n      Math.floor(Math.random() * 100)\n    )\n    setHeapArray(randomArray)\n    setLastOperation(\"Random array generated\")\n  }\n\n  const toggleHeapType = () => {\n    setHeapType((prev) => (prev === \"min\" ? \"max\" : \"min\"))\n    setLastOperation(`Switched to ${heapType === \"min\" ? \"Max\" : \"Min\"} Heap`)\n  }\n\n  // Tree rendering\n  const renderTreeNode = (index, x, y, level, horizontalSpacing) => {\n    if (index >= heapArray.length) return null\n\n    const value = heapArray[index]\n    const leftChildIndex = getLeftChildIndex(index)\n    const rightChildIndex = getRightChildIndex(index)\n\n    const nodeRadius = 25\n    const verticalSpacing = 70\n    const offset = horizontalSpacing / Math.pow(2, level + 1)\n\n    const elements = []\n    const isAnimating = animatingIndices.includes(index)\n    const isComparing = comparingIndices.includes(index)\n\n    // Draw connections to children\n    if (leftChildIndex < heapArray.length) {\n      const childX = x - offset\n      const childY = y + verticalSpacing\n      elements.push(\n        <line\n          key={`left-line-${index}`}\n          x1={x}\n          y1={y + nodeRadius}\n          x2={childX}\n          y2={childY - nodeRadius}\n          className={styles.treeLine}\n          strokeWidth=\"2\"\n        />\n      )\n      elements.push(\n        ...renderTreeNode(\n          leftChildIndex,\n          childX,\n          childY,\n          level + 1,\n          horizontalSpacing\n        )\n      )\n    }\n\n    if (rightChildIndex < heapArray.length) {\n      const childX = x + offset\n      const childY = y + verticalSpacing\n      elements.push(\n        <line\n          key={`right-line-${index}`}\n          x1={x}\n          y1={y + nodeRadius}\n          x2={childX}\n          y2={childY - nodeRadius}\n          className={styles.treeLine}\n          strokeWidth=\"2\"\n        />\n      )\n      elements.push(\n        ...renderTreeNode(\n          rightChildIndex,\n          childX,\n          childY,\n          level + 1,\n          horizontalSpacing\n        )\n      )\n    }\n\n    // Draw node\n    elements.push(\n      <g key={`node-${index}`}>\n        <circle\n          cx={x}\n          cy={y}\n          r={nodeRadius}\n          className={`${styles.heapNode} ${\n            isAnimating ? styles.animating : \"\"\n          } ${isComparing ? styles.comparing : \"\"} ${\n            index === 0 ? styles.rootNode : \"\"\n          }`}\n        />\n        <text x={x} y={y + 5} textAnchor=\"middle\" className={styles.nodeText}>\n          {value}\n        </text>\n        <text\n          x={x}\n          y={y - nodeRadius - 8}\n          textAnchor=\"middle\"\n          className={styles.indexText}\n        >\n          [{index}]\n        </text>\n      </g>\n    )\n\n    return elements\n  }\n\n  const getTreeDepth = () => {\n    if (heapArray.length === 0) return 0\n    return Math.floor(Math.log2(heapArray.length)) + 1\n  }\n\n  const svgHeight = Math.max(300, getTreeDepth() * 80 + 50)\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>\n        {heapType === \"min\" ? \"Min\" : \"Max\"} Heap Visualization 🏔️\n      </h1>\n\n      {/* Heap Type Toggle */}\n      <div className={styles.toggleSection}>\n        <button onClick={toggleHeapType} className={styles.toggleButton}>\n          Switch to {heapType === \"min\" ? \"Max\" : \"Min\"} Heap\n        </button>\n        <p className={styles.heapDescription}>\n          {heapType === \"min\"\n            ? \"Min Heap: Parent is smaller than children\"\n            : \"Max Heap: Parent is larger than children\"}\n        </p>\n      </div>\n\n      {/* Controls */}\n      <div className={styles.controls}>\n        <div className={styles.inputGroup}>\n          <input\n            type=\"number\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Enter value\"\n            className={styles.input}\n            onKeyPress={(e) => e.key === \"Enter\" && handleInsert()}\n          />\n          <button onClick={handleInsert} className={styles.btnPrimary}>\n            Insert\n          </button>\n        </div>\n        <button onClick={handleExtract} className={styles.btnSecondary}>\n          Extract {heapType === \"min\" ? \"Min\" : \"Max\"}\n        </button>\n        <button onClick={handleBuildHeap} className={styles.btnSecondary}>\n          Heapify\n        </button>\n        <button onClick={handleRandomize} className={styles.btnSecondary}>\n          Random Array\n        </button>\n        <button onClick={handleClear} className={styles.btnDanger}>\n          Clear\n        </button>\n      </div>\n\n      {/* Last Operation */}\n      {lastOperation && <div className={styles.operation}>{lastOperation}</div>}\n\n      {/* Legend */}\n      <div className={styles.legend}>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendRoot}`} />\n          <span>Root Node</span>\n        </div>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendNormal}`} />\n          <span>Normal Node</span>\n        </div>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendComparing}`} />\n          <span>Comparing</span>\n        </div>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendAnimating}`} />\n          <span>Swapping</span>\n        </div>\n      </div>\n\n      {/* Array Representation */}\n      <div className={styles.section}>\n        <h3>Array Representation</h3>\n        <div className={styles.arrayContainer}>\n          {heapArray.length === 0 ? (\n            <p className={styles.emptyMessage}>Heap is empty</p>\n          ) : (\n            heapArray.map((value, index) => (\n              <div\n                key={index}\n                className={`${styles.arrayCell} ${\n                  animatingIndices.includes(index) ? styles.animating : \"\"\n                } ${comparingIndices.includes(index) ? styles.comparing : \"\"} ${\n                  index === 0 ? styles.rootCell : \"\"\n                }`}\n              >\n                <div className={styles.arrayIndex}>{index}</div>\n                <div className={styles.arrayValue}>{value}</div>\n              </div>\n            ))\n          )}\n        </div>\n        <div className={styles.arrayFormulas}>\n          <p>\n            <strong>Parent:</strong> (i-1)/2 | <strong>Left Child:</strong> 2i+1\n            | <strong>Right Child:</strong> 2i+2\n          </p>\n        </div>\n      </div>\n\n      {/* Tree Visualization */}\n      <div className={styles.section}>\n        <h3>Tree Structure</h3>\n        {heapArray.length === 0 ? (\n          <p className={styles.emptyMessage}>Add elements to see the tree</p>\n        ) : (\n          <div className={styles.treeContainer}>\n            <svg width=\"800\" height={svgHeight} className={styles.treeSvg}>\n              {renderTreeNode(0, 400, 40, 0, 400)}\n            </svg>\n          </div>\n        )}\n      </div>\n\n      {/* Heap Properties */}\n      <div className={styles.section}>\n        <h3>Heap Properties & Operations</h3>\n        <div className={styles.propertiesGrid}>\n          <div className={styles.propertyCard}>\n            <h4>Complete Binary Tree</h4>\n            <p>\n              All levels filled except possibly the last, filled left to right\n            </p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Heap Property</h4>\n            <p>\n              {heapType === \"min\"\n                ? \"Each parent ≤ its children\"\n                : \"Each parent ≥ its children\"}\n            </p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Insert - O(log n)</h4>\n            <p>Add at end, bubble up to maintain heap property</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Extract - O(log n)</h4>\n            <p>Remove root, move last to root, bubble down</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Peek - O(1)</h4>\n            <p>Access {heapType === \"min\" ? \"minimum\" : \"maximum\"} at root</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Heapify - O(n)</h4>\n            <p>Convert arbitrary array into valid heap</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Use Cases */}\n      <div className={styles.explanation}>\n        <h3>Real-World Applications:</h3>\n        <ul>\n          <li>\n            <strong>Priority Queues:</strong> OS task scheduling,\n            Dijkstra&apos;s algorithm\n          </li>\n          <li>\n            <strong>Heap Sort:</strong> Efficient sorting algorithm O(n log n)\n          </li>\n          <li>\n            <strong>Finding K Largest/Smallest:</strong> Use heap of size K\n          </li>\n          <li>\n            <strong>Median Maintenance:</strong> Two heaps (min + max) approach\n          </li>\n          <li>\n            <strong>Graph Algorithms:</strong> A*, Prim&apos;s, Dijkstra&apos;s\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default Heap\n"],"names":["Heap","heapArray","setHeapArray","useState","heapType","setHeapType","inputValue","setInputValue","animatingIndices","setAnimatingIndices","comparingIndices","setComparingIndices","lastOperation","setLastOperation","useEffect","getLeftChildIndex","i","getRightChildIndex","shouldSwap","parentVal","childVal","sleep","ms","Promise","resolve","setTimeout","bubbleDown","async","arr","index","currentIndex","length","leftChildIndex","rightChildIndex","targetIndex","handleInsert","trim","value","parseInt","isNaN","newArray","concat","parentIndex","Math","floor","bubbleUp","renderTreeNode","x","y","level","horizontalSpacing","nodeRadius","offset","pow","elements","isAnimating","includes","isComparing","childX","childY","push","_jsx","x1","y1","x2","y2","className","styles","strokeWidth","_jsxs","children","cx","cy","r","textAnchor","svgHeight","max","log2","onClick","toggleHeapType","prev","type","onChange","e","target","placeholder","onKeyPress","key","extractedValue","pop","handleRandomize","randomArray","Array","from","random","handleClear","map","width","height"],"sourceRoot":""}