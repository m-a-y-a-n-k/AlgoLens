{"version":3,"file":"static/js/8974.7b832c9c.chunk.js","mappings":"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","sources":["webpack://AlgoLens/./src/routing/site/algo/components/TrafficSimulation/TrafficSimulation.module.css?cac6","routing/site/algo/components/TrafficSimulation/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TrafficSimulation_container__bY5x8\",\"button\":\"TrafficSimulation_button__MtNoA\",\"road\":\"TrafficSimulation_road__vHzh9\",\"car\":\"TrafficSimulation_car__dZt0y\"};","// RealisticTrafficSimulation.jsx\nimport React, { useState, useEffect, useRef, useLayoutEffect } from \"react\"\nimport styles from \"./TrafficSimulation.module.css\"\n\nconst CAR_WIDTH = 40\nconst CAR_HEIGHT = 25\n\nconst makeCar = (id, lanes, vmax) => ({\n  id,\n  lane: Math.floor(Math.random() * lanes), // random lane\n  pos: 0, // always start at beginning\n  speed: Math.floor(Math.random() * (vmax + 1)),\n  color: `hsl(${Math.random() * 360}, 70%, 50%)`,\n})\n\nconst createCars = (lanes, carCount, vmax) => {\n  const cars = []\n  for (let i = 0; i < carCount; i++) {\n    cars.push(makeCar(i, lanes, vmax))\n  }\n  return cars\n}\n\nexport default function RealisticTrafficSimulation({\n  lanes = 3,\n  roadLength = 60, // number of discrete cells\n  carCount = 8,\n  vmax = 5,\n  p = 0.2,\n  interval = 500,\n}) {\n  const roadRef = useRef(null)\n  const [dims, setDims] = useState({ width: 0, height: 0 })\n  const [cars, setCars] = useState(createCars(lanes, carCount, vmax))\n  const [running, setRunning] = useState(false)\n  const intervalRef = useRef(null)\n  const nextId = useRef(carCount)\n\n  const measure = () => {\n    if (!roadRef.current) return\n    const rect = roadRef.current.getBoundingClientRect()\n    setDims({ width: rect.width, height: rect.height })\n  }\n\n  useLayoutEffect(() => {\n    measure()\n    window.addEventListener(\"resize\", measure)\n    return () => window.removeEventListener(\"resize\", measure)\n  }, [])\n\n  const stepSimulation = () => {\n    setCars((prev) => {\n      let next = prev.map((c) => ({ ...c }))\n\n      // update speeds & positions\n      for (let lane = 0; lane < lanes; lane++) {\n        const laneCars = next\n          .filter((c) => c.lane === lane)\n          .sort((a, b) => a.pos - b.pos)\n\n        for (let i = 0; i < laneCars.length; i++) {\n          const car = laneCars[i]\n\n          // accelerate\n          if (car.speed < vmax) car.speed++\n\n          // distance to next car\n          const nextCar = laneCars[i + 1]\n          let gap = nextCar ? nextCar.pos - car.pos - 1 : roadLength\n\n          if (car.speed > gap) car.speed = gap\n\n          // random slowdown\n          if (Math.random() < p && car.speed > 0) car.speed--\n\n          // move forward\n          car.pos += car.speed\n        }\n      }\n\n      // remove cars that reached end\n      const survivors = next.filter((c) => c.pos < roadLength)\n\n      // spawn new cars for removed ones\n      const removedCount = next.length - survivors.length\n      for (let i = 0; i < removedCount; i++) {\n        survivors.push(makeCar(nextId.current++, lanes, vmax))\n      }\n\n      return survivors\n    })\n  }\n\n  useEffect(() => {\n    if (running) {\n      intervalRef.current = setInterval(stepSimulation, interval)\n    } else {\n      clearInterval(intervalRef.current)\n    }\n    return () => clearInterval(intervalRef.current)\n  }, [running, interval])\n\n  // map discrete pos -> pixels\n  const usableWidth = Math.max(0, dims.width - CAR_WIDTH)\n  const cellWidth = roadLength > 1 ? usableWidth / (roadLength - 1) : 0\n  const laneGap =\n    lanes > 1 ? Math.max(0, dims.height - CAR_HEIGHT) / (lanes - 1) : 0\n\n  return (\n    <div className={styles.container}>\n      <h3>Traffic Simulation</h3>\n\n      <div className={styles.road} ref={roadRef}>\n        {cars.map((car) => {\n          const xPx = Math.round(car.pos * cellWidth)\n          const yPx = Math.round(car.lane * laneGap)\n\n          return (\n            <div\n              key={car.id}\n              className={styles.car}\n              style={{\n                backgroundColor: car.color,\n                transform: `translate(${xPx}px, ${yPx}px)`,\n              }}\n            >\n              ðŸš—\n            </div>\n          )\n        })}\n      </div>\n      <button onClick={() => setRunning((r) => !r)} className={styles.button}>\n        {running ? \"Stop\" : \"Start\"}\n      </button>\n    </div>\n  )\n}\n"],"names":["makeCar","id","lanes","vmax","lane","Math","floor","random","pos","speed","color","RealisticTrafficSimulation","_ref","roadLength","carCount","p","interval","roadRef","useRef","dims","setDims","useState","width","height","cars","setCars","createCars","i","push","running","setRunning","intervalRef","nextId","measure","current","rect","getBoundingClientRect","useLayoutEffect","window","addEventListener","removeEventListener","stepSimulation","prev","next","map","c","laneCars","filter","sort","a","b","length","car","nextCar","gap","survivors","removedCount","useEffect","setInterval","clearInterval","usableWidth","max","cellWidth","laneGap","_jsxs","className","styles","children","_jsx","ref","xPx","round","yPx","style","backgroundColor","transform","onClick","r"],"sourceRoot":""}