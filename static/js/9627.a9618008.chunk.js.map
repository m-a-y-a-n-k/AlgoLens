{"version":3,"file":"static/js/9627.a9618008.chunk.js","mappings":"mKAIA,MAAMA,EACD,OADCA,EAED,SAiGL,EA9FaC,KACX,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,IAC1CC,EAAMC,IAAWF,EAAAA,EAAAA,UACtBG,MAAMC,KAAK,CAAEC,OAAQ,IAAK,IAAMF,MAAM,GAAGG,KAAKV,OAEzCW,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,MAC7BS,EAAUR,EAAKS,KAAKC,GACxBA,EAAID,KAAI,CAACE,EAAMC,KACb,IAAIC,EAAS,EAQb,OAPIF,IAAShB,GACXkB,GAAUH,EAAII,QAAQC,GAAMA,IAAMpB,IAAUS,OAAS,EACrDS,GAAUb,EAAKS,KAAKO,GAAMA,EAAEJ,KAAIE,QAAQC,GAAMA,IAAMpB,IAAUS,OAAS,IAEvES,GAAUH,EAAII,QAAQC,GAAMA,IAAMpB,IAAUS,OAC5CS,GAAUb,EAAKS,KAAKO,GAAMA,EAAEJ,KAAIE,QAAQC,GAAMA,IAAMpB,IAAUS,QAEzDS,CAAM,MAIXI,GAA2BC,EAAAA,EAAAA,cAAaC,IAC5C,MAAMC,EAAQC,SAASF,EAAEG,OAAOF,OAC5BA,EAAQ,GAAKA,EAAQ,EACvBb,EAAS,CACPgB,KAAM,8CACNC,KAAM,YAIV1B,EAAgBsB,GAChBnB,EAAQC,MAAMC,KAAK,CAAEC,OAAQgB,IAAS,IAAMlB,MAAMkB,GAAOf,KAAKV,MAAW,GACxE,IAEG8B,GAAaP,EAAAA,EAAAA,cACjB,CAACN,EAAGc,KACF,MAAMC,EAAU3B,EAAKS,KAAI,CAACC,EAAKkB,IAC7BlB,EAAID,KAAI,CAACE,EAAMkB,IACTD,IAAaF,GAAKG,IAAajB,EAC1BD,IAAShB,EAAWA,EAAWA,EAEjCgB,MAGXV,EAAQ0B,EAAQ,GAElB,CAAC3B,IAGH,OACE8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,gCACyB,KAC9BC,EAAAA,EAAAA,KAAA,SACET,KAAK,SACLJ,MAAOvB,EACPqC,SAAUjB,EACVkB,IAAI,IACJC,IAAI,UAGRH,EAAAA,EAAAA,KAAA,OACEF,UAAU,OACVM,MAAO,CACLC,oBAAsB,UAASzC,yBAC/BmC,SAEDhC,EAAKS,KAAI,CAACC,EAAKgB,KACdO,EAAAA,EAAAA,KAAA,OAAaF,UAAU,MAAKC,SACzBtB,EAAID,KAAI,CAACE,EAAMC,KACdkB,EAAAA,EAAAA,MAAA,OAEEC,UAAY,SAAOpB,IAAShB,EAAW,IAAM,KAC7C4C,QAASA,IAAMd,EAAWb,EAAGc,GAAGM,SAAA,CAE/BrB,EAAK,KAAGH,EAAQkB,GAAGd,GAAG,MAJjB,GAAEA,KAAKc,QAHTA,OAabpB,IACC2B,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACJhB,KAAMlB,EAAMkB,KACZiB,SAAUnC,EAAMiB,KAChBmB,OAAQA,IAAMnC,EAAS,MAAMyB,SAE5B1B,EAAMiB,SAGP,C","sources":["routing/site/games/components/PrisonerDilemma/index.jsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\"\nimport { Alert } from \"reactstrap\"\nimport \"./Game.css\"\n\nconst Choice = {\n  C: \"HELP\",\n  D: \"BETRAY\",\n}\n\nconst Game = () => {\n  const [numPrisoners, setNumPrisoners] = useState(2)\n  const [grid, setGrid] = useState(\n    Array.from({ length: 2 }, () => Array(2).fill(Choice.C))\n  )\n  const [alert, setAlert] = useState(null)\n  const payoffs = grid.map((row) =>\n    row.map((cell, x) => {\n      let payoff = 0\n      if (cell === Choice.C) {\n        payoff += row.filter((c) => c === Choice.C).length - 1 // Coop with row members\n        payoff += grid.map((r) => r[x]).filter((c) => c === Choice.C).length - 1 // Coop with col members\n      } else {\n        payoff += row.filter((c) => c === Choice.D).length // Defect with row members\n        payoff += grid.map((r) => r[x]).filter((c) => c === Choice.D).length // Defect with col members\n      }\n      return payoff\n    })\n  )\n\n  const handleNumPrisonersChange = useCallback((e) => {\n    const value = parseInt(e.target.value)\n    if (value < 2 || value > 8) {\n      setAlert({\n        text: \"Number of prisoners must be between 2 and 8\",\n        type: \"danger\",\n      })\n      return\n    }\n    setNumPrisoners(value)\n    setGrid(Array.from({ length: value }, () => Array(value).fill(Choice.C)))\n  }, [])\n\n  const toggleCell = useCallback(\n    (x, y) => {\n      const newGrid = grid.map((row, rowIndex) =>\n        row.map((cell, colIndex) => {\n          if (rowIndex === y && colIndex === x) {\n            return cell === Choice.C ? Choice.D : Choice.C\n          }\n          return cell\n        })\n      )\n      setGrid(newGrid)\n    },\n    [grid]\n  )\n\n  return (\n    <div className=\"game-prisoners-dilemma\">\n      <h1>Prisoner&apos;s Dilemma</h1>\n      <label>\n        Number of Prisoners and Turns{\" \"}\n        <input\n          type=\"number\"\n          value={numPrisoners}\n          onChange={handleNumPrisonersChange}\n          min=\"2\"\n          max=\"8\"\n        />\n      </label>\n      <div\n        className=\"grid\"\n        style={{\n          gridTemplateColumns: `repeat(${numPrisoners}, minmax(48px, 1fr))`,\n        }}\n      >\n        {grid.map((row, y) => (\n          <div key={y} className=\"row\">\n            {row.map((cell, x) => (\n              <div\n                key={`${x}-${y}`}\n                className={`cell ${cell === Choice.C ? \"C\" : \"D\"}`}\n                onClick={() => toggleCell(x, y)}\n              >\n                {cell} ({payoffs[y][x]})\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {alert && (\n        <Alert\n          type={alert.type}\n          isOpen={!!alert.text}\n          toggle={() => setAlert(null)}\n        >\n          {alert.text}\n        </Alert>\n      )}\n    </div>\n  )\n}\n\nexport default Game\n"],"names":["Choice","Game","numPrisoners","setNumPrisoners","useState","grid","setGrid","Array","from","length","fill","alert","setAlert","payoffs","map","row","cell","x","payoff","filter","c","r","handleNumPrisonersChange","useCallback","e","value","parseInt","target","text","type","toggleCell","y","newGrid","rowIndex","colIndex","_jsxs","className","children","_jsx","onChange","min","max","style","gridTemplateColumns","onClick","Alert","isOpen","toggle"],"sourceRoot":""}