{"version":3,"file":"static/js/1505.005aee78.chunk.js","mappings":"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","sources":["webpack://app/./src/routing/site/algo/components/JumpSearch/JumpSearch.module.css?eafb","routing/site/algo/components/JumpSearch/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"arrayContainer\":\"JumpSearch_arrayContainer__8QYSL\",\"arrayElement\":\"JumpSearch_arrayElement__jVG15\",\"highlight\":\"JumpSearch_highlight__r8MPz\"};","import React, { useState } from \"react\"\r\nimport styles from \"./JumpSearch.module.css\"\r\n\r\nconst JumpSearch = () => {\r\n  const [arrayInput, setArrayInput] = useState(\"1,3,5,7,9,11,13,15,17,19\")\r\n  const [targetInput, setTargetInput] = useState(\"11\")\r\n  const [array, setArray] = useState([])\r\n  const [, setTarget] = useState(null)\r\n  const [highlightedIndex, setHighlightedIndex] = useState(-1)\r\n  const [status, setStatus] = useState(\"Enter array and target to start\")\r\n  const [isRunning, setIsRunning] = useState(false)\r\n\r\n  const stepDelay = 700\r\n\r\n  const parseInputs = () => {\r\n    const arr = arrayInput\r\n      .split(\",\")\r\n      .map((num) => num.trim())\r\n      .filter((num) => num !== \"\")\r\n      .map(Number)\r\n\r\n    if (arr.some(isNaN)) {\r\n      setStatus(\"Error: Array contains invalid numbers.\")\r\n      return null\r\n    }\r\n\r\n    for (let i = 1; i < arr.length; i++) {\r\n      if (arr[i] < arr[i - 1]) {\r\n        setStatus(\"Error: Array must be sorted in ascending order.\")\r\n        return null\r\n      }\r\n    }\r\n\r\n    const tgt = Number(targetInput)\r\n    if (isNaN(tgt)) {\r\n      setStatus(\"Error: Target is not a valid number.\")\r\n      return null\r\n    }\r\n\r\n    setArray(arr)\r\n    setTarget(tgt)\r\n    return { arr, tgt }\r\n  }\r\n\r\n  const startSearch = () => {\r\n    const inputs = parseInputs()\r\n    if (!inputs) return\r\n\r\n    const { arr, tgt } = inputs\r\n    setIsRunning(true)\r\n    setStatus(\"Searching...\")\r\n    setHighlightedIndex(-1)\r\n\r\n    const n = arr.length\r\n    if (n === 0) {\r\n      setStatus(\"Array is empty.\")\r\n      setIsRunning(false)\r\n      return\r\n    }\r\n\r\n    const step = Math.floor(Math.sqrt(n))\r\n    let prev = 0\r\n    let curr = 0\r\n    const searchSteps = []\r\n\r\n    // Jump in blocks\r\n    while (curr < n && arr[curr] < tgt) {\r\n      searchSteps.push(curr)\r\n      prev = curr\r\n      curr += step\r\n    }\r\n\r\n    // Linear search in block\r\n    const end = Math.min(curr, n)\r\n    for (let i = prev; i < end; i++) {\r\n      searchSteps.push(i)\r\n    }\r\n\r\n    let index = 0\r\n\r\n    const timer = setInterval(() => {\r\n      if (index >= searchSteps.length) {\r\n        clearInterval(timer)\r\n        if (arr[highlightedIndex] === tgt) {\r\n          setStatus(`Found ${tgt} at index ${highlightedIndex}`)\r\n        } else {\r\n          setStatus(`${tgt} not found`)\r\n        }\r\n        setIsRunning(false)\r\n        return\r\n      }\r\n      setHighlightedIndex(searchSteps[index])\r\n      index++\r\n    }, stepDelay)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <label>\r\n          Sorted Array (comma separated):{\" \"}\r\n          <input\r\n            type=\"text\"\r\n            value={arrayInput}\r\n            onChange={(e) => setArrayInput(e.target.value)}\r\n            disabled={isRunning}\r\n            style={{ width: \"300px\" }}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <label>\r\n          Target Number:{\" \"}\r\n          <input\r\n            type=\"text\"\r\n            value={targetInput}\r\n            onChange={(e) => setTargetInput(e.target.value)}\r\n            disabled={isRunning}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <button onClick={startSearch} disabled={isRunning}>\r\n        Start Jump Search\r\n      </button>\r\n\r\n      <div className={styles.arrayContainer}>\r\n        {array.map((num, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`${styles.arrayElement} ${\r\n              idx === highlightedIndex ? styles.highlight : \"\"\r\n            }`}\r\n          >\r\n            {num}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"15px\", fontWeight: \"bold\" }}>{status}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JumpSearch\r\n"],"names":["JumpSearch","arrayInput","setArrayInput","useState","targetInput","setTargetInput","array","setArray","setTarget","highlightedIndex","setHighlightedIndex","status","setStatus","isRunning","setIsRunning","_jsxs","children","_jsx","style","marginBottom","type","value","onChange","e","target","disabled","width","onClick","startSearch","inputs","parseInputs","arr","split","map","num","trim","filter","Number","some","isNaN","i","length","tgt","n","step","Math","floor","sqrt","prev","curr","searchSteps","push","end","min","index","timer","setInterval","clearInterval","className","styles","idx","marginTop","fontWeight"],"sourceRoot":""}