{"version":3,"file":"static/js/9089.d7c27c7a.chunk.js","mappings":"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","sources":["routing/site/algo/components/Primality/Input.jsx","routing/site/algo/components/Primality/index.jsx","../node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js","../node_modules/@material-ui/core/esm/TextField/TextField.js"],"sourcesContent":["import React, { useState } from \"react\"\r\nimport { makeStyles, fade } from \"@material-ui/core/styles\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardActions from \"@material-ui/core/CardActions\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport { FormControl } from \"@material-ui/core\"\r\n\r\n//Card component styling\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 180,\r\n  },\r\n})\r\n\r\n//text input field styling\r\nconst useStylesReddit = makeStyles((theme) => ({\r\n  root: {\r\n    border: \"1px solid #e2e2e1\",\r\n    overflow: \"hidden\",\r\n    borderRadius: 4,\r\n    backgroundColor: \"#fcfcfb\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    \"&:hover\": {\r\n      backgroundColor: \"#fff\",\r\n    },\r\n    \"&$focused\": {\r\n      backgroundColor: \"#fff\",\r\n      boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}))\r\nfunction RedditTextField(props) {\r\n  const classes = useStylesReddit()\r\n\r\n  return (\r\n    <TextField InputProps={{ classes, disableUnderline: true }} {...props} />\r\n  )\r\n}\r\n\r\nconst styleforform = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst stylefortext = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst styleforbutton = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nconst Input = React.memo(({ checkPrime }) => {\r\n  const [input, setInput] = useState(null)\r\n  const classes = useStyles()\r\n  const inputstyle = stylefortext()\r\n  const buttonstyle = styleforbutton()\r\n  const formstyle = styleforform()\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n      <h2 className=\"bg-success text-white p-2\">\r\n        Check whether input number is prime or composite\r\n      </h2>\r\n      <h4 className=\"text-primary p-2\">\r\n        A prime number is only divisible by 1 and itself and has no other\r\n        factors\r\n      </h4>\r\n      <CardActions>\r\n        <FormControl className={`pb-3 pr-0 pl-2 pt-1 ${formstyle.root}`}>\r\n          <RedditTextField\r\n            label=\"Number\"\r\n            className={inputstyle.root}\r\n            variant=\"filled\"\r\n            id=\"reddit-input-base\"\r\n            onChange={(event) => {\r\n              setInput(event.target.value)\r\n            }}\r\n            value={input ? input : \"\"}\r\n          />\r\n          <Button\r\n            className={buttonstyle.root}\r\n            onClick={() => {\r\n              checkPrime(parseInt(input))\r\n              setInput(null)\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </FormControl>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n})\r\n\r\nInput.displayName = \"Primality.Input\"\r\n\r\nexport default Input\r\n","import React, { useCallback, useState } from \"react\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { Alert } from \"reactstrap\"\r\nimport Input from \"./Input\"\r\n\r\nconst Primality = () => {\r\n  const [alert, setAlert] = useState(null)\r\n  const [testFactor, setTestFactor] = useState(null)\r\n\r\n  const checkPrime = useCallback((number) => {\r\n    setAlert(null)\r\n    if (number > 1000000 || number < 0) {\r\n      setAlert({\r\n        text: \"Number is not supported yet. Enter in range 0 to 1000000\",\r\n        type: \"danger\",\r\n      })\r\n      return\r\n    }\r\n\r\n    if (number <= 1) {\r\n      setAlert({\r\n        text: `${number} is not a valid prime`,\r\n        type: \"danger\",\r\n      })\r\n      return\r\n    }\r\n\r\n    if (number <= 3) {\r\n      setAlert({\r\n        text: `${number} is a valid prime`,\r\n        type: \"success\",\r\n      })\r\n      return\r\n    }\r\n\r\n    if (number % 2 === 0) {\r\n      setAlert({\r\n        text: `${number} is composite since it is divisible by 2`,\r\n        type: \"success\",\r\n      })\r\n      return\r\n    }\r\n\r\n    if (number % 3 === 0) {\r\n      setAlert({\r\n        text: `${number} is composite since it is divisible by 3`,\r\n        type: \"success\",\r\n      })\r\n      return\r\n    }\r\n\r\n    let delay = 1000\r\n\r\n    for (let factor = 5; factor * factor <= number; factor += 6) {\r\n      delay = delay + 100\r\n\r\n      if (number % factor === 0) {\r\n        setAlert({\r\n          text: `${number} is composite and has a factor ${factor}`,\r\n          type: \"success\",\r\n        })\r\n        setTimeout(() => {\r\n          setTestFactor(null)\r\n        }, delay)\r\n        return\r\n      } else if (number % (factor + 2) === 0) {\r\n        setAlert({\r\n          text: `${number} is composite and has a factor ${factor + 2}`,\r\n          type: \"success\",\r\n        })\r\n        setTimeout(() => {\r\n          setTestFactor(null)\r\n        }, delay)\r\n        return\r\n      } else {\r\n        setTimeout(() => {\r\n          setTestFactor(factor)\r\n        }, delay)\r\n      }\r\n    }\r\n    delay = delay + 1000\r\n    setTimeout(() => {\r\n      setTestFactor(null)\r\n      setAlert({\r\n        text: `${number} is a valid prime`,\r\n        type: \"success\",\r\n      })\r\n    }, delay)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Grid container className=\"text-center\">\r\n        <Grid item xs={12}>\r\n          <Input checkPrime={checkPrime} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {testFactor !== null && (\r\n            <Alert color={\"info\"}>\r\n              {`Number is not divisible by ${testFactor} or ${\r\n                testFactor + 2\r\n              }. Testing further ....`}\r\n            </Alert>\r\n          )}\r\n          {alert && (\r\n            <Alert\r\n              color={alert.type}\r\n              isOpen={!!alert.text}\r\n              toggle={() => setAlert(null)}\r\n            >\r\n              {alert.text}\r\n            </Alert>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Primality\r\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 3,\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      marginLeft: 14,\n      marginRight: 14\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), children === ' ' ?\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : children);\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = /*#__PURE__*/React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    if (label) {\n      var _InputLabelProps$requ;\n\n      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;\n      InputMore.label = /*#__PURE__*/React.createElement(React.Fragment, null, label, displayRequired && \"\\xA0*\");\n    }\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = /*#__PURE__*/React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && /*#__PURE__*/React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? /*#__PURE__*/React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);"],"names":["useStyles","makeStyles","root","minWidth","useStylesReddit","theme","border","overflow","borderRadius","backgroundColor","transition","transitions","create","boxShadow","fade","palette","primary","main","borderColor","focused","RedditTextField","props","classes","_jsx","TextField","InputProps","disableUnderline","styleforform","width","margin","spacing","stylefortext","styleforbutton","Input","React","_ref","checkPrime","input","setInput","useState","inputstyle","buttonstyle","formstyle","_jsxs","Card","className","variant","children","CardActions","FormControl","label","id","onChange","event","target","value","Button","onClick","parseInt","color","size","displayName","Primality","alert","setAlert","testFactor","setTestFactor","useCallback","number","text","type","delay","factor","setTimeout","_Fragment","Grid","container","item","xs","Alert","isOpen","toggle","FormHelperText","ref","_props$component","component","Component","other","disabled","error","filled","required","_objectWithoutProperties","muiFormControl","useFormControl","fcs","formControlState","states","_extends","clsx","contained","marginDense","dangerouslySetInnerHTML","__html","withStyles","secondary","typography","caption","textAlign","marginTop","marginLeft","marginRight","name","variantComponent","standard","FilledInput","outlined","OutlinedInput","autoComplete","_props$autoFocus","autoFocus","_props$color","defaultValue","_props$disabled","_props$error","FormHelperTextProps","_props$fullWidth","fullWidth","helperText","hiddenLabel","InputLabelProps","inputProps","inputRef","_props$multiline","multiline","onBlur","onFocus","placeholder","_props$required","rows","rowsMax","_props$select","select","SelectProps","_props$variant","InputMore","shrink","notched","_InputLabelProps$requ","displayRequired","native","undefined","helperTextId","concat","inputLabelId","InputComponent","InputElement","InputLabel","htmlFor","Select","labelId"],"sourceRoot":""}