{"version":3,"file":"static/js/3521.5bbad0e0.chunk.js","mappings":"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","sources":["webpack://AlgoLens/./src/routing/site/algo/components/DijkstraGraph/DijkstraGraph.module.css?4098","routing/site/algo/components/DijkstraGraph/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"DijkstraGraph_title__-tA6W\",\"legend\":\"DijkstraGraph_legend__qyVDw\",\"legendItem\":\"DijkstraGraph_legendItem__4yEhp\",\"legendBox\":\"DijkstraGraph_legendBox__RE3Q0\",\"legendVisited\":\"DijkstraGraph_legendVisited__p6kSg\",\"legendCurrent\":\"DijkstraGraph_legendCurrent__WSCTb\",\"legendEdge\":\"DijkstraGraph_legendEdge__JURqo\",\"stepCounter\":\"DijkstraGraph_stepCounter__CU2WC\",\"graphContainer\":\"DijkstraGraph_graphContainer__kqnIL\",\"node\":\"DijkstraGraph_node__bnt7B\",\"nodeLabel\":\"DijkstraGraph_nodeLabel__PR6B3\",\"visited\":\"DijkstraGraph_visited__8tYNw\",\"current\":\"DijkstraGraph_current__fKeRL\",\"edgeWeight\":\"DijkstraGraph_edgeWeight__D2819\"};","import React, { useEffect, useState } from \"react\"\nimport styles from \"./DijkstraGraph.module.css\"\n\nconst Dijkstra = () => {\n  const nodes = [\n    { id: 0, x: 100, y: 100 },\n    { id: 1, x: 300, y: 100 },\n    { id: 2, x: 500, y: 100 },\n    { id: 3, x: 700, y: 100 },\n    { id: 4, x: 200, y: 250 },\n    { id: 5, x: 400, y: 250 },\n    { id: 6, x: 600, y: 250 },\n    { id: 7, x: 800, y: 250 },\n    { id: 8, x: 300, y: 400 },\n    { id: 9, x: 600, y: 400 },\n  ]\n\n  const edges = [\n    { from: 0, to: 1, weight: 4 },\n    { from: 0, to: 4, weight: 2 },\n    { from: 1, to: 2, weight: 3 },\n    { from: 1, to: 5, weight: 2 },\n    { from: 2, to: 3, weight: 1 },\n    { from: 2, to: 6, weight: 5 },\n    { from: 4, to: 5, weight: 3 },\n    { from: 5, to: 6, weight: 1 },\n    { from: 5, to: 8, weight: 4 },\n    { from: 6, to: 9, weight: 2 },\n  ]\n\n  const [visited, setVisited] = useState([])\n  const [current, setCurrent] = useState(null)\n  const [distances, setDistances] = useState({})\n  const [step, setStep] = useState(0)\n\n  useEffect(() => {\n    const runDijkstra = async () => {\n      const dist = {}\n      nodes.forEach((n) => (dist[n.id] = Infinity))\n      dist[0] = 0\n\n      const pq = [{ id: 0, dist: 0 }]\n      const visitedOrder = []\n\n      while (pq.length) {\n        pq.sort((a, b) => a.dist - b.dist)\n        const { id } = pq.shift()\n\n        if (visitedOrder.includes(id)) continue\n        visitedOrder.push(id)\n\n        setCurrent(id)\n        setVisited([...visitedOrder])\n        setDistances({ ...dist })\n        setStep((s) => s + 1)\n\n        await new Promise((res) => setTimeout(res, 1200))\n\n        edges.forEach(({ from, to, weight }) => {\n          if (from === id && dist[to] > dist[id] + weight) {\n            dist[to] = dist[id] + weight\n            pq.push({ id: to, dist: dist[to] })\n          }\n          if (to === id && dist[from] > dist[id] + weight) {\n            dist[from] = dist[id] + weight\n            pq.push({ id: from, dist: dist[from] })\n          }\n        })\n      }\n      setCurrent(null)\n    }\n\n    runDijkstra()\n  }, [])\n\n  return (\n    <div>\n      <div className={styles.title}>Dijkstraâ€™s Algorithm ðŸš¦</div>\n\n      {/* Legend */}\n      <div className={styles.legend}>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendVisited}`} />\n          <span>Visited</span>\n        </div>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendCurrent}`} />\n          <span>Current</span>\n        </div>\n        <div className={styles.legendItem}>\n          <div className={`${styles.legendBox} ${styles.legendEdge}`} />\n          <span>Active Edge</span>\n        </div>\n      </div>\n\n      {/* Step Counter */}\n      <div className={styles.stepCounter}>Step {step}</div>\n\n      <div className={styles.graphContainer}>\n        <svg width=\"900\" height=\"500\">\n          {edges.map((edge, i) => (\n            <line\n              key={i}\n              x1={nodes[edge.from].x}\n              y1={nodes[edge.from].y}\n              x2={nodes[edge.to].x}\n              y2={nodes[edge.to].y}\n              stroke=\"#ccc\"\n              strokeWidth=\"2\"\n            />\n          ))}\n          {edges.map((edge, i) => (\n            <text\n              key={`w-${i}`}\n              x={(nodes[edge.from].x + nodes[edge.to].x) / 2}\n              y={(nodes[edge.from].y + nodes[edge.to].y) / 2 - 5}\n              className={styles.edgeWeight}\n            >\n              {edge.weight}\n            </text>\n          ))}\n          {nodes.map((node) => (\n            <g key={node.id}>\n              <circle\n                cx={node.x}\n                cy={node.y}\n                r=\"22\"\n                className={`${styles.node} \n                  ${visited.includes(node.id) ? styles.visited : \"\"} \n                  ${current === node.id ? styles.current : \"\"}`}\n              />\n              <text\n                x={node.x}\n                y={node.y + 5}\n                textAnchor=\"middle\"\n                className={styles.nodeLabel}\n              >\n                {node.id} (\n                {distances[node.id] === Infinity ? \"âˆž\" : distances[node.id]})\n              </text>\n            </g>\n          ))}\n        </svg>\n      </div>\n    </div>\n  )\n}\n\nexport default Dijkstra\n"],"names":["Dijkstra","nodes","id","x","y","edges","from","to","weight","visited","setVisited","useState","current","setCurrent","distances","setDistances","step","setStep","useEffect","async","dist","forEach","n","Infinity","pq","visitedOrder","length","sort","a","b","shift","includes","push","_objectSpread","s","Promise","res","setTimeout","_ref","runDijkstra","_jsxs","children","_jsx","className","styles","concat","width","height","map","edge","i","x1","y1","x2","y2","stroke","strokeWidth","node","cx","cy","r","textAnchor"],"sourceRoot":""}