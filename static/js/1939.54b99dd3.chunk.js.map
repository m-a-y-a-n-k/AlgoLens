{"version":3,"file":"static/js/1939.54b99dd3.chunk.js","mappings":"gJACA,QAA4B,yBAA5B,EAA6D,qBAA7D,EAAgG,2BAAhG,EAAqI,uBAArI,EAAwK,yBAAxK,EAAwM,oBAAxM,EAAyO,0BAAzO,EAAmR,6BAAnR,EAA6T,0BAA7T,EAA+V,qBAA/V,EAAiY,0BAAjY,EAA0a,4BAA1a,EAAqd,4BAArd,EAAigB,6BAAjgB,EAAmlB,6BAAnlB,EAA0nB,uBAA1nB,EAA2pB,uBAA3pB,EAAyrB,oBAAzrB,EAAytB,yBAAztB,EAA4vB,uBAA5vB,EAAiyB,2BAAjyB,EAAq2B,yBAAr2B,EAA+4B,8BAA/4B,EAA47B,4BAA57B,EAAy+B,8BAAz+B,EAAwhC,8BAAxhC,EAAmkC,0BAAnkC,EAA2mC,2BAA3mC,EAA6oC,oB,aCE7oC,MAAMA,EACJC,cAA4B,IAAhBC,IAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAChBG,KAAKC,KAAO,GACZD,KAAKE,SAAW,GAChBF,KAAKJ,OAASA,CAChB,EAGF,MAAMO,EACJR,cAAwB,IAAZS,EAAKP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClBG,KAAKK,KAAO,IAAIX,GAAU,GAC1BM,KAAKI,MAAQA,EACbJ,KAAKM,QAAUC,KAAKC,KAAKJ,EAAQ,GAAK,EACtCJ,KAAKS,QAAUL,EAAQ,CACzB,CAEAM,OAAOC,EAAMC,GACX,IAAIC,EAAI,EACR,KAAOA,EAAIF,EAAKV,KAAKH,QAAUc,EAAMD,EAAKV,KAAKY,IAC7CA,IAGF,OAAIA,EAAIF,EAAKV,KAAKH,QAAUc,IAAQD,EAAKV,KAAKY,KAI1CF,EAAKf,QAIFI,KAAKU,OAAOC,EAAKT,SAASW,GAAID,EACvC,CAEAE,OAAOF,GAGL,GAFaZ,KAAKK,KAETJ,KAAKH,SAAWE,KAAKS,QAAS,CAErC,MAAMM,EAAU,IAAIrB,GAAU,GAC9BqB,EAAQb,SAASc,KAAKhB,KAAKK,MAC3BL,KAAKiB,WAAWF,EAAS,GACzBf,KAAKK,KAAOU,CACd,CAEAf,KAAKkB,cAAclB,KAAKK,KAAMO,EAChC,CAEAM,cAAcP,EAAMC,GAClB,IAAIC,EAAIF,EAAKV,KAAKH,OAAS,EAE3B,GAAIa,EAAKf,OAEPe,EAAKV,KAAKe,KAAKJ,GACfD,EAAKV,KAAKkB,MAAK,CAACC,EAAGC,IAAMD,EAAIC,QACxB,CAEL,KAAOR,GAAK,GAAKD,EAAMD,EAAKV,KAAKY,IAC/BA,IAEFA,IAEIF,EAAKT,SAASW,GAAGZ,KAAKH,SAAWE,KAAKS,UAExCT,KAAKiB,WAAWN,EAAME,GAElBD,EAAMD,EAAKV,KAAKY,IAClBA,KAIJb,KAAKkB,cAAcP,EAAKT,SAASW,GAAID,EACvC,CACF,CAEAK,WAAWK,EAAQC,GACjB,MAAMC,EAAYF,EAAOpB,SAASqB,GAC5BE,EAAW,IAAI/B,EAAU8B,EAAU5B,QAEnC8B,EAAWnB,KAAKoB,MAAM3B,KAAKS,QAAU,GACrCmB,EAASJ,EAAUvB,KAAKyB,GAG9BD,EAASxB,KAAOuB,EAAUvB,KAAK4B,OAAOH,EAAW,GACjDF,EAAUvB,KAAK6B,MAGVN,EAAU5B,SACb6B,EAASvB,SAAWsB,EAAUtB,SAAS2B,OAAOH,EAAW,IAI3DJ,EAAOrB,KAAK4B,OAAON,EAAO,EAAGK,GAC7BN,EAAOpB,SAAS2B,OAAON,EAAQ,EAAG,EAAGE,EACvC,CAEAM,YAA6B,IAAnBpB,EAAId,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,KAAKK,KACpB,OAAIM,EAAKf,OAAe,EACjB,EAAII,KAAK+B,UAAUpB,EAAKT,SAAS,GAC1C,CAEA8B,QACE,MAAMC,EAAU,IAAI9B,EAAMH,KAAKI,OAE/B,OADA6B,EAAQ5B,KAAOL,KAAKkC,UAAUlC,KAAKK,MAC5B4B,CACT,CAEAC,UAAUvB,GACR,IAAKA,EAAM,OAAO,KAClB,MAAMwB,EAAU,IAAIzC,EAAUiB,EAAKf,QAGnC,OAFAuC,EAAQlC,KAAO,IAAIU,EAAKV,MACxBkC,EAAQjC,SAAWS,EAAKT,SAASkC,KAAKC,GAAUrC,KAAKkC,UAAUG,KACxDF,CACT,EAGF,MAiWA,EAjWwBG,KACtB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAAItC,EAAM,KACpCC,EAAOsC,IAAYD,EAAAA,EAAAA,UAAS,IAC5BE,EAAYC,IAAiBH,EAAAA,EAAAA,UAAS,KACtCI,EAAaC,IAAkBL,EAAAA,EAAAA,UAAS,KACxCM,EAAkBC,IAAuBP,EAAAA,EAAAA,UAAS,KAClDQ,EAAeC,IAAoBT,EAAAA,EAAAA,UAAS,IAa7CU,EAAeA,KACnB,MAAMC,EAAQC,SAASV,EAAY,IACnC,GAAIW,MAAMF,GAER,YADAG,MAAM,+BAIR,MAAMtB,EAAUM,EAAKP,QACrBC,EAAQnB,OAAOsC,GACfZ,EAAQP,GACRW,EAAc,IACdM,EAAiB,YAADM,OAAaJ,IAC7BJ,EAAoB,CAACI,IAErBK,YAAW,IAAMT,EAAoB,KAAK,IAAK,EAG3CU,EAAeA,KACnB,MAAMN,EAAQC,SAASR,EAAa,IACpC,GAAIS,MAAMF,GAER,YADAG,MAAM,+BAIR,MAAMI,EAAQpB,EAAK7B,OAAO6B,EAAKlC,KAAM+C,GACrCN,EAAe,IACfI,EAAiB,cAADM,OACAJ,EAAK,MAAAI,OAAKG,EAAQ,eAAY,qBAG1CA,IACFX,EAAoB,CAACI,IACrBK,YAAW,IAAMT,EAAoB,KAAK,KAC5C,EAYIY,EAAaA,CAACjD,EAAMkD,EAAGC,EAAGC,EAAOC,KACrC,IAAKrD,EAAM,MAAO,GAElB,MAAMsD,EAAW,GAGXC,EAAY3D,KAAK4D,IADN,GACUxD,EAAKV,KAAKH,OAAoB,GAAI,IAmD7D,GA/CAmE,EAASjD,MACPoD,EAAAA,EAAAA,KAAA,QAEEP,EAAGA,EAAIK,EAAY,EACnBJ,EAAGA,EACHC,MAAOG,EACPG,OAZe,GAafC,UAAWC,GAAe,OAAAf,OALdK,EAAC,KAAAL,OAAIM,KAUrBnD,EAAKV,KAAKuE,SAAQ,CAAC5D,EAAKC,KACtB,MAAM4D,EAAOZ,EAAIK,EAAY,EAlBd,IAkBmBrD,EAAI,IAAkB,EAClD6D,EAAgB3B,EAAiB4B,SAAS/D,GAG5CC,EAAI,GACNoD,EAASjD,MACPoD,EAAAA,EAAAA,KAAA,QAEEQ,GAAIf,EAAIK,EAAY,EA1BX,GA0BerD,EAAe,EACvCgE,GAAIf,EACJgB,GAAIjB,EAAIK,EAAY,EA5BX,GA4BerD,EAAe,EACvCkE,GAAIjB,EA9BO,GA+BXQ,UAAWC,GAAiB,OAAAf,OALhBK,EAAC,KAAAL,OAAIM,EAAC,KAAAN,OAAI3C,KAW5BoD,EAASjD,MACPoD,EAAAA,EAAAA,KAAA,QAEEP,EAAGY,EACHX,EAAGA,EAAIkB,GAAiB,EACxBC,WAAW,SACXX,UAAS,GAAAd,OAAKe,EAAc,KAAAf,OAC1BkB,EAAgBH,EAAqB,IACpCrE,SAEFU,GAAG,OAAA4C,OARQK,EAAC,KAAAL,OAAIM,EAAC,KAAAN,OAAI3C,IAUzB,KAIEF,EAAKf,QAAUe,EAAKT,SAASJ,OAAS,EAAG,CAC5C,MAAMoF,EAAanB,EAAQpD,EAAKT,SAASJ,OACzCa,EAAKT,SAASsE,SAAQ,CAACnC,EAAOxB,KAC5B,MAAMsE,EAAStB,EAAIE,EAAQ,GAAKlD,EAAI,IAAOqE,EAGrCE,EACJvB,EAAIK,EAAY,GAAMrD,EAAI,IAAOqD,EAAavD,EAAKT,SAASJ,OAE9DmE,EAASjD,MACPoD,EAAAA,EAAAA,KAAA,QAEEQ,GAAIQ,EACJP,GAAIf,EAlEO,GAmEXgB,GAAIK,EACJJ,GAAIjB,EAjEY,IAkEhBQ,UAAWC,GAAY,QAAAf,OALVK,EAAC,KAAAL,OAAIM,EAAC,KAAAN,OAAI3C,KAU3BoD,EAASjD,QACJ4C,EACDvB,EACA8C,EACArB,EA3EgB,IA4EhBoB,EACAlB,EAAQ,GAEX,GAEL,CAiBA,OAdIrD,EAAKf,QACPqE,EAASjD,MACPoD,EAAAA,EAAAA,KAAA,QAEEP,EAAGA,EACHC,EAAGA,EA5FU,GA4FO,GACpBmB,WAAW,SACXX,UAAWC,EAAiBrE,SAC7B,QAED,QAAAsD,OAPeK,EAAC,KAAAL,OAAIM,KAWjBG,CAAQ,EAGXoB,EAAa9C,EAAKR,YAClBuD,EAAY/E,KAAK4D,IAAI,IAAkB,IAAbkB,EAAmB,KAEnD,OACEE,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAiBrE,SAAA,EAC/BkE,EAAAA,EAAAA,KAAA,MAAIE,UAAWC,EAAarE,SAAC,uCAG7BkE,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAmBrE,UACjCkE,EAAAA,EAAAA,KAAA,KAAAlE,SAAG,uMAQLqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAerE,SAAA,EAC7BkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,uBACJqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAiBrE,SAAA,EAC/BkE,EAAAA,EAAAA,KAAA,SAAAlE,SAAO,gBACPkE,EAAAA,EAAAA,KAAA,SACEoB,KAAK,SACLpC,MAAOhD,EACPqF,SAAWC,GAAMhD,EAASgD,EAAEC,OAAOvC,OACnCkB,UAAWC,EACXqB,IAAI,IACJzB,IAAI,OAENC,EAAAA,EAAAA,KAAA,UAAQyB,QAjMSC,KACvB,MAAMC,EAAW1C,SAASjD,EAAO,IAC7BkD,MAAMyC,IAAaA,EAAW,GAAKA,EAAW,EAChDxC,MAAM,uCAGRf,EAAQ,IAAIrC,EAAM4F,IAClB7C,EAAiB,+BAADM,OAAgCuC,IAChD/C,EAAoB,IAAG,EAyLkBsB,UAAWC,EAAkBrE,SAAC,gBAGjEkE,EAAAA,EAAAA,KAAA,UAAQyB,QArJUG,KACxB,MAAM/D,EAAU,IAAI9B,EAAM,GACX,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7CqE,SAASyB,GAAQhE,EAAQnB,OAAOmF,KACvCzD,EAAQP,GACRiB,EAAiB,yBACjBF,EAAoB,GAAG,EA+ImBsB,UAAWC,EAAoBrE,SAAC,kBAGpEqF,EAAAA,EAAAA,MAAA,QAAMjB,UAAWC,EAAYrE,SAAA,CAAC,kBACZqC,EAAKnC,MAAM,yBAAuBmC,EAAK9B,QAAQ,gBACpD8B,EAAKjC,kBAMtBiF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAkBrE,SAAA,EAChCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAqBrE,SAAA,EACnCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,gBACJqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAkBrE,SAAA,EAChCkE,EAAAA,EAAAA,KAAA,SACEoB,KAAK,SACLpC,MAAOT,EACP8C,SAAWC,GAAM9C,EAAc8C,EAAEC,OAAOvC,OACxC8C,YAAY,cACZ5B,UAAWC,EACX4B,WAAaT,GAAgB,UAAVA,EAAE9E,KAAmBuC,OAE1CiB,EAAAA,EAAAA,KAAA,UAAQyB,QAAS1C,EAAcmB,UAAWC,EAAoBrE,SAAC,kBAMnEqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAqBrE,SAAA,EACnCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,gBACJqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAkBrE,SAAA,EAChCkE,EAAAA,EAAAA,KAAA,SACEoB,KAAK,SACLpC,MAAOP,EACP4C,SAAWC,GAAM5C,EAAe4C,EAAEC,OAAOvC,OACzC8C,YAAY,cACZ5B,UAAWC,EACX4B,WAAaT,GAAgB,UAAVA,EAAE9E,KAAmB8C,OAE1CU,EAAAA,EAAAA,KAAA,UAAQyB,QAASnC,EAAcY,UAAWC,EAAoBrE,SAAC,oBAQpE+C,IACCmB,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAqBrE,SAAE+C,KAIzCsC,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAerE,SAAA,EAC7BqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,CAAI,2BAAyBmF,EAAW,QACxCjB,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAqBrE,UACnCkE,EAAAA,EAAAA,KAAA,OAAKL,MAAM,OAAOM,OAAQiB,EAAWhB,UAAWC,EAAerE,SAC5D0D,EAAWrB,EAAKlC,KAAM,IAAK,GAAI,IAAK,WAM3CkF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAerE,SAAA,EAC7BkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,uBACJqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAsBrE,SAAA,EACpCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAoBrE,SAAA,EAClCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,cACJkE,EAAAA,EAAAA,KAAA,KAAAlE,SAAG,6CAELqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAoBrE,SAAA,EAClCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,eACJkE,EAAAA,EAAAA,KAAA,KAAAlE,SAAG,sDAELqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAoBrE,SAAA,EAClCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,iBACJkE,EAAAA,EAAAA,KAAA,KAAAlE,SAAG,iDAELqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAoBrE,SAAA,EAClCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,mBACJqF,EAAAA,EAAAA,MAAA,KAAArF,SAAA,CAAG,QACKqC,EAAKjC,QAAQ,eAAaiC,EAAK9B,QAAQ,eAGjD8E,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAoBrE,SAAA,EAClCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,mBACJkE,EAAAA,EAAAA,KAAA,KAAAlE,SAAG,0CAELqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAoBrE,SAAA,EAClCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,oBACJkE,EAAAA,EAAAA,KAAA,KAAAlE,SAAG,oDAMTqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAerE,SAAA,EAC7BkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,qBACJqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAsBrE,SAAA,EACpCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAsBrE,SAAA,EACpCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,YACJkE,EAAAA,EAAAA,KAAA,KAAGE,UAAWC,EAAkBrE,SAAC,iBAEnCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAsBrE,SAAA,EACpCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,YACJkE,EAAAA,EAAAA,KAAA,KAAGE,UAAWC,EAAkBrE,SAAC,iBAEnCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAsBrE,SAAA,EACpCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,YACJkE,EAAAA,EAAAA,KAAA,KAAGE,UAAWC,EAAkBrE,SAAC,iBAEnCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAsBrE,SAAA,EACpCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,WACJkE,EAAAA,EAAAA,KAAA,KAAGE,UAAWC,EAAkBrE,SAAC,mBAMvCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAmBrE,SAAA,EACjCkE,EAAAA,EAAAA,KAAA,MAAAlE,SAAI,8BACJqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,EACEqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,EACEkE,EAAAA,EAAAA,KAAA,UAAAlE,SAAQ,uBAA2B,0DAGrCqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,EACEkE,EAAAA,EAAAA,KAAA,UAAAlE,SAAQ,kBAAsB,0DAGhCqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,EACEkE,EAAAA,EAAAA,KAAA,UAAAlE,SAAQ,oBAAwB,qDAGlCqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,EACEkE,EAAAA,EAAAA,KAAA,UAAAlE,SAAQ,mBAAuB,iDAInCqF,EAAAA,EAAAA,MAAA,OAAKjB,UAAWC,EAAYrE,SAAA,EAC1BkE,EAAAA,EAAAA,KAAA,UAAAlE,SAAQ,iBAAqB,8LAK7B,C","sources":["webpack://AlgoLens/./src/routing/site/ds/components/BTree/BTree.module.css?3cda","routing/site/ds/components/BTree/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"BTree_container__KORkJ\",\"title\":\"BTree_title__5qjVq\",\"description\":\"BTree_description__dukkn\",\"section\":\"BTree_section__MIdLU\",\"initGroup\":\"BTree_initGroup__IVs71\",\"info\":\"BTree_info__qAoi9\",\"operations\":\"BTree_operations__blunP\",\"operationCard\":\"BTree_operationCard__eSPY7\",\"inputGroup\":\"BTree_inputGroup__8eNAf\",\"input\":\"BTree_input__OMosh\",\"btnPrimary\":\"BTree_btnPrimary__-lM23\",\"btnSecondary\":\"BTree_btnSecondary__83Zz7\",\"btnOperation\":\"BTree_btnOperation__gxUNI\",\"lastOperation\":\"BTree_lastOperation__RB7Fq\",\"slideDown\":\"BTree_slideDown__+Fk7H\",\"treeContainer\":\"BTree_treeContainer__prGVl\",\"treeSvg\":\"BTree_treeSvg__bDiqM\",\"nodeBox\":\"BTree_nodeBox__8bSNy\",\"edge\":\"BTree_edge__R9C6u\",\"separator\":\"BTree_separator__nnaHa\",\"keyText\":\"BTree_keyText__xRRo0\",\"highlighted\":\"BTree_highlighted__RYsnn\",\"pulse\":\"BTree_pulse__9FYG8\",\"leafLabel\":\"BTree_leafLabel__sisC3\",\"propertiesGrid\":\"BTree_propertiesGrid__T6GHQ\",\"propertyCard\":\"BTree_propertyCard__9+Ph4\",\"complexityGrid\":\"BTree_complexityGrid__j6uUO\",\"complexityCard\":\"BTree_complexityCard__9L0v8\",\"complexity\":\"BTree_complexity__ceUip\",\"explanation\":\"BTree_explanation__niUzS\",\"note\":\"BTree_note__GAaJo\"};","import React, { useState } from \"react\"\nimport styles from \"./BTree.module.css\"\n\nclass BTreeNode {\n  constructor(isLeaf = true) {\n    this.keys = []\n    this.children = []\n    this.isLeaf = isLeaf\n  }\n}\n\nclass BTree {\n  constructor(order = 3) {\n    this.root = new BTreeNode(true)\n    this.order = order // Maximum number of children\n    this.minKeys = Math.ceil(order / 2) - 1\n    this.maxKeys = order - 1\n  }\n\n  search(node, key) {\n    let i = 0\n    while (i < node.keys.length && key > node.keys[i]) {\n      i++\n    }\n\n    if (i < node.keys.length && key === node.keys[i]) {\n      return true\n    }\n\n    if (node.isLeaf) {\n      return false\n    }\n\n    return this.search(node.children[i], key)\n  }\n\n  insert(key) {\n    const root = this.root\n\n    if (root.keys.length === this.maxKeys) {\n      // Root is full, split it\n      const newRoot = new BTreeNode(false)\n      newRoot.children.push(this.root)\n      this.splitChild(newRoot, 0)\n      this.root = newRoot\n    }\n\n    this.insertNonFull(this.root, key)\n  }\n\n  insertNonFull(node, key) {\n    let i = node.keys.length - 1\n\n    if (node.isLeaf) {\n      // Insert key in sorted order\n      node.keys.push(key)\n      node.keys.sort((a, b) => a - b)\n    } else {\n      // Find child to insert\n      while (i >= 0 && key < node.keys[i]) {\n        i--\n      }\n      i++\n\n      if (node.children[i].keys.length === this.maxKeys) {\n        // Child is full, split it\n        this.splitChild(node, i)\n\n        if (key > node.keys[i]) {\n          i++\n        }\n      }\n\n      this.insertNonFull(node.children[i], key)\n    }\n  }\n\n  splitChild(parent, index) {\n    const fullChild = parent.children[index]\n    const newChild = new BTreeNode(fullChild.isLeaf)\n\n    const midIndex = Math.floor(this.maxKeys / 2)\n    const midKey = fullChild.keys[midIndex]\n\n    // Move keys to new child\n    newChild.keys = fullChild.keys.splice(midIndex + 1)\n    fullChild.keys.pop() // Remove middle key\n\n    // Move children if not leaf\n    if (!fullChild.isLeaf) {\n      newChild.children = fullChild.children.splice(midIndex + 1)\n    }\n\n    // Insert middle key into parent\n    parent.keys.splice(index, 0, midKey)\n    parent.children.splice(index + 1, 0, newChild)\n  }\n\n  getHeight(node = this.root) {\n    if (node.isLeaf) return 1\n    return 1 + this.getHeight(node.children[0])\n  }\n\n  clone() {\n    const newTree = new BTree(this.order)\n    newTree.root = this.cloneNode(this.root)\n    return newTree\n  }\n\n  cloneNode(node) {\n    if (!node) return null\n    const newNode = new BTreeNode(node.isLeaf)\n    newNode.keys = [...node.keys]\n    newNode.children = node.children.map((child) => this.cloneNode(child))\n    return newNode\n  }\n}\n\nconst BTreeVisualizer = () => {\n  const [tree, setTree] = useState(new BTree(4))\n  const [order, setOrder] = useState(4)\n  const [inputValue, setInputValue] = useState(\"\")\n  const [searchValue, setSearchValue] = useState(\"\")\n  const [highlightedNodes, setHighlightedNodes] = useState([])\n  const [lastOperation, setLastOperation] = useState(\"\")\n\n  const handleInitialize = () => {\n    const newOrder = parseInt(order, 10)\n    if (isNaN(newOrder) || newOrder < 3 || newOrder > 7) {\n      alert(\"Please enter order between 3 and 7\")\n      return\n    }\n    setTree(new BTree(newOrder))\n    setLastOperation(`Initialized B-Tree of order ${newOrder}`)\n    setHighlightedNodes([])\n  }\n\n  const handleInsert = () => {\n    const value = parseInt(inputValue, 10)\n    if (isNaN(value)) {\n      alert(\"Please enter a valid number\")\n      return\n    }\n\n    const newTree = tree.clone()\n    newTree.insert(value)\n    setTree(newTree)\n    setInputValue(\"\")\n    setLastOperation(`Inserted ${value}`)\n    setHighlightedNodes([value])\n\n    setTimeout(() => setHighlightedNodes([]), 2000)\n  }\n\n  const handleSearch = () => {\n    const value = parseInt(searchValue, 10)\n    if (isNaN(value)) {\n      alert(\"Please enter a valid number\")\n      return\n    }\n\n    const found = tree.search(tree.root, value)\n    setSearchValue(\"\")\n    setLastOperation(\n      `Search for ${value}: ${found ? \"Found ✓\" : \"Not Found ✗\"}`\n    )\n\n    if (found) {\n      setHighlightedNodes([value])\n      setTimeout(() => setHighlightedNodes([]), 2000)\n    }\n  }\n\n  const handleLoadExample = () => {\n    const newTree = new BTree(4)\n    const values = [10, 20, 30, 40, 50, 25, 35, 45, 15, 5]\n    values.forEach((val) => newTree.insert(val))\n    setTree(newTree)\n    setLastOperation(\"Loaded example B-Tree\")\n    setHighlightedNodes([])\n  }\n\n  const renderNode = (node, x, y, width, level) => {\n    if (!node) return []\n\n    const elements = []\n    const nodeHeight = 50\n    const keyWidth = 50\n    const nodeWidth = Math.max(node.keys.length * keyWidth + 10, 60)\n    const verticalSpacing = 100\n\n    // Draw node box\n    elements.push(\n      <rect\n        key={`box-${x}-${y}`}\n        x={x - nodeWidth / 2}\n        y={y}\n        width={nodeWidth}\n        height={nodeHeight}\n        className={styles.nodeBox}\n      />\n    )\n\n    // Draw keys\n    node.keys.forEach((key, i) => {\n      const keyX = x - nodeWidth / 2 + (i + 0.5) * keyWidth + 5\n      const isHighlighted = highlightedNodes.includes(key)\n\n      // Key separator\n      if (i > 0) {\n        elements.push(\n          <line\n            key={`sep-${x}-${y}-${i}`}\n            x1={x - nodeWidth / 2 + i * keyWidth + 5}\n            y1={y}\n            x2={x - nodeWidth / 2 + i * keyWidth + 5}\n            y2={y + nodeHeight}\n            className={styles.separator}\n          />\n        )\n      }\n\n      // Key text\n      elements.push(\n        <text\n          key={`key-${x}-${y}-${i}`}\n          x={keyX}\n          y={y + nodeHeight / 2 + 6}\n          textAnchor=\"middle\"\n          className={`${styles.keyText} ${\n            isHighlighted ? styles.highlighted : \"\"\n          }`}\n        >\n          {key}\n        </text>\n      )\n    })\n\n    // Draw children\n    if (!node.isLeaf && node.children.length > 0) {\n      const childWidth = width / node.children.length\n      node.children.forEach((child, i) => {\n        const childX = x - width / 2 + (i + 0.5) * childWidth\n\n        // Draw edge from parent to child\n        const parentConnectionX =\n          x - nodeWidth / 2 + ((i + 0.5) * nodeWidth) / node.children.length\n\n        elements.push(\n          <line\n            key={`edge-${x}-${y}-${i}`}\n            x1={parentConnectionX}\n            y1={y + nodeHeight}\n            x2={childX}\n            y2={y + verticalSpacing}\n            className={styles.edge}\n          />\n        )\n\n        // Recursively render child\n        elements.push(\n          ...renderNode(\n            child,\n            childX,\n            y + verticalSpacing,\n            childWidth,\n            level + 1\n          )\n        )\n      })\n    }\n\n    // Leaf indicator\n    if (node.isLeaf) {\n      elements.push(\n        <text\n          key={`leaf-${x}-${y}`}\n          x={x}\n          y={y + nodeHeight + 15}\n          textAnchor=\"middle\"\n          className={styles.leafLabel}\n        >\n          Leaf\n        </text>\n      )\n    }\n\n    return elements\n  }\n\n  const treeHeight = tree.getHeight()\n  const svgHeight = Math.max(400, treeHeight * 120 + 100)\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>B-Tree Visualization 🌲</h1>\n\n      {/* Description */}\n      <div className={styles.description}>\n        <p>\n          A B-Tree is a self-balancing tree data structure that maintains sorted\n          data and allows searches, insertions, and deletions in logarithmic\n          time. Used extensively in databases and file systems.\n        </p>\n      </div>\n\n      {/* Initialize */}\n      <div className={styles.section}>\n        <h3>Initialize B-Tree</h3>\n        <div className={styles.initGroup}>\n          <label>Order (m):</label>\n          <input\n            type=\"number\"\n            value={order}\n            onChange={(e) => setOrder(e.target.value)}\n            className={styles.input}\n            min=\"3\"\n            max=\"7\"\n          />\n          <button onClick={handleInitialize} className={styles.btnPrimary}>\n            Initialize\n          </button>\n          <button onClick={handleLoadExample} className={styles.btnSecondary}>\n            Load Example\n          </button>\n          <span className={styles.info}>\n            Current: Order {tree.order} | Max keys per node: {tree.maxKeys} |\n            Min keys: {tree.minKeys}\n          </span>\n        </div>\n      </div>\n\n      {/* Operations */}\n      <div className={styles.operations}>\n        <div className={styles.operationCard}>\n          <h4>Insert Key</h4>\n          <div className={styles.inputGroup}>\n            <input\n              type=\"number\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              placeholder=\"Enter value\"\n              className={styles.input}\n              onKeyPress={(e) => e.key === \"Enter\" && handleInsert()}\n            />\n            <button onClick={handleInsert} className={styles.btnOperation}>\n              Insert\n            </button>\n          </div>\n        </div>\n\n        <div className={styles.operationCard}>\n          <h4>Search Key</h4>\n          <div className={styles.inputGroup}>\n            <input\n              type=\"number\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Enter value\"\n              className={styles.input}\n              onKeyPress={(e) => e.key === \"Enter\" && handleSearch()}\n            />\n            <button onClick={handleSearch} className={styles.btnOperation}>\n              Search\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Last Operation */}\n      {lastOperation && (\n        <div className={styles.lastOperation}>{lastOperation}</div>\n      )}\n\n      {/* Tree Visualization */}\n      <div className={styles.section}>\n        <h3>Tree Structure (Height: {treeHeight})</h3>\n        <div className={styles.treeContainer}>\n          <svg width=\"1000\" height={svgHeight} className={styles.treeSvg}>\n            {renderNode(tree.root, 500, 50, 900, 0)}\n          </svg>\n        </div>\n      </div>\n\n      {/* Properties */}\n      <div className={styles.section}>\n        <h3>B-Tree Properties</h3>\n        <div className={styles.propertiesGrid}>\n          <div className={styles.propertyCard}>\n            <h4>Balanced</h4>\n            <p>All leaf nodes are at the same level</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Multi-way</h4>\n            <p>Each node can have multiple keys and children</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Sorted Keys</h4>\n            <p>Keys within nodes are in ascending order</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Node Capacity</h4>\n            <p>\n              Min: {tree.minKeys} keys, Max: {tree.maxKeys} keys\n            </p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Children Rule</h4>\n            <p>Node with k keys has k+1 children</p>\n          </div>\n          <div className={styles.propertyCard}>\n            <h4>Root Exception</h4>\n            <p>Root can have fewer than minimum keys</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Complexity */}\n      <div className={styles.section}>\n        <h3>Time Complexity</h3>\n        <div className={styles.complexityGrid}>\n          <div className={styles.complexityCard}>\n            <h4>Search</h4>\n            <p className={styles.complexity}>O(log n)</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Insert</h4>\n            <p className={styles.complexity}>O(log n)</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Delete</h4>\n            <p className={styles.complexity}>O(log n)</p>\n          </div>\n          <div className={styles.complexityCard}>\n            <h4>Space</h4>\n            <p className={styles.complexity}>O(n)</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Applications */}\n      <div className={styles.explanation}>\n        <h3>Real-World Applications:</h3>\n        <ul>\n          <li>\n            <strong>Database Indexing:</strong> Most relational databases use\n            B-Trees for indexing\n          </li>\n          <li>\n            <strong>File Systems:</strong> NTFS, ext4, HFS+ use B-Trees for file\n            organization\n          </li>\n          <li>\n            <strong>Large Datasets:</strong> Efficient for data that\n            doesn&apos;t fit in memory\n          </li>\n          <li>\n            <strong>Range Queries:</strong> Efficient for finding ranges of\n            values\n          </li>\n        </ul>\n        <div className={styles.note}>\n          <strong>Why B-Trees?</strong> Designed to work efficiently with block\n          storage (disk). Each node fits in a disk block, minimizing disk I/O\n          operations. The order is typically much higher (100+) in real systems.\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default BTreeVisualizer\n"],"names":["BTreeNode","constructor","isLeaf","arguments","length","undefined","this","keys","children","BTree","order","root","minKeys","Math","ceil","maxKeys","search","node","key","i","insert","newRoot","push","splitChild","insertNonFull","sort","a","b","parent","index","fullChild","newChild","midIndex","floor","midKey","splice","pop","getHeight","clone","newTree","cloneNode","newNode","map","child","BTreeVisualizer","tree","setTree","useState","setOrder","inputValue","setInputValue","searchValue","setSearchValue","highlightedNodes","setHighlightedNodes","lastOperation","setLastOperation","handleInsert","value","parseInt","isNaN","alert","concat","setTimeout","handleSearch","found","renderNode","x","y","width","level","elements","nodeWidth","max","_jsx","height","className","styles","forEach","keyX","isHighlighted","includes","x1","y1","x2","y2","nodeHeight","textAnchor","childWidth","childX","parentConnectionX","treeHeight","svgHeight","_jsxs","type","onChange","e","target","min","onClick","handleInitialize","newOrder","handleLoadExample","val","placeholder","onKeyPress"],"sourceRoot":""}