{"version":3,"file":"static/js/4534.53f9d42b.chunk.js","mappings":"mKAKA,MAGMA,EAAYC,EAAAA,GAAAA,GAAW;;;;;;;;;;;EAmBvBC,EAAQD,EAAAA,GAAAA,GAAW;;;;;;eAMVE,IAAA,IAAC,UAAEC,GAAWD,EAAA,MAZLC,IAAcC,EAAAA,EAAU;+BACjBD;iCACEA;iCACAA;EASCE,CAAeF,EAAU;MACrDG,IAAA,IAAC,OAAEC,GAAQD,EAAA,OAAKC,CAAM;EAGtBC,EAAOR,EAAAA,GAAAA,GAAW;;;;;EAqCxB,EA9BsBS,IAA6B,IAA5B,KAAEC,EAAI,aAAEC,GAAcF,EAC3C,MAAOG,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,GACzCX,EAAYQ,EACZJ,EAAU,EAAIQ,KAAKC,GAAMD,KAAKE,KA1Cd,GA0CqCP,GACrDQ,GAAaC,EAAAA,EAAAA,UAanB,OAVAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQC,KAAKC,MACbC,EAAUA,KACdX,GAAgBS,KAAKC,MAAQF,GAAS,KACtCH,EAAWO,QAAUC,sBAAsBF,EAAQ,EAGrD,OADAN,EAAWO,QAAUC,sBAAsBF,GACpC,IAAMG,qBAAqBT,EAAWO,QAAQ,GACpD,KAGDG,EAAAA,EAAAA,MAAC7B,EAAS,CAAA8B,SAAA,EACRC,EAAAA,EAAAA,KAAC7B,EAAK,CAACE,UAAWA,EAAWI,OAAQA,KACrCqB,EAAAA,EAAAA,MAACpB,EAAI,CAAAqB,SAAA,CAAC,iBAAejB,EAAYmB,QAAQ,GAAG,SAClC,EC7DVC,EAAkBhC,EAAAA,GAAAA,MAAc;;;;;;;;;;EAYhCiC,EAAejC,EAAAA,GAAAA,GAAW;;;;;;;EAS1BkC,EAAiBlC,EAAAA,GAAAA,GAAW;;;;;;;;;EAW5BmC,EAAQnC,EAAAA,GAAAA,KAAa;;;;;;;EASrBoC,EAAQpC,EAAAA,GAAAA,KAAa;;;;EA2C3B,EArCaqC,KACX,MAAO3B,EAAM4B,IAAWxB,EAAAA,EAAAA,UAAS,IAC1BH,EAAc4B,IAAmBzB,EAAAA,EAAAA,UAAS,KAgBjD,OACEc,EAAAA,EAAAA,MAACK,EAAY,CAAAJ,SAAA,EACXC,EAAAA,EAAAA,KAACE,EAAe,CAAAH,SAAC,4BACjBD,EAAAA,EAAAA,MAACM,EAAc,CAAAL,SAAA,EACbC,EAAAA,EAAAA,KAACM,EAAK,CAACI,QAAQ,OAAMX,SAAC,wBACtBC,EAAAA,EAAAA,KAACK,EAAK,CAACM,GAAG,OAAOC,KAAK,SAASC,MAAOjC,EAAMkC,SAnB9BC,IAClB,MAAMC,EAAcC,OAAOF,EAAEG,OAAOL,OAChCG,GAAe,GAAKA,GAAe,IACrCR,EAAQQ,EACV,KAgBIhB,EAAAA,EAAAA,KAACM,EAAK,CAACI,QAAQ,eAAcX,SAAC,kCAC9BC,EAAAA,EAAAA,KAACK,EAAK,CACJM,GAAG,eACHC,KAAK,SACLC,MAAOhC,EACPiC,SAlBoBC,IAC1B,MAAMI,EAAsBF,OAAOF,EAAEG,OAAOL,OACxCM,GAAuB,GAAKA,GAAuB,KACrDV,EAAgBU,EAClB,QAiBEnB,EAAAA,EAAAA,KAACoB,EAAa,CAACxC,KAAMA,EAAMC,aAAcA,MAC5B,C","sources":["routing/site/physics/components/SimpleHarmonicMotion/SHMVisualizer.jsx","routing/site/physics/components/SimpleHarmonicMotion/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nimport PropTypes from \"prop-types\"\n\n// Constants\nconst SPRING_CONSTANT = 0.5 // Assuming some constant for spring\n\n// Styled Components\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  padding: 20px;\n  background-color: #e0f7fa;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n`\n\nconst BlockAnimation = (amplitude) => keyframes`\n  0% { transform: translateX(${amplitude}px); }\n  50% { transform: translateX(-${amplitude}px); }\n  100% { transform: translateX(${amplitude}px); }\n`\n\nconst Block = styled.div`\n  width: 50px;\n  height: 50px;\n  background-color: #3498db;\n  border-radius: 5px;\n  position: relative;\n  animation: ${({ amplitude }) => BlockAnimation(amplitude)}\n    ${({ period }) => period}s linear infinite;\n`\n\nconst Info = styled.div`\n  margin-top: 20px;\n  font-size: 18px;\n  color: #333;\n  text-align: center;\n`\n\nconst SHMVisualizer = ({ mass, springLength }) => {\n  const [timeElapsed, setTimeElapsed] = useState(0)\n  const amplitude = springLength // Amplitude can be the length of the spring\n  const period = (2 * Math.PI) / Math.sqrt(SPRING_CONSTANT / mass) // Period of SHM\n  const requestRef = useRef()\n\n  // Time Elapsed Effect\n  useEffect(() => {\n    const start = Date.now()\n    const animate = () => {\n      setTimeElapsed((Date.now() - start) / 1000)\n      requestRef.current = requestAnimationFrame(animate)\n    }\n    requestRef.current = requestAnimationFrame(animate)\n    return () => cancelAnimationFrame(requestRef.current)\n  }, [])\n\n  return (\n    <Container>\n      <Block amplitude={amplitude} period={period} />\n      <Info>Time Elapsed: {timeElapsed.toFixed(2)}s</Info>\n    </Container>\n  )\n}\n\nSHMVisualizer.propTypes = {\n  mass: PropTypes.number.isRequired,\n  springLength: PropTypes.number.isRequired,\n}\n\nexport default SHMVisualizer\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\nimport SHMVisualizer from \"./SHMVisualizer\"\n\nconst HeaderContainer = styled.header`\n  width: 100%;\n  padding: 20px;\n  background-color: #4caf50;\n  color: #fff;\n  text-align: center;\n  font-size: 24px;\n  font-weight: bold;\n  border-bottom: 4px solid #388e3c;\n  margin-bottom: 16px;\n`\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #e8f5e9;\n  padding: 20px;\n`\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 20px;\n  background-color: #ffffff;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n`\n\nconst Input = styled.input`\n  margin: 10px 0;\n  padding: 10px;\n  font-size: 16px;\n  width: 200px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n`\n\nconst Label = styled.label`\n  font-size: 18px;\n  margin-top: 10px;\n  color: #555;\n`\n\nconst Main = () => {\n  const [mass, setMass] = useState(1)\n  const [springLength, setSpringLength] = useState(100)\n\n  const adjustMass = (e) => {\n    const updatedMass = Number(e.target.value)\n    if (updatedMass >= 0 && updatedMass <= 10) {\n      setMass(updatedMass)\n    }\n  }\n\n  const adjustSpringLength = (e) => {\n    const updatedSpringLength = Number(e.target.value)\n    if (updatedSpringLength >= 0 && updatedSpringLength <= 150) {\n      setSpringLength(updatedSpringLength)\n    }\n  }\n\n  return (\n    <AppContainer>\n      <HeaderContainer>Simple Harmonic Motion</HeaderContainer>\n      <InputContainer>\n        <Label htmlFor=\"mass\">Mass (0 to 10 kg):</Label>\n        <Input id=\"mass\" type=\"number\" value={mass} onChange={adjustMass} />\n        <Label htmlFor=\"springLength\">Spring Length (0 to 150 px):</Label>\n        <Input\n          id=\"springLength\"\n          type=\"number\"\n          value={springLength}\n          onChange={adjustSpringLength}\n        />\n      </InputContainer>\n      <SHMVisualizer mass={mass} springLength={springLength} />\n    </AppContainer>\n  )\n}\n\nexport default Main\n"],"names":["Container","styled","Block","_ref","amplitude","keyframes","BlockAnimation","_ref2","period","Info","_ref3","mass","springLength","timeElapsed","setTimeElapsed","useState","Math","PI","sqrt","requestRef","useRef","useEffect","start","Date","now","animate","current","requestAnimationFrame","cancelAnimationFrame","_jsxs","children","_jsx","toFixed","HeaderContainer","AppContainer","InputContainer","Input","Label","Main","setMass","setSpringLength","htmlFor","id","type","value","onChange","e","updatedMass","Number","target","updatedSpringLength","SHMVisualizer"],"sourceRoot":""}